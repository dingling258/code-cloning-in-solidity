<clones>
<systeminfo processor="nicad6" system="source-code" granularity="functions-consistent" threshold="30%" minlines="3" maxlines="2500"/>
<cloneinfo npcs="1704" npairs="9302"/>
<runinfo ncompares="482817" cputime="28627"/>
<classinfo nclasses="179"/>

<class classid="1" nclones="9" nlines="3" similarity="100">
<source file="systems/source-code/AddressResolver.sol" startline="49" endline="51" pcid="4">
    function getAddress(bytes32 name) external view returns (address) {
        return repository[name];
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="127" endline="129" pcid="269">
    function shortRateLastUpdated(bytes32 currency) internal view returns (uint) {
        return shortRatesLastUpdated[currency];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="80" endline="82" pcid="392">
    function getBytes32Value(bytes32 record) external view returns (bytes32) {
        return Bytes32Storage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="106" endline="108" pcid="398">
    function getIntValue(bytes32 record) external view returns (int) {
        return IntStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="54" endline="56" pcid="386">
    function getAddressValue(bytes32 record) external view returns (address) {
        return AddressStorage[record];
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="80" endline="82" pcid="426">
    function lastExchangeRate(bytes32 currencyKey) external view returns (uint) {
        return _lastExchangeRate[currencyKey];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="93" endline="95" pcid="395">
    function getBooleanValue(bytes32 record) external view returns (bool) {
        return BooleanStorage[record];
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="111" endline="113" pcid="22">
    function cachedSynthDebt(bytes32 currencyKey) external view returns (uint) {
        return _cachedSynthDebt[currencyKey];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="28" endline="30" pcid="380">
    function getUIntValue(bytes32 record) external view returns (uint) {
        return UIntStorage[record];
    }
</source>
</class>

<class classid="2" nclones="2" nlines="7" similarity="80">
<source file="systems/source-code/AddressSetLib.sol" startline="10" endline="16" pcid="7">
    function contains(AddressSet storage set, address candidate) internal view returns (bool) {
        if (set.elements.length == 0) {
            return false;
        }
        uint index = set.indices[candidate];
        return index != 0 || set.elements[0] == candidate;
    }
</source>
<source file="systems/source-code/Bytes32SetLib.sol" startline="10" endline="16" pcid="152">
    function contains(Bytes32Set storage set, bytes32 candidate) internal view returns (bool) {
        if (set.elements.length == 0) {
            return false;
        }
        uint index = set.indices[candidate];
        return index != 0 || set.elements[0] == candidate;
    }
</source>
</class>

<class classid="3" nclones="2" nlines="15" similarity="72">
<source file="systems/source-code/AddressSetLib.sol" startline="18" endline="40" pcid="8">
    function getPage(
        AddressSet storage set,
        uint index,
        uint pageSize
    ) internal view returns (address[] memory) {
        // NOTE: This implementation should be converted to slice operators if the compiler is updated to v0.6.0+
        uint endIndex = index + pageSize; // The check below that endIndex <= index handles overflow.

        // If the page extends past the end of the list, truncate it.
        if (endIndex > set.elements.length) {
            endIndex = set.elements.length;
        }
        if (endIndex <= index) {
            return new address[](0);
        }

        uint n = endIndex - index; // We already checked for negative overflow.
        address[] memory page = new address[](n);
        for (uint i; i < n; i++) {
            page[i] = set.elements[i + index];
        }
        return page;
    }
</source>
<source file="systems/source-code/Bytes32SetLib.sol" startline="18" endline="40" pcid="153">
    function getPage(
        Bytes32Set storage set,
        uint index,
        uint pageSize
    ) internal view returns (bytes32[] memory) {
        // NOTE: This implementation should be converted to slice operators if the compiler is updated to v0.6.0+
        uint endIndex = index + pageSize; // The check below that endIndex <= index handles overflow.

        // If the page extends past the end of the list, truncate it.
        if (endIndex > set.elements.length) {
            endIndex = set.elements.length;
        }
        if (endIndex <= index) {
            return new bytes32[](0);
        }

        uint n = endIndex - index; // We already checked for negative overflow.
        bytes32[] memory page = new bytes32[](n);
        for (uint i; i < n; i++) {
            page[i] = set.elements[i + index];
        }
        return page;
    }
</source>
</class>

<class classid="4" nclones="2" nlines="6" similarity="75">
<source file="systems/source-code/AddressSetLib.sol" startline="42" endline="48" pcid="9">
    function add(AddressSet storage set, address element) internal {
        // Adding to a set is an idempotent operation.
        if (!contains(set, element)) {
            set.indices[element] = set.elements.length;
            set.elements.push(element);
        }
    }
</source>
<source file="systems/source-code/Bytes32SetLib.sol" startline="42" endline="48" pcid="154">
    function add(Bytes32Set storage set, bytes32 element) internal {
        // Adding to a set is an idempotent operation.
        if (!contains(set, element)) {
            set.indices[element] = set.elements.length;
            set.elements.push(element);
        }
    }
</source>
</class>

<class classid="5" nclones="2" nlines="12" similarity="80">
<source file="systems/source-code/AddressSetLib.sol" startline="50" endline="63" pcid="10">
    function remove(AddressSet storage set, address element) internal {
        require(contains(set, element), "Element not in set.");
        // Replace the removed element with the last element of the list.
        uint index = set.indices[element];
        uint lastIndex = set.elements.length - 1; // We required that element is in the list, so it is not empty.
        if (index != lastIndex) {
            // No need to shift the last element if it is the one we want to delete.
            address shiftedElement = set.elements[lastIndex];
            set.elements[index] = shiftedElement;
            set.indices[shiftedElement] = index;
        }
        set.elements.pop();
        delete set.indices[element];
    }
</source>
<source file="systems/source-code/Bytes32SetLib.sol" startline="50" endline="63" pcid="155">
    function remove(Bytes32Set storage set, bytes32 element) internal {
        require(contains(set, element), "Element not in set.");
        // Replace the removed element with the last element of the list.
        uint index = set.indices[element];
        uint lastIndex = set.elements.length - 1; // We required that element is in the list, so it is not empty.
        if (index != lastIndex) {
            // No need to shift the last element if it is the one we want to delete.
            bytes32 shiftedElement = set.elements[lastIndex];
            set.elements[index] = shiftedElement;
            set.indices[shiftedElement] = index;
        }
        set.elements.pop();
        delete set.indices[element];
    }
</source>
</class>

<class classid="6" nclones="2" nlines="14" similarity="71">
<source file="systems/source-code/BaseDebtCache.sol" startline="57" endline="69" pcid="11">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](8);
        newAddresses[0] = CONTRACT_ISSUER;
        newAddresses[1] = CONTRACT_EXCHANGER;
        newAddresses[2] = CONTRACT_EXRATES;
        newAddresses[3] = CONTRACT_SYSTEMSTATUS;
        newAddresses[4] = CONTRACT_COLLATERALMANAGER;
        newAddresses[5] = CONTRACT_WRAPPER_FACTORY;
        newAddresses[6] = CONTRACT_ETHER_WRAPPER;
        newAddresses[7] = CONTRACT_FUTURESMARKETMANAGER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="98" endline="112" pcid="435">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](10);
        newAddresses[0] = CONTRACT_SYSTEMSTATUS;
        newAddresses[1] = CONTRACT_EXCHANGESTATE;
        newAddresses[2] = CONTRACT_EXRATES;
        newAddresses[3] = CONTRACT_SYNTHETIX;
        newAddresses[4] = CONTRACT_FEEPOOL;
        newAddresses[5] = CONTRACT_TRADING_REWARDS;
        newAddresses[6] = CONTRACT_DELEGATEAPPROVALS;
        newAddresses[7] = CONTRACT_ISSUER;
        newAddresses[8] = CONTRACT_DEBTCACHE;
        newAddresses[9] = CONTRACT_CIRCUIT_BREAKER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="7" nclones="115" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="71" endline="73" pcid="12">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/NativeEtherWrapper.sol" startline="41" endline="43" pcid="1156">
    function synthsETH() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHSETH));
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="49" endline="51" pcid="1354">
    function supplySchedule() internal view returns (ISupplySchedule) {
        return ISupplySchedule(requireAndGetAddress(CONTRACT_SUPPLYSCHEDULE));
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="41" endline="43" pcid="1352">
    function rewardEscrow() internal view returns (IRewardEscrow) {
        return IRewardEscrow(requireAndGetAddress(CONTRACT_REWARD_ESCROW));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="216" endline="218" pcid="1344">
    function futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURESMARKETMANAGER));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="75" endline="77" pcid="13">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="44" endline="46" pcid="1699">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="33" endline="35" pcid="144">
    function messenger() internal view returns (iAbs_BaseCrossDomainMessenger) {
        return iAbs_BaseCrossDomainMessenger(requireAndGetAddress(CONTRACT_EXT_MESSENGER));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="129" endline="131" pcid="791">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="45" endline="47" pcid="1353">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="118" endline="120" pcid="437">
    function exchangeState() internal view returns (IExchangeState) {
        return IExchangeState(requireAndGetAddress(CONTRACT_EXCHANGESTATE));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="145" endline="147" pcid="576">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="122" endline="124" pcid="438">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="212" endline="214" pcid="1343">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="37" endline="39" pcid="145">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="208" endline="210" pcid="1342">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="70" endline="72" pcid="1650">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="40" endline="42" pcid="1698">
    function flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="97" endline="99" pcid="430">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="66" endline="68" pcid="1649">
    function synthetix() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="511" endline="513" pcid="343">
    function synthetix() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="133" endline="135" pcid="792">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="114" endline="116" pcid="436">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="79" endline="81" pcid="14">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="74" endline="76" pcid="873">
    function eternalStorageLiquidations() internal view returns (EternalStorage) {
        return EternalStorage(requireAndGetAddress(CONTRACT_ETERNALSTORAGE_LIQUIDATIONS));
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="73" endline="75" pcid="1057">
    function flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="204" endline="206" pcid="1341">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="153" endline="155" pcid="797">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="137" endline="139" pcid="793">
    function synthetixDebtShare() internal view returns (ISynthetixDebtShare) {
        return ISynthetixDebtShare(requireAndGetAddress(CONTRACT_SYNTHETIXDEBTSHARE));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="89" endline="91" pcid="406">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/RewardEscrowV2.sol" startline="46" endline="48" pcid="1236">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="70" endline="72" pcid="94">
    function rewardsDistribution() internal view returns (IRewardsDistribution) {
        return IRewardsDistribution(requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="157" endline="159" pcid="798">
    function synthetixEscrow() internal view returns (IHasBalance) {
        return IHasBalance(requireAndGetAddress(CONTRACT_SYNTHETIXESCROW));
    }
</source>
<source file="systems/source-code/RewardEscrowV2.sol" startline="42" endline="44" pcid="1235">
    function oldRewardEscrow() internal view returns (IRewardEscrow) {
        return IRewardEscrow(requireAndGetAddress(CONTRACT_REWARD_ESCROW));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="200" endline="202" pcid="1340">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="69" endline="71" pcid="872">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="141" endline="143" pcid="794">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="73" endline="75" pcid="402">
    function synthsUSD() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="66" endline="68" pcid="93">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/OwnerRelayOnEthereum.sol" startline="24" endline="26" pcid="1167">
    function _messenger() private view returns (iAbs_BaseCrossDomainMessenger) {
        return iAbs_BaseCrossDomainMessenger(requireAndGetAddress(CONTRACT_EXT_MESSENGER));
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="65" endline="67" pcid="871">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="36" endline="38" pcid="1697">
    function synthsUSD() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTH_SUSD));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="62" endline="64" pcid="92">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/NativeEtherWrapper.sol" startline="33" endline="35" pcid="1154">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="149" endline="151" pcid="577">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="161" endline="163" pcid="799">
    function debtCache() internal view returns (IIssuerInternalDebtCache) {
        return IIssuerInternalDebtCache(requireAndGetAddress(CONTRACT_DEBTCACHE));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="515" endline="517" pcid="344">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="153" endline="155" pcid="578">
    function delegateApprovals() internal view returns (IDelegateApprovals) {
        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS));
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="35" endline="37" pcid="1373">
    function synthetixERC20() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="133" endline="135" pcid="573">
    function feePoolEternalStorage() internal view returns (FeePoolEternalStorage) {
        return FeePoolEternalStorage(requireAndGetAddress(CONTRACT_FEEPOOLETERNALSTORAGE));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="77" endline="79" pcid="403">
    function synthsETH() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSETH));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="125" endline="127" pcid="790">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="61" endline="63" pcid="870">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="41" endline="43" pcid="146">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="85" endline="87" pcid="405">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="39" endline="41" pcid="1374">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="130" endline="132" pcid="440">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="45" endline="47" pcid="147">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="57" endline="59" pcid="869">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="134" endline="136" pcid="441">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="126" endline="128" pcid="439">
    function exchangeCircuitBreaker() internal view returns (IExchangeCircuitBreaker) {
        return IExchangeCircuitBreaker(requireAndGetAddress(CONTRACT_CIRCUIT_BREAKER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="146" endline="148" pcid="444">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="165" endline="167" pcid="800">
    function synthRedeemer() internal view returns (ISynthRedeemer) {
        return ISynthRedeemer(requireAndGetAddress(CONTRACT_SYNTHREDEEMER));
    }
</source>
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="28" endline="30" pcid="1173">
    function _messenger() private view returns (iAbs_BaseCrossDomainMessenger) {
        return iAbs_BaseCrossDomainMessenger(requireAndGetAddress(CONTRACT_EXT_MESSENGER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="150" endline="152" pcid="445">
    function debtCache() internal view returns (IExchangerInternalDebtCache) {
        return IExchangerInternalDebtCache(requireAndGetAddress(CONTRACT_DEBTCACHE));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="58" endline="60" pcid="91">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="145" endline="147" pcid="795">
    function liquidations() internal view returns (ILiquidations) {
        return ILiquidations(requireAndGetAddress(CONTRACT_LIQUIDATIONS));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="213" endline="215" pcid="657">
    function _systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="51" endline="53" pcid="1012">
    function _flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="132" endline="134" pcid="162">
    function _feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="205" endline="207" pcid="655">
    function _exchangeCircuitBreaker() internal view returns (IExchangeCircuitBreaker) {
        return IExchangeCircuitBreaker(requireAndGetAddress(CONTRACT_CIRCUIT_BREAKER));
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="93" endline="95" pcid="429">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="129" endline="131" pcid="572">
    function synthetixDebtShare() internal view returns (ISynthetixDebtShare) {
        return ISynthetixDebtShare(requireAndGetAddress(CONTRACT_SYNTHETIXDEBTSHARE));
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="89" endline="91" pcid="428">
    function _exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="128" endline="130" pcid="161">
    function _exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="157" endline="159" pcid="579">
    function rewardsDistribution() internal view returns (IRewardsDistribution) {
        return IRewardsDistribution(requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="217" endline="219" pcid="658">
    function _manager() internal view returns (IFuturesMarketManagerInternal) {
        return IFuturesMarketManagerInternal(requireAndGetAddress(CONTRACT_FUTURESMARKETMANAGER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="142" endline="144" pcid="443">
    function delegateApprovals() internal view returns (IDelegateApprovals) {
        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="149" endline="151" pcid="796">
    function delegateApprovals() internal view returns (IDelegateApprovals) {
        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="209" endline="211" pcid="656">
    function _exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="36" endline="38" pcid="1147">
    function collateralManager() internal view returns (ICollateralManager) {
        return ICollateralManager(requireAndGetAddress(CONTRACT_COLLATERALMANAGER));
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="59" endline="61" pcid="1276">
    function _short() internal view returns (ICollateralErc20) {
        return ICollateralErc20(requireAndGetAddress(CONTRACT_SHORT));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="124" endline="126" pcid="160">
    function _exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="33" endline="35" pcid="752">
    function _futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURES_MARKET_MANAGER));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="69" endline="71" pcid="59">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="137" endline="139" pcid="574">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="138" endline="140" pcid="442">
    function tradingRewards() internal view returns (ITradingRewards) {
        return ITradingRewards(requireAndGetAddress(CONTRACT_TRADING_REWARDS));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="120" endline="122" pcid="159">
    function _synthsUSD() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="136" endline="138" pcid="163">
    function _collateralUtil() internal view returns (ICollateralUtil) {
        return ICollateralUtil(requireAndGetAddress(CONTRACT_COLLATERALUTIL));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="141" endline="143" pcid="575">
    function collateralManager() internal view returns (ICollateralManager) {
        return ICollateralManager(requireAndGetAddress(CONTRACT_COLLATERALMANAGER));
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="52" endline="54" pcid="734">
    function _sUSD() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="137" endline="139" pcid="214">
    function _issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="169" endline="171" pcid="582">
    function wrapperFactory() internal view returns (IWrapperFactory) {
        return IWrapperFactory(requireAndGetAddress(CONTRACT_WRAPPER_FACTORY));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="73" endline="75" pcid="60">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="40" endline="42" pcid="1148">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/SynthRedeemer.sol" startline="32" endline="34" pcid="1436">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/PurgeableSynth.sol" startline="42" endline="44" pcid="1214">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/SynthRedeemer.sol" startline="36" endline="38" pcid="1437">
    function sUSD() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="507" endline="509" pcid="342">
    function synthsUSD() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="99" endline="101" pcid="19">
    function wrapperFactory() internal view returns (IWrapperFactory) {
        return IWrapperFactory(requireAndGetAddress(CONTRACT_WRAPPER_FACTORY));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="95" endline="97" pcid="18">
    function futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURESMARKETMANAGER));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="91" endline="93" pcid="17">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="87" endline="89" pcid="16">
    function collateralManager() internal view returns (ICollateralManager) {
        return ICollateralManager(requireAndGetAddress(CONTRACT_COLLATERALMANAGER));
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="44" endline="46" pcid="1149">
    function wrapperFactory() internal view returns (IWrapperFactory) {
        return IWrapperFactory(requireAndGetAddress(CONTRACT_WRAPPER_FACTORY));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="165" endline="167" pcid="581">
    function futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURES_MARKET_MANAGER));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="83" endline="85" pcid="15">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="81" endline="83" pcid="404">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="112" endline="114" pcid="157">
    function _systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="125" endline="127" pcid="571">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="56" endline="58" pcid="735">
    function _feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="169" endline="171" pcid="801">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="77" endline="79" pcid="61">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="141" endline="143" pcid="215">
    function _exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="161" endline="163" pcid="580">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="60" endline="62" pcid="736">
    function _exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
</class>

<class classid="8" nclones="45" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="103" endline="105" pcid="20">
    function debtSnapshotStaleTime() external view returns (uint) {
        return getDebtSnapshotStaleTime();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="147" endline="149" pcid="765">
    function liquidationBufferRatio() external view returns (uint) {
        return _liquidationBufferRatio();
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="166" endline="168" pcid="449">
    function priceDeviationThresholdFactor() external view returns (uint) {
        return getPriceDeviationThresholdFactor();
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="90" endline="92" pcid="877">
    function liquidationPenalty() external view returns (uint) {
        return getLiquidationPenalty();
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="136" endline="138" pcid="414">
    function burnFeeRate() public view returns (uint256) {
        return getEtherWrapperBurnFeeRate();
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="158" endline="160" pcid="447">
    function waitingPeriodSecs() external view returns (uint) {
        return getWaitingPeriodSecs();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="140" endline="142" pcid="764">
    function liquidationFeeRatio() external view returns (uint) {
        return _liquidationFeeRatio();
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="356" endline="358" pcid="817">
    function minimumStakeTime() external view returns (uint) {
        return getMinimumStakeTime();
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="195" endline="197" pcid="803">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="162" endline="164" pcid="448">
    function tradingRewardsEnabled() external view returns (bool) {
        return getTradingRewardsEnabled();
    }
</source>
<source file="systems/source-code/ExchangerWithFeeRecAlternatives.sol" startline="49" endline="51" pcid="541">
    function atomicMaxVolumePerBlock() external view returns (uint) {
        return getAtomicMaxVolumePerBlock();
    }
</source>
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="35" endline="37" pcid="532">
    function atomicTwapWindow() external view returns (uint) {
        return getAtomicTwapWindow();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="155" endline="157" pcid="766">
    function minInitialMargin() external view returns (uint) {
        return _minInitialMargin();
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="82" endline="84" pcid="875">
    function liquidationDelay() external view returns (uint) {
        return getLiquidationDelay();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="132" endline="134" pcid="763">
    function minKeeperFee() external view returns (uint) {
        return _minKeeperFee();
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="86" endline="88" pcid="876">
    function liquidationRatio() external view returns (uint) {
        return getLiquidationRatio();
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="78" endline="80" pcid="874">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/VirtualSynth.sol" startline="128" endline="130" pcid="1684">
    function rate() external view returns (uint) {
        return calcRate();
    }
</source>
<source file="systems/source-code/VirtualSynth.sol" startline="138" endline="140" pcid="1686">
    function secsLeftInWaitingPeriod() external view returns (uint) {
        return secsLeft();
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="132" endline="134" pcid="413">
    function mintFeeRate() public view returns (uint256) {
        return getEtherWrapperMintFeeRate();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="39" endline="41" pcid="1454">
    function priceDeviationThresholdFactor() external view returns (uint) {
        return getPriceDeviationThresholdFactor();
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="84" endline="86" pcid="493">
    function rateStalePeriod() external view returns (uint) {
        return getRateStalePeriod();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="45" endline="47" pcid="1455">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="53" endline="55" pcid="1456">
    function feePeriodDuration() external view returns (uint) {
        return getFeePeriodDuration();
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="88" endline="90" pcid="494">
    function aggregatorWarningFlags() external view returns (address) {
        return getAggregatorWarningFlags();
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="173" endline="175" pcid="583">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="192" endline="194" pcid="1481">
    function atomicTwapWindow() external view returns (uint) {
        return getAtomicTwapWindow();
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="76" endline="78" pcid="425">
    function priceDeviationThresholdFactor() external view returns (uint) {
        return getPriceDeviationThresholdFactor();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="186" endline="188" pcid="1480">
    function atomicMaxVolumePerBlock() external view returns (uint) {
        return getAtomicMaxVolumePerBlock();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="154" endline="156" pcid="1474">
    function etherWrapperBurnFeeRate() external view returns (uint) {
        return getEtherWrapperBurnFeeRate();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="58" endline="60" pcid="1457">
    function targetThreshold() external view returns (uint) {
        return getTargetThreshold();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="148" endline="150" pcid="1473">
    function etherWrapperMintFeeRate() external view returns (uint) {
        return getEtherWrapperMintFeeRate();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="142" endline="144" pcid="1472">
    function etherWrapperMaxETH() external view returns (uint) {
        return getEtherWrapperMaxETH();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="132" endline="134" pcid="1470">
    function tradingRewardsEnabled() external view returns (bool) {
        return getTradingRewardsEnabled();
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="181" endline="183" pcid="585">
    function targetThreshold() external view returns (uint) {
        return getTargetThreshold();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="64" endline="66" pcid="1458">
    function liquidationDelay() external view returns (uint) {
        return getLiquidationDelay();
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="128" endline="130" pcid="412">
    function maxETH() public view returns (uint256) {
        return getEtherWrapperMaxETH();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="126" endline="128" pcid="1469">
    function aggregatorWarningFlags() external view returns (address) {
        return getAggregatorWarningFlags();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="122" endline="124" pcid="1468">
    function debtSnapshotStaleTime() external view returns (uint) {
        return getDebtSnapshotStaleTime();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="32" endline="34" pcid="1453">
    function waitingPeriodSecs() external view returns (uint) {
        return getWaitingPeriodSecs();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="118" endline="120" pcid="1467">
    function minimumStakeTime() external view returns (uint) {
        return getMinimumStakeTime();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="82" endline="84" pcid="1461">
    function rateStalePeriod() external view returns (uint) {
        return getRateStalePeriod();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="71" endline="73" pcid="1459">
    function liquidationRatio() external view returns (uint) {
        return getLiquidationRatio();
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="177" endline="179" pcid="584">
    function feePeriodDuration() external view returns (uint) {
        return getFeePeriodDuration();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="77" endline="79" pcid="1460">
    function liquidationPenalty() external view returns (uint) {
        return getLiquidationPenalty();
    }
</source>
</class>

<class classid="9" nclones="21" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="107" endline="109" pcid="21">
    function cachedDebt() external view returns (uint) {
        return _cachedDebt;
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="25" endline="27" pcid="1288">
    function unit() external pure returns (int) {
        return UNIT;
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="32" endline="34" pcid="1289">
    function preciseUnit() external pure returns (int) {
        return PRECISE_UNIT;
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="81" endline="83" pcid="262">
    function ratesLastUpdated() public view returns (uint) {
        return borrowRatesLastUpdated;
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="24" endline="26" pcid="1260">
    function unit() external pure returns (uint) {
        return UNIT;
    }
</source>
<source file="systems/source-code/MockMutator.sol" startline="6" endline="8" pcid="1130">
    function read() external view returns (uint) {
        return count;
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="65" endline="67" pcid="1277">
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="31" endline="33" pcid="1261">
    function preciseUnit() external pure returns (uint) {
        return PRECISE_UNIT;
    }
</source>
<source file="systems/source-code/OneWeekSetup.sol" startline="10" endline="12" pcid="1163">
    function publicSetupExpiryTime() public view returns (uint) {
        return setupExpiryTime;
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="119" endline="121" pcid="24">
    function cacheInvalid() external view returns (bool) {
        return _cacheInvalid;
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="140" endline="142" pcid="415">
    function weth() public view returns (IWETH) {
        return _weth;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="110" endline="112" pcid="1096">
    function latestRound() public view returns (uint256) {
        return roundId;
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="115" endline="117" pcid="23">
    function cacheTimestamp() external view returns (uint) {
        return _cacheTimestamp;
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="49" endline="51" pcid="1305">
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="114" endline="116" pcid="1097">
    function decimals() external view returns (uint8) {
        return keyDecimals;
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="61" endline="63" pcid="1521">
    function contractName() external view returns (bytes32) {
        return SETTINGS_CONTRACT_NAME;
    }
</source>
<source file="systems/source-code/WETH.sol" startline="41" endline="46" pcid="1692">
    function totalSupply() public view returns (uint) {
        // Using _totalSupply instead of balanceOf[this]
        // as it would cause error in OVM compile
        // return address(this).balance;
        return _totalSupply;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="90" endline="92" pcid="1655">
    function getCurrentPeriod() external view returns (uint) {
        return _currentPeriodID;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="86" endline="88" pcid="1654">
    function getPeriodController() external view returns (address) {
        return _periodController;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="74" endline="76" pcid="1651">
    function getAvailableRewards() external view returns (uint) {
        return _balanceAssignedToRewards;
    }
</source>
<source file="systems/source-code/TestableFuturesMarket.sol" startline="12" endline="14" pcid="1627">
    function entryDebtCorrection() external view returns (int) {
        return _entryDebtCorrection;
    }
</source>
</class>

<class classid="10" nclones="14" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="130" endline="132" pcid="26">
    function cacheStale() external view returns (bool) {
        return _cacheStale(_cacheTimestamp);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToBase.sol" startline="24" endline="26" pcid="1363">
    function synthetixBridgeToOptimism() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_BASE_SYNTHETIXBRIDGETOOPTIMISM);
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="84" endline="86" pcid="427">
    function exchangeRates() public view returns (address) {
        return requireAndGetAddress(CONTRACT_EXRATES);
    }
</source>
<source file="systems/source-code/ExchangerWithFeeRecAlternatives.sol" startline="109" endline="111" pcid="545">
    function _virtualSynthMastercopy() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_VIRTUALSYNTH_MASTERCOPY);
    }
</source>
<source file="systems/source-code/ImportableRewardEscrowV2.sol" startline="25" endline="27" pcid="786">
    function synthetixBridgeToBase() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE_BASE);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="51" endline="53" pcid="1377">
    function synthetixBridgeEscrow() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIXBRIDGEESCROW);
    }
</source>
<source file="systems/source-code/TestableFuturesMarket.sol" startline="21" endline="23" pcid="1629">
    function maxFundingRate() external view returns (uint) {
        return _maxFundingRate(marketKey);
    }
</source>
<source file="systems/source-code/RewardEscrowV2.sol" startline="38" endline="40" pcid="1234">
    function synthetixBridgeToOptimism() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE_OPTIMISM);
    }
</source>
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="32" endline="34" pcid="1174">
    function _ownerRelayOnEthereum() private view returns (address) {
        return requireAndGetAddress(CONTRACT_BASE_OWNER_RELAY_ON_ETHEREUM);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="47" endline="49" pcid="1376">
    function synthetixBridgeToBase() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_OVM_SYNTHETIXBRIDGETOBASE);
    }
</source>
<source file="systems/source-code/MintableSynthetix.sol" startline="44" endline="46" pcid="1007">
    function synthetixBridge() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE);
    }
</source>
<source file="systems/source-code/OwnerRelayOnEthereum.sol" startline="28" endline="30" pcid="1168">
    function _ownerRelayOnOptimism() private view returns (address) {
        return requireAndGetAddress(CONTRACT_OVM_OWNER_RELAY_ON_OPTIMISM);
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="221" endline="223" pcid="659">
    function _settings() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_FUTURESMARKETSETTINGS);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="43" endline="45" pcid="1375">
    function rewardsDistribution() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION);
    }
</source>
</class>

<class classid="11" nclones="2" nlines="8" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="184" endline="191" pcid="30">
    function _cachedSynthDebts(bytes32[] memory currencyKeys) internal view returns (uint[] memory) {
        uint numKeys = currencyKeys.length;
        uint[] memory debts = new uint[](numKeys);
        for (uint i = 0; i < numKeys; i++) {
            debts[i] = _cachedSynthDebt[currencyKeys[i]];
        }
        return debts;
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="197" endline="204" pcid="32">
    function _excludedIssuedDebts(bytes32[] memory currencyKeys) internal view returns (uint[] memory) {
        uint numKeys = currencyKeys.length;
        uint[] memory debts = new uint[](numKeys);
        for (uint i = 0; i < numKeys; i++) {
            debts[i] = _excludedIssuedDebt[currencyKeys[i]];
        }
        return debts;
    }
</source>
</class>

<class classid="12" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="193" endline="195" pcid="31">
    function cachedSynthDebts(bytes32[] calldata currencyKeys) external view returns (uint[] memory snxIssuedDebts) {
        return _cachedSynthDebts(currencyKeys);
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="206" endline="208" pcid="33">
    function excludedIssuedDebts(bytes32[] calldata currencyKeys) external view returns (uint[] memory excludedDebts) {
        return _excludedIssuedDebts(currencyKeys);
    }
</source>
</class>

<class classid="13" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/BaseOneNetAggregator.sol" startline="25" endline="29" pcid="53">
    function setOverrideTimestamp(uint timestamp) public onlyOwner {
        overrideTimestamp = timestamp;

        emit SetOverrideTimestamp(timestamp);
    }
</source>
<source file="systems/source-code/RewardEscrowV2.sol" startline="58" endline="61" pcid="1237">
    function setMigrateEntriesThresholdAmount(uint amount) external onlyOwner {
        migrateEntriesThresholdAmount = amount;
        emit MigrateEntriesThresholdAmountUpdated(amount);
    }
</source>
</class>

<class classid="14" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/BaseOneNetAggregator.sol" startline="49" endline="51" pcid="56">
    function decimals() external view returns (uint8) {
        return 0;
    }
</source>
<source file="systems/source-code/EmptyEtherWrapper.sol" startline="10" endline="12" pcid="371">
    function totalIssuedSynths() public view returns (uint) {
        return 0;
    }
</source>
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="18" endline="20" pcid="374">
    function numMarkets() external view returns (uint) {
        return 0;
    }
</source>
</class>

<class classid="15" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="81" endline="83" pcid="62">
    function _notImplemented() internal pure {
        revert("Cannot be run on this layer");
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="1037" endline="1039" pcid="489">
    function _notImplemented() internal pure {
        revert("Cannot be run on this layer");
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="360" endline="362" pcid="134">
    function _notImplemented() internal pure {
        revert("Cannot be run on this layer");
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="526" endline="529" pcid="529">
    function _notImplemented() internal pure {
        // slither-disable-next-line dead-code
        revert("Cannot be run on this layer");
    }
</source>
</class>

<class classid="16" nclones="5" nlines="6" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="88" endline="93" pcid="63">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTHETIX;
        addresses[1] = CONTRACT_FEEPOOL;
        addresses[2] = CONTRACT_ISSUER;
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="45" endline="50" pcid="733">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTHSUSD;
        addresses[1] = CONTRACT_FEEPOOL;
        addresses[2] = CONTRACT_EXCHANGER;
    }
</source>
<source file="systems/source-code/Depot.sol" startline="465" endline="470" pcid="338">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTHSUSD;
        addresses[1] = CONTRACT_EXRATES;
        addresses[2] = CONTRACT_SYNTHETIX;
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="28" endline="33" pcid="1696">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTH_SUSD;
        addresses[1] = CONTRACT_FLEXIBLESTORAGE;
        addresses[2] = CONTRACT_FEEPOOL;
    }
</source>
<source file="systems/source-code/TestableMixinResolver.sol" startline="15" endline="20" pcid="1635">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_EXAMPLE_1;
        addresses[1] = CONTRACT_EXAMPLE_2;
        addresses[2] = CONTRACT_EXAMPLE_3;
    }
</source>
</class>

<class classid="17" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="98" endline="100" pcid="64">
    function balanceOf(address account) public view returns (uint) {
        return totalEscrowedAccountBalance[account];
    }
</source>
<source file="systems/source-code/MockFlagsInterface.sol" startline="14" endline="16" pcid="1115">
    function getFlag(address aggregator) external view returns (bool) {
        return flags[aggregator];
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="79" endline="81" pcid="1219">
    function balanceOf(address account) public view returns (uint) {
        return totalEscrowedAccountBalance[account];
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="69" endline="71" pcid="1278">
    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="53" endline="55" pcid="1306">
    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="56" endline="58" pcid="1414">
    function balanceOf(address account) public view returns (uint) {
        return totalVestedAccountBalance[account];
    }
</source>
</class>

<class classid="18" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="105" endline="107" pcid="65">
    function numVestingEntries(address account) external view returns (uint) {
        return accountVestingEntryIDs[account].length;
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="90" endline="92" pcid="1221">
    function numVestingEntries(address account) external view returns (uint) {
        return vestingSchedules[account].length;
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="63" endline="65" pcid="1415">
    function numVestingEntries(address account) public view returns (uint) {
        return vestingSchedules[account].length;
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="83" endline="85" pcid="1220">
    function _numVestingEntries(address account) internal view returns (uint) {
        return vestingSchedules[account].length;
    }
</source>
</class>

<class classid="19" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="300" endline="303" pcid="80">
    function setMaxAccountMergingWindow(uint256 duration) external onlyOwner {
        maxAccountMergingDuration = duration;
        emit MaxAccountMergingDurationUpdated(duration);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="305" endline="308" pcid="81">
    function setMaxEscrowDuration(uint256 duration) external onlyOwner {
        max_duration = duration;
        emit MaxEscrowDurationUpdated(duration);
    }
</source>
</class>

<class classid="20" nclones="2" nlines="8" similarity="71">
<source file="systems/source-code/BaseSynthetix.sol" startline="50" endline="56" pcid="90">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](4);
        addresses[0] = CONTRACT_SYSTEMSTATUS;
        addresses[1] = CONTRACT_EXCHANGER;
        addresses[2] = CONTRACT_ISSUER;
        addresses[3] = CONTRACT_REWARDSDISTRIBUTION;
    }
</source>
<source file="systems/source-code/Synth.sol" startline="191" endline="198" pcid="1339">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](5);
        addresses[0] = CONTRACT_SYSTEMSTATUS;
        addresses[1] = CONTRACT_EXCHANGER;
        addresses[2] = CONTRACT_ISSUER;
        addresses[3] = CONTRACT_FEEPOOL;
        addresses[4] = CONTRACT_FUTURESMARKETMANAGER;
    }
</source>
</class>

<class classid="21" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="90" endline="92" pcid="99">
    function availableSynthCount() external view returns (uint) {
        return issuer().availableSynthCount();
    }
</source>
<source file="systems/source-code/NativeEtherWrapper.sol" startline="37" endline="39" pcid="1155">
    function weth() internal view returns (IWETH) {
        return etherWrapper().weth();
    }
</source>
</class>

<class classid="22" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="98" endline="100" pcid="101">
    function synths(bytes32 currencyKey) external view returns (ISynth) {
        return issuer().synths(currencyKey);
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="170" endline="172" pcid="450">
    function lastExchangeRate(bytes32 currencyKey) external view returns (uint) {
        return exchangeCircuitBreaker().lastExchangeRate(currencyKey);
    }
</source>
</class>

<class classid="23" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="102" endline="104" pcid="102">
    function synthsByAddress(address synthAddress) external view returns (bytes32) {
        return issuer().synthsByAddress(synthAddress);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="134" endline="136" pcid="108">
    function collateral(address account) external view returns (uint) {
        return issuer().collateral(account);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="130" endline="132" pcid="107">
    function collateralisationRatio(address _issuer) external view returns (uint) {
        return issuer().collateralisationRatio(_issuer);
    }
</source>
</class>

<class classid="24" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="192" endline="202" pcid="113">
    function settle(bytes32 currencyKey)
        external
        optionalProxy
        returns (
            uint reclaimed,
            uint refunded,
            uint numEntriesSettled
        )
    {
        return exchanger().settle(messageSender, currencyKey);
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="121" endline="131" pcid="1358">
    function settle(bytes32 currencyKey)
        external
        optionalProxy
        returns (
            uint reclaimed,
            uint refunded,
            uint numEntriesSettled
        )
    {
        return exchanger().settle(messageSender, currencyKey);
    }
</source>
</class>

<class classid="25" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="268" endline="270" pcid="118">
    function issueSynths(uint amount) external issuanceActive optionalProxy {
        return issuer().issueSynths(messageSender, amount);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="284" endline="286" pcid="122">
    function burnSynths(uint amount) external issuanceActive optionalProxy {
        return issuer().burnSynths(messageSender, amount);
    }
</source>
</class>

<class classid="26" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="272" endline="274" pcid="119">
    function issueSynthsOnBehalf(address issueForAddress, uint amount) external issuanceActive optionalProxy {
        return issuer().issueSynthsOnBehalf(issueForAddress, messageSender, amount);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="288" endline="290" pcid="123">
    function burnSynthsOnBehalf(address burnForAddress, uint amount) external issuanceActive optionalProxy {
        return issuer().burnSynthsOnBehalf(burnForAddress, messageSender, amount);
    }
</source>
</class>

<class classid="27" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="276" endline="278" pcid="120">
    function issueMaxSynths() external issuanceActive optionalProxy {
        return issuer().issueMaxSynths(messageSender);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="292" endline="294" pcid="124">
    function burnSynthsToTarget() external issuanceActive optionalProxy {
        return issuer().burnSynthsToTarget(messageSender);
    }
</source>
</class>

<class classid="28" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="280" endline="282" pcid="121">
    function issueMaxSynthsOnBehalf(address issueForAddress) external issuanceActive optionalProxy {
        return issuer().issueMaxSynthsOnBehalf(issueForAddress, messageSender);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="296" endline="298" pcid="125">
    function burnSynthsToTargetOnBehalf(address burnForAddress) external issuanceActive optionalProxy {
        return issuer().burnSynthsToTargetOnBehalf(burnForAddress, messageSender);
    }
</source>
</class>

<class classid="29" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="348" endline="350" pcid="131">
    function mintSecondary(address, uint) external {
        _notImplemented();
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="356" endline="358" pcid="133">
    function burnSecondary(address, uint) external {
        _notImplemented();
    }
</source>
</class>

<class classid="30" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="371" endline="373" pcid="135">
    function _systemActive() private {
        systemStatus().requireSystemActive();
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="380" endline="382" pcid="136">
    function _issuanceActive() private {
        systemStatus().requireIssuanceActive();
    }
</source>
</class>

<class classid="31" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="433" endline="449" pcid="140">
    function emitSynthExchange(
        address account,
        bytes32 fromCurrencyKey,
        uint256 fromAmount,
        bytes32 toCurrencyKey,
        uint256 toAmount,
        address toAddress
    ) external onlyExchanger {
        proxy._emit(
            abi.encode(fromCurrencyKey, fromAmount, toCurrencyKey, toAmount, toAddress),
            2,
            SYNTH_EXCHANGE_SIG,
            addressToBytes32(account),
            0,
            0
        );
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="196" endline="212" pcid="1361">
    function emitAtomicSynthExchange(
        address account,
        bytes32 fromCurrencyKey,
        uint256 fromAmount,
        bytes32 toCurrencyKey,
        uint256 toAmount,
        address toAddress
    ) external onlyExchanger {
        proxy._emit(
            abi.encode(fromCurrencyKey, fromAmount, toCurrencyKey, toAmount, toAddress),
            2,
            ATOMIC_SYNTH_EXCHANGE_SIG,
            addressToBytes32(account),
            0,
            0
        );
    }
</source>
</class>

<class classid="32" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="466" endline="472" pcid="142">
    function emitExchangeReclaim(
        address account,
        bytes32 currencyKey,
        uint256 amount
    ) external onlyExchanger {
        proxy._emit(abi.encode(currencyKey, amount), 2, EXCHANGERECLAIM_SIG, addressToBytes32(account), 0, 0);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="477" endline="483" pcid="143">
    function emitExchangeRebate(
        address account,
        bytes32 currencyKey,
        uint256 amount
    ) external onlyExchanger {
        proxy._emit(abi.encode(currencyKey, amount), 2, EXCHANGEREBATE_SIG, addressToBytes32(account), 0, 0);
    }
</source>
</class>

<class classid="33" nclones="2" nlines="9" similarity="100">
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="55" endline="63" pcid="149">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](4);
        newAddresses[0] = CONTRACT_EXT_MESSENGER;
        newAddresses[1] = CONTRACT_SYNTHETIX;
        newAddresses[2] = CONTRACT_REWARDESCROW;
        newAddresses[3] = CONTRACT_FEEPOOL;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="61" endline="69" pcid="1379">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseSynthetixBridge.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](4);
        newAddresses[0] = CONTRACT_ISSUER;
        newAddresses[1] = CONTRACT_REWARDSDISTRIBUTION;
        newAddresses[2] = CONTRACT_OVM_SYNTHETIXBRIDGETOBASE;
        newAddresses[3] = CONTRACT_SYNTHETIXBRIDGEESCROW;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="34" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Collateral.sol" startline="116" endline="118" pcid="158">
    function _synth(bytes32 synthName) internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(synthName));
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="145" endline="147" pcid="216">
    function _synth(bytes32 synthName) internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(synthName));
    }
</source>
</class>

<class classid="35" nclones="8" nlines="4" similarity="75">
<source file="systems/source-code/Collateral.sol" startline="181" endline="184" pcid="168">
    function setMinCollateral(uint _minCollateral) external onlyOwner {
        minCollateral = _minCollateral;
        emit MinCollateralUpdated(minCollateral);
    }
</source>
<source file="systems/source-code/Depot.sol" startline="91" endline="94" pcid="322">
    function setMaxEthPurchase(uint _maxEthPurchase) external onlyOwner {
        maxEthPurchase = _maxEthPurchase;
        emit MaxEthPurchaseUpdated(maxEthPurchase);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="317" endline="321" pcid="230">
    function setMaxDebt(uint _maxDebt) public onlyOwner {
        require(_maxDebt > 0, "Must be greater than 0");
        maxDebt = _maxDebt;
        emit MaxDebtUpdated(maxDebt);
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="186" endline="189" pcid="169">
    function setIssueFeeRate(uint _issueFeeRate) external onlyOwner {
        issueFeeRate = _issueFeeRate;
        emit IssueFeeRateUpdated(issueFeeRate);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="311" endline="315" pcid="229">
    function setUtilisationMultiplier(uint _utilisationMultiplier) public onlyOwner {
        require(_utilisationMultiplier > 0, "Must be greater than 0");
        utilisationMultiplier = _utilisationMultiplier;
        emit UtilisationMultiplierUpdated(utilisationMultiplier);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="323" endline="326" pcid="231">
    function setMaxSkewRate(uint _maxSkewRate) public onlyOwner {
        maxSkewRate = _maxSkewRate;
        emit MaxSkewRateUpdated(maxSkewRate);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="328" endline="331" pcid="232">
    function setBaseBorrowRate(uint _baseBorrowRate) public onlyOwner {
        baseBorrowRate = _baseBorrowRate;
        emit BaseBorrowRateUpdated(baseBorrowRate);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="333" endline="336" pcid="233">
    function setBaseShortRate(uint _baseShortRate) public onlyOwner {
        baseShortRate = _baseShortRate;
        emit BaseShortRateUpdated(baseShortRate);
    }
</source>
</class>

<class classid="36" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/Collateral.sol" startline="191" endline="194" pcid="170">
    function setCanOpenLoans(bool _canOpenLoans) external onlyOwner {
        canOpenLoans = _canOpenLoans;
        emit CanOpenLoansUpdated(canOpenLoans);
    }
</source>
<source file="systems/source-code/DappMaintenance.sol" startline="33" endline="36" pcid="290">
    function setMaintenanceModeStaking(bool isPaused) external onlyOwner {
        isPausedStaking = isPaused;
        emit StakingMaintenance(isPausedStaking);
    }
</source>
<source file="systems/source-code/DappMaintenance.sol" startline="38" endline="41" pcid="291">
    function setMaintenanceModeSX(bool isPaused) external onlyOwner {
        isPausedSX = isPaused;
        emit SXMaintenance(isPausedSX);
    }
</source>
</class>

<class classid="37" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/CollateralErc20.sol" startline="83" endline="89" pcid="199">
    function repay(
        address borrower,
        uint id,
        uint amount
    ) external returns (uint principal, uint collateral) {
        (principal, collateral) = _repay(borrower, msg.sender, id, amount);
    }
</source>
<source file="systems/source-code/CollateralEth.sol" startline="43" endline="49" pcid="208">
    function repay(
        address borrower,
        uint id,
        uint amount
    ) external returns (uint principal, uint collateral) {
        (principal, collateral) = _repay(borrower, msg.sender, id, amount);
    }
</source>
<source file="systems/source-code/CollateralShort.sol" startline="53" endline="59" pcid="275">
    function repay(
        address borrower,
        uint id,
        uint amount
    ) external returns (uint principal, uint collateral) {
        (principal, collateral) = _repay(borrower, msg.sender, id, amount);
    }
</source>
</class>

<class classid="38" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/CollateralErc20.sol" startline="91" endline="93" pcid="200">
    function draw(uint id, uint amount) external returns (uint principal, uint collateral) {
        (principal, collateral) = _draw(id, amount);
    }
</source>
<source file="systems/source-code/CollateralShort.sol" startline="82" endline="84" pcid="279">
    function draw(uint id, uint amount) external returns (uint principal, uint collateral) {
        (principal, collateral) = _draw(id, amount);
    }
</source>
<source file="systems/source-code/CollateralEth.sol" startline="51" endline="53" pcid="209">
    function draw(uint id, uint amount) external returns (uint principal, uint collateral) {
        (principal, collateral) = _draw(id, amount);
    }
</source>
</class>

<class classid="39" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="166" endline="168" pcid="219">
    function long(bytes32 synth) external view returns (uint amount) {
        return state.long(synth);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="170" endline="172" pcid="220">
    function short(bytes32 synth) external view returns (uint amount) {
        return state.short(synth);
    }
</source>
</class>

<class classid="40" nclones="2" nlines="8" similarity="80">
<source file="systems/source-code/CollateralManager.sol" startline="346" endline="353" pcid="235">
    function addCollaterals(address[] calldata collaterals) external onlyOwner {
        for (uint i = 0; i < collaterals.length; i++) {
            if (!_collaterals.contains(collaterals[i])) {
                _collaterals.add(collaterals[i]);
                emit CollateralAdded(collaterals[i]);
            }
        }
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="355" endline="362" pcid="236">
    function removeCollaterals(address[] calldata collaterals) external onlyOwner {
        for (uint i = 0; i < collaterals.length; i++) {
            if (_collaterals.contains(collaterals[i])) {
                _collaterals.remove(collaterals[i]);
                emit CollateralRemoved(collaterals[i]);
            }
        }
    }
</source>
</class>

<class classid="41" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="489" endline="491" pcid="245">
    function updateBorrowRatesCollateral(uint rate) external onlyCollateral {
        state.updateBorrowRates(rate);
    }
</source>
<source file="systems/source-code/SynthetixState.sol" startline="84" endline="86" pcid="1431">
    function appendDebtLedgerValue(uint value) external onlyAssociatedContract {
        debtLedger.push(value);
    }
</source>
</class>

<class classid="42" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="497" endline="499" pcid="247">
    function incrementLongs(bytes32 synth, uint amount) external onlyCollateral {
        state.incrementLongs(synth, amount);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="505" endline="507" pcid="249">
    function incrementShorts(bytes32 synth, uint amount) external onlyCollateral {
        state.incrementShorts(synth, amount);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="509" endline="511" pcid="250">
    function decrementShorts(bytes32 synth, uint amount) external onlyCollateral {
        state.decrementShorts(synth, amount);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="501" endline="503" pcid="248">
    function decrementLongs(bytes32 synth, uint amount) external onlyCollateral {
        state.decrementLongs(synth, amount);
    }
</source>
</class>

<class classid="43" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="42" endline="44" pcid="253">
    function long(bytes32 synth) external view onlyAssociatedContract returns (uint) {
        return totalIssuedSynths[synth].long;
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="46" endline="48" pcid="254">
    function short(bytes32 synth) external view onlyAssociatedContract returns (uint) {
        return totalIssuedSynths[synth].short;
    }
</source>
</class>

<class classid="44" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="50" endline="52" pcid="255">
    function incrementLongs(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].long = totalIssuedSynths[synth].long.add(amount);
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="58" endline="60" pcid="257">
    function incrementShorts(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].short = totalIssuedSynths[synth].short.add(amount);
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="54" endline="56" pcid="256">
    function decrementLongs(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].long = totalIssuedSynths[synth].long.sub(amount);
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="62" endline="64" pcid="258">
    function decrementShorts(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].short = totalIssuedSynths[synth].short.sub(amount);
    }
</source>
</class>

<class classid="45" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="72" endline="74" pcid="260">
    function getRatesLength() public view returns (uint) {
        return borrowRates.length;
    }
</source>
<source file="systems/source-code/SynthetixState.sol" startline="93" endline="95" pcid="1432">
    function debtLedgerLength() external view returns (uint) {
        return debtLedger.length;
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="368" endline="370" pcid="820">
    function availableSynthCount() external view returns (uint) {
        return availableSynths.length;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="43" endline="45" pcid="1554">
    function systemSuspended() external view returns (bool) {
        return systemSuspension.suspended;
    }
</source>
<source file="systems/source-code/MixinFuturesViews.sol" startline="50" endline="52" pcid="1039">
    function fundingSequenceLength() external view returns (uint) {
        return fundingSequence.length;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="192" endline="194" pcid="1251">
    function distributionsLength() external view returns (uint) {
        return distributions.length;
    }
</source>
</class>

<class classid="46" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="110" endline="112" pcid="265">
    function removeShortCurrency(bytes32 currency) external onlyAssociatedContract {
        delete shortRates[currency];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="75" endline="77" pcid="391">
    function deleteBytesValue(bytes32 record) external onlyAssociatedContract {
        delete BytesStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="36" endline="38" pcid="382">
    function deleteUIntValue(bytes32 record) external onlyAssociatedContract {
        delete UIntStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="101" endline="103" pcid="397">
    function deleteBooleanValue(bytes32 record) external onlyAssociatedContract {
        delete BooleanStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="114" endline="116" pcid="400">
    function deleteIntValue(bytes32 record) external onlyAssociatedContract {
        delete IntStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="62" endline="64" pcid="388">
    function deleteAddressValue(bytes32 record) external onlyAssociatedContract {
        delete AddressStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="49" endline="51" pcid="385">
    function deleteStringValue(bytes32 record) external onlyAssociatedContract {
        delete StringStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="88" endline="90" pcid="394">
    function deleteBytes32Value(bytes32 record) external onlyAssociatedContract {
        delete Bytes32Storage[record];
    }
</source>
</class>

<class classid="47" nclones="2" nlines="5" similarity="75">
<source file="systems/source-code/CollateralShort.sol" startline="29" endline="33" pcid="272">
    function close(uint id) external returns (uint amount, uint collateral) {
        (amount, collateral) = _close(msg.sender, id);

        IERC20(address(_synthsUSD())).transfer(msg.sender, collateral);
    }
</source>
<source file="systems/source-code/CollateralShort.sol" startline="61" endline="67" pcid="276">
    function closeWithCollateral(uint id) external returns (uint amount, uint collateral) {
        (amount, collateral) = _closeLoanByRepayment(msg.sender, id);

        if (collateral > 0) {
            IERC20(address(_synthsUSD())).transfer(msg.sender, collateral);
        }
    }
</source>
</class>

<class classid="48" nclones="7" nlines="6" similarity="80">
<source file="systems/source-code/CollateralUtil.sol" startline="27" endline="32" pcid="281">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="26" endline="31" pcid="751">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinFuturesMarketSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_FUTURES_MARKET_MANAGER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/ImportableRewardEscrowV2.sol" startline="18" endline="23" pcid="785">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseRewardEscrowV2.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_SYNTHETIX_BRIDGE_BASE;
        return combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/MintableSynthetix.sol" startline="37" endline="42" pcid="1006">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseSynthetix.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_SYNTHETIX_BRIDGE;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToBase.sol" startline="42" endline="47" pcid="1365">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseSynthetixBridge.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_BASE_SYNTHETIXBRIDGETOOPTIMISM;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/PurgeableSynth.sol" startline="35" endline="40" pcid="1213">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = Synth.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/ExchangerWithFeeRecAlternatives.sol" startline="40" endline="45" pcid="540">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = Exchanger.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_VIRTUALSYNTH_MASTERCOPY;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="49" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/DelegateApprovals.sol" startline="47" endline="49" pcid="303">
    function canBurnFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(BURN_FOR_ADDRESS, authoriser, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="51" endline="53" pcid="304">
    function canIssueFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(ISSUE_FOR_ADDRESS, authoriser, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="55" endline="57" pcid="305">
    function canClaimFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(CLAIM_FOR_ADDRESS, authoriser, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="59" endline="61" pcid="306">
    function canExchangeFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(EXCHANGE_FOR_ADDRESS, authoriser, delegate);
    }
</source>
</class>

<class classid="50" nclones="9" nlines="3" similarity="100">
<source file="systems/source-code/DelegateApprovals.sol" startline="83" endline="85" pcid="309">
    function approveAllDelegatePowers(address delegate) external {
        _setApproval(APPROVE_ALL, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="126" endline="128" pcid="318">
    function removeExchangeOnBehalf(address delegate) external {
        _withdrawApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="117" endline="119" pcid="316">
    function removeClaimOnBehalf(address delegate) external {
        _withdrawApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="99" endline="101" pcid="312">
    function removeBurnOnBehalf(address delegate) external {
        _withdrawApproval(BURN_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="104" endline="106" pcid="313">
    function approveIssueOnBehalf(address delegate) external {
        _setApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="95" endline="97" pcid="311">
    function approveBurnOnBehalf(address delegate) external {
        _setApproval(BURN_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="122" endline="124" pcid="317">
    function approveExchangeOnBehalf(address delegate) external {
        _setApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="108" endline="110" pcid="314">
    function removeIssueOnBehalf(address delegate) external {
        _withdrawApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="113" endline="115" pcid="315">
    function approveClaimOnBehalf(address delegate) external {
        _setApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
</class>

<class classid="51" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Depot.sol" startline="477" endline="480" pcid="339">
    function synthetixReceivedForSynths(uint amount) public view returns (uint) {
        // And what would that be worth in SNX based on the current price?
        return amount.divideDecimal(exchangeRates().rateForCurrency(SNX));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="500" endline="503" pcid="341">
    function synthsReceivedForEther(uint amount) public view returns (uint) {
        // How many synths would that amount of ether be worth?
        return amount.multiplyDecimal(exchangeRates().rateForCurrency(ETH));
    }
</source>
</class>

<class classid="52" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EmptyCollateralManager.sol" startline="16" endline="18" pcid="347">
    function long(bytes32) external view returns (uint amount) {
        return 0;
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="20" endline="22" pcid="348">
    function short(bytes32) external view returns (uint amount) {
        return 0;
    }
</source>
</class>

<class classid="53" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/EmptyCollateralManager.sol" startline="24" endline="26" pcid="349">
    function totalLong() external view returns (uint susdValue, bool anyRateIsInvalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="28" endline="30" pcid="350">
    function totalShort() external view returns (uint susdValue, bool anyRateIsInvalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="38" endline="40" pcid="378">
    function totalDebt() external view returns (uint debt, bool isInvalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="32" endline="34" pcid="351">
    function getBorrowRate() external view returns (uint borrowRate, bool anyRateIsInvalid) {
        return (0, false);
    }
</source>
</class>

<class classid="54" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EmptyCollateralManager.sol" startline="70" endline="72" pcid="356">
    function areSynthsAndCurrenciesSet(bytes32[] calldata, bytes32[] calldata) external view returns (bool) {
        return false;
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="74" endline="76" pcid="357">
    function areShortableSynthsSet(bytes32[] calldata, bytes32[] calldata) external view returns (bool) {
        return false;
    }
</source>
</class>

<class classid="55" nclones="3" nlines="11" similarity="90">
<source file="systems/source-code/EtherWrapper.sol" startline="60" endline="70" pcid="401">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](5);
        newAddresses[0] = CONTRACT_SYNTHSETH;
        newAddresses[1] = CONTRACT_SYNTHSUSD;
        newAddresses[2] = CONTRACT_EXRATES;
        newAddresses[3] = CONTRACT_ISSUER;
        newAddresses[4] = CONTRACT_FEEPOOL;
        addresses = combineArrays(existingAddresses, newAddresses);
        return addresses;
    }
</source>
<source file="systems/source-code/Liquidations.sol" startline="46" endline="55" pcid="868">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](5);
        newAddresses[0] = CONTRACT_SYSTEMSTATUS;
        newAddresses[1] = CONTRACT_SYNTHETIX;
        newAddresses[2] = CONTRACT_ETERNALSTORAGE_LIQUIDATIONS;
        newAddresses[3] = CONTRACT_ISSUER;
        newAddresses[4] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="194" endline="203" pcid="654">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinFuturesMarketSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](5);
        newAddresses[0] = CONTRACT_EXCHANGER;
        newAddresses[1] = CONTRACT_CIRCUIT_BREAKER;
        newAddresses[2] = CONTRACT_FUTURESMARKETMANAGER;
        newAddresses[3] = CONTRACT_FUTURESMARKETSETTINGS;
        newAddresses[4] = CONTRACT_SYSTEMSTATUS;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="56" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EtherWrapper.sol" startline="120" endline="122" pcid="410">
    function calculateMintFee(uint amount) public view returns (uint) {
        return amount.multiplyDecimalRound(mintFeeRate());
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="124" endline="126" pcid="411">
    function calculateBurnFee(uint amount) public view returns (uint) {
        return amount.multiplyDecimalRound(burnFeeRate());
    }
</source>
</class>

<class classid="57" nclones="4" nlines="8" similarity="85">
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="53" endline="60" pcid="422">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](3);
        newAddresses[0] = CONTRACT_SYSTEMSTATUS;
        newAddresses[1] = CONTRACT_EXRATES;
        newAddresses[2] = CONTRACT_ISSUER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="48" endline="55" pcid="1150">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = Synth.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](3);
        newAddresses[0] = CONTRACT_COLLATERALMANAGER;
        newAddresses[1] = CONTRACT_ETHER_WRAPPER;
        newAddresses[2] = CONTRACT_WRAPPER_FACTORY;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/RewardEscrowV2.sol" startline="29" endline="36" pcid="1233">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseRewardEscrowV2.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](3);
        newAddresses[0] = CONTRACT_SYNTHETIX_BRIDGE_OPTIMISM;
        newAddresses[1] = CONTRACT_REWARD_ESCROW;
        newAddresses[2] = CONTRACT_SYSTEMSTATUS;
        return combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="30" endline="37" pcid="1351">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseSynthetix.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](3);
        newAddresses[0] = CONTRACT_REWARD_ESCROW;
        newAddresses[1] = CONTRACT_REWARDESCROW_V2;
        newAddresses[2] = CONTRACT_SUPPLYSCHEDULE;
        return combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="58" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/Exchanger.sol" startline="716" endline="724" pcid="472">
    function reclaim(
        address from,
        bytes32 currencyKey,
        uint amount
    ) internal {
        // burn amount from user
        issuer().synths(currencyKey).burn(from, amount);
        ISynthetixInternal(address(synthetix())).emitExchangeReclaim(from, currencyKey, amount);
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="726" endline="734" pcid="473">
    function refund(
        address from,
        bytes32 currencyKey,
        uint amount
    ) internal {
        // issue amount to user
        issuer().synths(currencyKey).issue(from, amount);
        ISynthetixInternal(address(synthetix())).emitExchangeRebate(from, currencyKey, amount);
    }
</source>
</class>

<class classid="59" nclones="21" nlines="3" similarity="100">
<source file="systems/source-code/ExchangeRates.sol" startline="116" endline="118" pcid="497">
    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint) {
        return _getCurrentRoundId(currencyKey);
    }
</source>
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="39" endline="41" pcid="533">
    function atomicEquivalentForDexPricing(bytes32 currencyKey) external view returns (address) {
        return getAtomicEquivalentForDexPricing(currencyKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="91" endline="93" pcid="760">
    function maxFundingRate(bytes32 _marketKey) public view returns (uint) {
        return _maxFundingRate(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="98" endline="100" pcid="761">
    function skewScaleUSD(bytes32 _marketKey) public view returns (uint) {
        return _skewScaleUSD(_marketKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="216" endline="218" pcid="1485">
    function atomicVolatilityConsiderationWindow(bytes32 currencyKey) external view returns (uint) {
        return getAtomicVolatilityConsiderationWindow(currencyKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="87" endline="89" pcid="1462">
    function exchangeFeeRate(bytes32 currencyKey) external view returns (uint) {
        return getExchangeFeeRate(currencyKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="222" endline="224" pcid="1486">
    function atomicVolatilityUpdateThreshold(bytes32 currencyKey) external view returns (uint) {
        return getAtomicVolatilityUpdateThreshold(currencyKey);
    }
</source>
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="51" endline="53" pcid="536">
    function atomicVolatilityUpdateThreshold(bytes32 currencyKey) external view returns (uint) {
        return getAtomicVolatilityUpdateThreshold(currencyKey);
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="154" endline="156" pcid="500">
    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256) {
        return _getUpdatedTime(currencyKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="84" endline="86" pcid="759">
    function maxMarketValueUSD(bytes32 _marketKey) public view returns (uint) {
        return _maxMarketValueUSD(_marketKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="204" endline="206" pcid="1483">
    function atomicExchangeFeeRate(bytes32 currencyKey) external view returns (uint) {
        return getAtomicExchangeFeeRate(currencyKey);
    }
</source>
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="47" endline="49" pcid="535">
    function atomicVolatilityConsiderationWindow(bytes32 currencyKey) external view returns (uint) {
        return getAtomicVolatilityConsiderationWindow(currencyKey);
    }
</source>
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="43" endline="45" pcid="534">
    function atomicPriceBuffer(bytes32 currencyKey) external view returns (uint) {
        return getAtomicPriceBuffer(currencyKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="198" endline="200" pcid="1482">
    function atomicEquivalentForDexPricing(bytes32 currencyKey) external view returns (address) {
        return getAtomicEquivalentForDexPricing(currencyKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="42" endline="44" pcid="753">
    function takerFee(bytes32 _marketKey) external view returns (uint) {
        return _takerFee(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="70" endline="72" pcid="757">
    function nextPriceConfirmWindow(bytes32 _marketKey) public view returns (uint) {
        return _nextPriceConfirmWindow(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="63" endline="65" pcid="756">
    function makerFeeNextPrice(bytes32 _marketKey) public view returns (uint) {
        return _makerFeeNextPrice(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="56" endline="58" pcid="755">
    function takerFeeNextPrice(bytes32 _marketKey) external view returns (uint) {
        return _takerFeeNextPrice(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="77" endline="79" pcid="758">
    function maxLeverage(bytes32 _marketKey) public view returns (uint) {
        return _maxLeverage(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="49" endline="51" pcid="754">
    function makerFee(bytes32 _marketKey) public view returns (uint) {
        return _makerFee(_marketKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="210" endline="212" pcid="1484">
    function atomicPriceBuffer(bytes32 currencyKey) external view returns (uint) {
        return getAtomicPriceBuffer(currencyKey);
    }
</source>
</class>

<class classid="60" nclones="2" nlines="7" similarity="100">
<source file="systems/source-code/ExchangeRates.sol" startline="158" endline="166" pcid="501">
    function lastRateUpdateTimesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory) {
        uint[] memory lastUpdateTimes = new uint[](currencyKeys.length);

        for (uint i = 0; i < currencyKeys.length; i++) {
            lastUpdateTimes[i] = _getUpdatedTime(currencyKeys[i]);
        }

        return lastUpdateTimes;
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="242" endline="250" pcid="507">
    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory) {
        uint[] memory _localRates = new uint[](currencyKeys.length);

        for (uint i = 0; i < currencyKeys.length; i++) {
            _localRates[i] = _getRate(currencyKeys[i]);
        }

        return _localRates;
    }
</source>
</class>

<class classid="61" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/ExchangeRates.sol" startline="210" endline="212" pcid="505">
    function rateForCurrency(bytes32 currencyKey) external view returns (uint) {
        return _getRateAndUpdatedTime(currencyKey).rate;
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="456" endline="458" pcid="523">
    function _getUpdatedTime(bytes32 currencyKey) internal view returns (uint256) {
        return _getRateAndUpdatedTime(currencyKey).time;
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="452" endline="454" pcid="522">
    function _getRate(bytes32 currencyKey) internal view returns (uint256) {
        return _getRateAndUpdatedTime(currencyKey).rate;
    }
</source>
</class>

<class classid="62" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/ExchangeState.sol" startline="18" endline="20" pcid="551">
    function setMaxEntriesInQueue(uint _maxEntriesInQueue) external onlyOwner {
        maxEntriesInQueue = _maxEntriesInQueue;
    }
</source>
<source file="systems/source-code/Synth.sol" startline="184" endline="186" pcid="1338">
    function setTotalSupply(uint amount) external optionalProxy_onlyOwner {
        totalSupply = amount;
    }
</source>
<source file="systems/source-code/TestablePausable.sol" startline="14" endline="16" pcid="1636">
    function setSomeValue(uint _value) external notPaused {
        someValue = _value;
    }
</source>
<source file="systems/source-code/TestableTempOwned.sol" startline="13" endline="15" pcid="1638">
    function setTestValue(uint _testValue) external onlyTemporaryOwner {
        testValue = _testValue;
    }
</source>
</class>

<class classid="63" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ExternStateToken.sol" startline="60" endline="62" pcid="558">
    function balanceOf(address account) external view returns (uint) {
        return tokenState.balanceOf(account);
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="10" endline="12" pcid="1610">
    function contains(address candidate) public view returns (bool) {
        return set.contains(candidate);
    }
</source>
</class>

<class classid="64" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ExternStateToken.sol" startline="140" endline="146" pcid="565">
    function emitTransfer(
        address from,
        address to,
        uint value
    ) internal {
        proxy._emit(abi.encode(value), 3, TRANSFER_SIG, addressToBytes32(from), addressToBytes32(to), 0);
    }
</source>
<source file="systems/source-code/ExternStateToken.sol" startline="151" endline="157" pcid="566">
    function emitApproval(
        address owner,
        address spender,
        uint value
    ) internal {
        proxy._emit(abi.encode(value), 3, APPROVAL_SIG, addressToBytes32(owner), addressToBytes32(spender), 0);
    }
</source>
</class>

<class classid="65" nclones="2" nlines="19" similarity="94">
<source file="systems/source-code/FeePool.sol" startline="105" endline="123" pcid="570">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](14);
        newAddresses[0] = CONTRACT_SYSTEMSTATUS;
        newAddresses[1] = CONTRACT_SYNTHETIXDEBTSHARE;
        newAddresses[2] = CONTRACT_FEEPOOLETERNALSTORAGE;
        newAddresses[3] = CONTRACT_EXCHANGER;
        newAddresses[4] = CONTRACT_ISSUER;
        newAddresses[5] = CONTRACT_REWARDESCROW_V2;
        newAddresses[6] = CONTRACT_DELEGATEAPPROVALS;
        newAddresses[7] = CONTRACT_REWARDSDISTRIBUTION;
        newAddresses[8] = CONTRACT_COLLATERALMANAGER;
        newAddresses[9] = CONTRACT_WRAPPER_FACTORY;
        newAddresses[10] = CONTRACT_ETHER_WRAPPER;
        newAddresses[11] = CONTRACT_EXT_AGGREGATOR_ISSUED_SYNTHS;
        newAddresses[12] = CONTRACT_EXT_AGGREGATOR_DEBT_RATIO;
        newAddresses[13] = CONTRACT_FUTURES_MARKET_MANAGER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="105" endline="123" pcid="789">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](14);
        newAddresses[0] = CONTRACT_SYNTHETIX;
        newAddresses[1] = CONTRACT_EXCHANGER;
        newAddresses[2] = CONTRACT_EXRATES;
        newAddresses[3] = CONTRACT_SYNTHETIXDEBTSHARE;
        newAddresses[4] = CONTRACT_FEEPOOL;
        newAddresses[5] = CONTRACT_DELEGATEAPPROVALS;
        newAddresses[6] = CONTRACT_REWARDESCROW_V2;
        newAddresses[7] = CONTRACT_SYNTHETIXESCROW;
        newAddresses[8] = CONTRACT_LIQUIDATIONS;
        newAddresses[9] = CONTRACT_DEBTCACHE;
        newAddresses[10] = CONTRACT_SYNTHREDEEMER;
        newAddresses[11] = CONTRACT_SYSTEMSTATUS;
        newAddresses[12] = CONTRACT_EXT_AGGREGATOR_ISSUED_SYNTHS;
        newAddresses[13] = CONTRACT_EXT_AGGREGATOR_DEBT_RATIO;
        return combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="66" nclones="2" nlines="8" similarity="100">
<source file="systems/source-code/FeePool.sol" startline="524" endline="534" pcid="603">
    function totalFeesAvailable() external view returns (uint) {
        uint totalFees = 0;

        // Fees in fee period [0] are not yet available for withdrawal
        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {
            totalFees = totalFees.add(_recentFeePeriodsStorage(i).feesToDistribute);
            totalFees = totalFees.sub(_recentFeePeriodsStorage(i).feesClaimed);
        }

        return totalFees;
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="539" endline="549" pcid="604">
    function totalRewardsAvailable() external view returns (uint) {
        uint totalRewards = 0;

        // Rewards in fee period [0] are not yet available for withdrawal
        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {
            totalRewards = totalRewards.add(_recentFeePeriodsStorage(i).rewardsToDistribute);
            totalRewards = totalRewards.sub(_recentFeePeriodsStorage(i).rewardsClaimed);
        }

        return totalRewards;
    }
</source>
</class>

<class classid="67" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/FlexibleStorage.sol" startline="69" endline="71" pcid="629">
    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint) {
        return uintStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="83" endline="85" pcid="631">
    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int) {
        return intStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="97" endline="99" pcid="633">
    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address) {
        return addressStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="125" endline="127" pcid="637">
    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32) {
        return bytes32Storage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="111" endline="113" pcid="635">
    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool) {
        return boolStorage[hashes[contractName]][record];
    }
</source>
</class>

<class classid="68" nclones="5" nlines="6" similarity="75">
<source file="systems/source-code/FlexibleStorage.sol" startline="148" endline="158" pcid="640">
    function setUIntValues(
        bytes32 contractName,
        bytes32[] calldata records,
        uint[] calldata values
    ) external onlyContract(contractName) {
        require(records.length == values.length, "Input lengths must match");

        for (uint i = 0; i < records.length; i++) {
            _setUIntValue(contractName, records[i], values[i]);
        }
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="252" endline="262" pcid="652">
    function setBytes32Values(
        bytes32 contractName,
        bytes32[] calldata records,
        bytes32[] calldata values
    ) external onlyContract(contractName) {
        require(records.length == values.length, "Input lengths must match");

        for (uint i = 0; i < records.length; i++) {
            _setBytes32Value(contractName, records[i], values[i]);
        }
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="226" endline="236" pcid="649">
    function setBoolValues(
        bytes32 contractName,
        bytes32[] calldata records,
        bool[] calldata values
    ) external onlyContract(contractName) {
        require(records.length == values.length, "Input lengths must match");

        for (uint i = 0; i < records.length; i++) {
            _setBoolValue(contractName, records[i], values[i]);
        }
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="200" endline="210" pcid="646">
    function setAddressValues(
        bytes32 contractName,
        bytes32[] calldata records,
        address[] calldata values
    ) external onlyContract(contractName) {
        require(records.length == values.length, "Input lengths must match");

        for (uint i = 0; i < records.length; i++) {
            _setAddressValue(contractName, records[i], values[i]);
        }
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="174" endline="184" pcid="643">
    function setIntValues(
        bytes32 contractName,
        bytes32[] calldata records,
        int[] calldata values
    ) external onlyContract(contractName) {
        require(records.length == values.length, "Input lengths must match");

        for (uint i = 0; i < records.length; i++) {
            _setIntValue(contractName, records[i], values[i]);
        }
    }
</source>
</class>

<class classid="69" nclones="5" nlines="5" similarity="75">
<source file="systems/source-code/FlexibleStorage.sol" startline="160" endline="164" pcid="641">
    function deleteUIntValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {
        uint value = uintStorage[hashes[contractName]][record];
        emit ValueDeletedUInt(contractName, record, value);
        delete uintStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="212" endline="216" pcid="647">
    function deleteAddressValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {
        address value = addressStorage[hashes[contractName]][record];
        emit ValueDeletedAddress(contractName, record, value);
        delete addressStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="186" endline="190" pcid="644">
    function deleteIntValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {
        int value = intStorage[hashes[contractName]][record];
        emit ValueDeletedInt(contractName, record, value);
        delete intStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="238" endline="242" pcid="650">
    function deleteBoolValue(bytes32 contractName, bytes32 record) external onlyContract(contractName) {
        bool value = boolStorage[hashes[contractName]][record];
        emit ValueDeletedBool(contractName, record, value);
        delete boolStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="264" endline="268" pcid="653">
    function deleteBytes32Value(bytes32 contractName, bytes32 record) external onlyContract(contractName) {
        bytes32 value = bytes32Storage[hashes[contractName]][record];
        emit ValueDeletedBytes32(contractName, record, value);
        delete bytes32Storage[hashes[contractName]][record];
    }
</source>
</class>

<class classid="70" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="570" endline="572" pcid="681">
    function _signedAbs(int x) internal pure returns (int) {
        return x < 0 ? -x : x;
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="197" endline="199" pcid="1273">
    function signedAbs(int x) internal pure returns (int) {
        return x < 0 ? -x : x;
    }
</source>
</class>

<class classid="71" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="577" endline="579" pcid="682">
    function _abs(int x) internal pure returns (uint) {
        return uint(_signedAbs(x));
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="204" endline="206" pcid="1274">
    function abs(int x) internal pure returns (uint) {
        return uint(signedAbs(x));
    }
</source>
</class>

<class classid="72" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="908" endline="910" pcid="701">
    function modifyPosition(int sizeDelta) external {
        _modifyPosition(sizeDelta, bytes32(0));
    }
</source>
<source file="systems/source-code/MixinFuturesNextPriceOrders.sol" startline="31" endline="33" pcid="1027">
    function submitNextPriceOrder(int sizeDelta) external {
        _submitNextPriceOrder(sizeDelta, bytes32(0));
    }
</source>
</class>

<class classid="73" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="916" endline="918" pcid="702">
    function modifyPositionWithTracking(int sizeDelta, bytes32 trackingCode) external {
        _modifyPosition(sizeDelta, trackingCode);
    }
</source>
<source file="systems/source-code/MixinFuturesNextPriceOrders.sol" startline="37" endline="39" pcid="1028">
    function submitNextPriceOrderWithTracking(int sizeDelta, bytes32 trackingCode) external {
        _submitNextPriceOrder(sizeDelta, trackingCode);
    }
</source>
</class>

<class classid="74" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="270" endline="273" pcid="724">
    function _notionalValue(IFuturesMarket market, address account) internal view returns (int) {
        (int value, ) = market.notionalValue(account);
        return value;
    }
</source>
<source file="systems/source-code/FuturesMarketData.sol" startline="280" endline="283" pcid="726">
    function _accruedFunding(IFuturesMarket market, address account) internal view returns (int) {
        (int value, ) = market.accruedFunding(account);
        return value;
    }
</source>
<source file="systems/source-code/FuturesMarketData.sol" startline="275" endline="278" pcid="725">
    function _profitLoss(IFuturesMarket market, address account) internal view returns (int) {
        (int value, ) = market.profitLoss(account);
        return value;
    }
</source>
</class>

<class classid="75" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="285" endline="288" pcid="727">
    function _remainingMargin(IFuturesMarket market, address account) internal view returns (uint) {
        (uint value, ) = market.remainingMargin(account);
        return value;
    }
</source>
<source file="systems/source-code/FuturesMarketData.sol" startline="290" endline="293" pcid="728">
    function _accessibleMargin(IFuturesMarket market, address account) internal view returns (uint) {
        (uint value, ) = market.accessibleMargin(account);
        return value;
    }
</source>
</class>

<class classid="76" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketManager.sol" startline="74" endline="76" pcid="738">
    function numMarkets() external view returns (uint) {
        return _markets.elements.length;
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="26" endline="28" pcid="1614">
    function size() public view returns (uint) {
        return set.elements.length;
    }
</source>
<source file="systems/source-code/TestableBytes32Set.sol" startline="26" endline="28" pcid="1621">
    function size() public view returns (uint) {
        return set.elements.length;
    }
</source>
</class>

<class classid="77" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="172" endline="175" pcid="768">
    function setTakerFee(bytes32 _marketKey, uint _takerFee) public onlyOwner {
        require(_takerFee <= 1e18, "taker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_TAKER_FEE, _takerFee);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="182" endline="185" pcid="770">
    function setTakerFeeNextPrice(bytes32 _marketKey, uint _takerFeeNextPrice) public onlyOwner {
        require(_takerFeeNextPrice <= 1e18, "taker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_TAKER_FEE_NEXT_PRICE, _takerFeeNextPrice);
    }
</source>
</class>

<class classid="78" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="177" endline="180" pcid="769">
    function setMakerFee(bytes32 _marketKey, uint _makerFee) public onlyOwner {
        require(_makerFee <= 1e18, "maker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_MAKER_FEE, _makerFee);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="187" endline="190" pcid="771">
    function setMakerFeeNextPrice(bytes32 _marketKey, uint _makerFeeNextPrice) public onlyOwner {
        require(_makerFeeNextPrice <= 1e18, "maker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_MAKER_FEE_NEXT_PRICE, _makerFeeNextPrice);
    }
</source>
</class>

<class classid="79" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="192" endline="194" pcid="772">
    function setNextPriceConfirmWindow(bytes32 _marketKey, uint _nextPriceConfirmWindow) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_NEXT_PRICE_CONFIRM_WINDOW, _nextPriceConfirmWindow);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="196" endline="198" pcid="773">
    function setMaxLeverage(bytes32 _marketKey, uint _maxLeverage) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_LEVERAGE, _maxLeverage);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="200" endline="202" pcid="774">
    function setMaxMarketValueUSD(bytes32 _marketKey, uint _maxMarketValueUSD) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_MARKET_VALUE, _maxMarketValueUSD);
    }
</source>
</class>

<class classid="80" nclones="2" nlines="5" similarity="75">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="215" endline="218" pcid="776">
    function setMaxFundingRate(bytes32 _marketKey, uint _maxFundingRate) public onlyOwner {
        _recomputeFunding(_marketKey);
        _setParameter(_marketKey, PARAMETER_MAX_FUNDING_RATE, _maxFundingRate);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="220" endline="224" pcid="777">
    function setSkewScaleUSD(bytes32 _marketKey, uint _skewScaleUSD) public onlyOwner {
        require(_skewScaleUSD > 0, "cannot set skew scale 0");
        _recomputeFunding(_marketKey);
        _setParameter(_marketKey, PARAMETER_MIN_SKEW_SCALE, _skewScaleUSD);
    }
</source>
</class>

<class classid="81" nclones="2" nlines="5" similarity="75">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="250" endline="254" pcid="779">
    function setMinKeeperFee(uint _sUSD) external onlyOwner {
        require(_sUSD <= _minInitialMargin(), "min margin < liquidation fee");
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_KEEPER_FEE, _sUSD);
        emit MinKeeperFeeUpdated(_sUSD);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="266" endline="270" pcid="782">
    function setMinInitialMargin(uint _minMargin) external onlyOwner {
        require(_minKeeperFee() <= _minMargin, "min margin < liquidation fee");
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_INITIAL_MARGIN, _minMargin);
        emit MinInitialMarginUpdated(_minMargin);
    }
</source>
</class>

<class classid="82" nclones="5" nlines="4" similarity="75">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="256" endline="259" pcid="780">
    function setLiquidationFeeRatio(uint _ratio) external onlyOwner {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_FEE_RATIO, _ratio);
        emit LiquidationFeeRatioUpdated(_ratio);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="332" endline="336" pcid="1501">
    function setExchangeDynamicFeeRounds(uint rounds) external onlyOwner {
        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_DYNAMIC_FEE_ROUNDS, rounds);

        emit ExchangeDynamicFeeRoundsUpdated(rounds);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="321" endline="327" pcid="1500">
    function setExchangeDynamicFeeWeightDecay(uint weightDecay) external onlyOwner {
        require(weightDecay != 0, "Weight decay cannot be 0");

        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_DYNAMIC_FEE_WEIGHT_DECAY, weightDecay);

        emit ExchangeDynamicFeeWeightDecayUpdated(weightDecay);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="310" endline="316" pcid="1499">
    function setExchangeDynamicFeeThreshold(uint threshold) external onlyOwner {
        require(threshold != 0, "Threshold cannot be 0");

        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_DYNAMIC_FEE_THRESHOLD, threshold);

        emit ExchangeDynamicFeeThresholdUpdated(threshold);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="261" endline="264" pcid="781">
    function setLiquidationBufferRatio(uint _ratio) external onlyOwner {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_BUFFER_RATIO, _ratio);
        emit LiquidationBufferRatioUpdated(_ratio);
    }
</source>
</class>

<class classid="83" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="283" endline="286" pcid="810">
    function _lastIssueEvent(address account) internal view returns (uint) {
        //  Get the timestamp of the last issue this account made
        return flexibleStorage().getUIntValue(CONTRACT_NAME, keccak256(abi.encodePacked(LAST_ISSUE_EVENT, account)));
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="189" endline="195" pcid="1078">
    function getWrapperMaxTokenAmount(address wrapper) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_WRAPPER_MAX_TOKEN_AMOUNT, wrapper))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="197" endline="203" pcid="1079">
    function getWrapperMintFeeRate(address wrapper) internal view returns (int) {
        return
            flexibleStorage().getIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_WRAPPER_MINT_FEE_RATE, wrapper))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="205" endline="211" pcid="1080">
    function getWrapperBurnFeeRate(address wrapper) internal view returns (int) {
        return
            flexibleStorage().getIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_WRAPPER_BURN_FEE_RATE, wrapper))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="213" endline="219" pcid="1081">
    function getInteractionDelay(address collateral) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_INTERACTION_DELAY, collateral))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="221" endline="227" pcid="1082">
    function getCollapseFeeRate(address collateral) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_COLLAPSE_FEE_RATE, collateral))
            );
    }
</source>
</class>

<class classid="84" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="313" endline="315" pcid="812">
    function _snxToUSD(uint amount, uint snxRate) internal pure returns (uint) {
        return amount.multiplyDecimalRound(snxRate);
    }
</source>
<source file="systems/source-code/PublicMath.sol" startline="11" endline="13" pcid="1202">
    function powerDecimal(uint x, uint y) public pure returns (uint) {
        return x.powDecimal(y);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="317" endline="319" pcid="813">
    function _usdToSnx(uint amount, uint snxRate) internal pure returns (uint) {
        return amount.divideDecimalRound(snxRate);
    }
</source>
</class>

<class classid="85" nclones="9" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="360" endline="362" pcid="818">
    function canBurnSynths(address account) external view returns (bool) {
        return _canBurnSynths(account);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="160" endline="162" pcid="1475">
    function wrapperMaxTokenAmount(address wrapper) external view returns (uint) {
        return getWrapperMaxTokenAmount(wrapper);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="166" endline="168" pcid="1476">
    function wrapperMintFeeRate(address wrapper) external view returns (int) {
        return getWrapperMintFeeRate(wrapper);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="172" endline="174" pcid="1477">
    function wrapperBurnFeeRate(address wrapper) external view returns (int) {
        return getWrapperBurnFeeRate(wrapper);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="176" endline="178" pcid="1478">
    function interactionDelay(address collateral) external view returns (uint) {
        return getInteractionDelay(collateral);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="396" endline="398" pcid="826">
    function collateral(address account) external view returns (uint) {
        return _collateral(account);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="180" endline="182" pcid="1479">
    function collapseFeeRate(address collateral) external view returns (uint) {
        return getCollapseFeeRate(collateral);
    }
</source>
<source file="systems/source-code/VirtualSynth.sol" startline="134" endline="136" pcid="1685">
    function balanceOfUnderlying(address account) external view returns (uint) {
        return balanceUnderlying(account);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="380" endline="382" pcid="823">
    function lastIssueEvent(address account) external view returns (uint) {
        return _lastIssueEvent(account);
    }
</source>
</class>

<class classid="86" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="570" endline="572" pcid="839">
    function issueMaxSynths(address from) external onlySynthetix {
        _issueSynths(from, 0, true);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="601" endline="603" pcid="844">
    function burnSynthsToTarget(address from) external onlySynthetix {
        _voluntaryBurnSynths(from, 0, true);
    }
</source>
</class>

<class classid="87" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="574" endline="581" pcid="840">
    function issueSynthsOnBehalf(
        address issueForAddress,
        address from,
        uint amount
    ) external onlySynthetix {
        _requireCanIssueOnBehalf(issueForAddress, from);
        _issueSynths(issueForAddress, amount, false);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="592" endline="599" pcid="843">
    function burnSynthsOnBehalf(
        address burnForAddress,
        address from,
        uint amount
    ) external onlySynthetix {
        _requireCanBurnOnBehalf(burnForAddress, from);
        _voluntaryBurnSynths(burnForAddress, amount, false);
    }
</source>
</class>

<class classid="88" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="583" endline="586" pcid="841">
    function issueMaxSynthsOnBehalf(address issueForAddress, address from) external onlySynthetix {
        _requireCanIssueOnBehalf(issueForAddress, from);
        _issueSynths(issueForAddress, 0, true);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="605" endline="608" pcid="845">
    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external onlySynthetix {
        _requireCanBurnOnBehalf(burnForAddress, from);
        _voluntaryBurnSynths(burnForAddress, 0, true);
    }
</source>
</class>

<class classid="89" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="696" endline="698" pcid="851">
    function _requireCanIssueOnBehalf(address issueForAddress, address from) internal view {
        require(delegateApprovals().canIssueFor(issueForAddress, from), "Not approved to act on behalf");
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="700" endline="702" pcid="852">
    function _requireCanBurnOnBehalf(address burnForAddress, address from) internal view {
        require(delegateApprovals().canBurnFor(burnForAddress, from), "Not approved to act on behalf");
    }
</source>
</class>

<class classid="90" nclones="5" nlines="4" similarity="100">
<source file="systems/source-code/LegacyOwned.sol" startline="11" endline="14" pcid="863">
    function nominateOwner(address _owner) external onlyOwner {
        nominatedOwner = _owner;
        emit OwnerNominated(_owner);
    }
</source>
<source file="systems/source-code/TemporarilyOwned.sol" startline="21" endline="24" pcid="1607">
    function nominateNewOwner(address _owner) external onlyTemporaryOwner {
        nominatedOwner = _owner;
        emit OwnerNominated(_owner);
    }
</source>
<source file="systems/source-code/LegacyTokenState.sol" startline="22" endline="25" pcid="865">
    function setAssociatedContract(address _associatedContract) external onlyOwner {
        associatedContract = _associatedContract;
        emit AssociatedContractUpdated(_associatedContract);
    }
</source>
<source file="systems/source-code/State.sol" startline="23" endline="26" pcid="1320">
    function setAssociatedContract(address _associatedContract) external onlyOwner {
        associatedContract = _associatedContract;
        emit AssociatedContractUpdated(_associatedContract);
    }
</source>
<source file="systems/source-code/Owned.sol" startline="14" endline="17" pcid="1164">
    function nominateNewOwner(address _owner) external onlyOwner {
        nominatedOwner = _owner;
        emit OwnerNominated(_owner);
    }
</source>
</class>

<class classid="91" nclones="2" nlines="6" similarity="80">
<source file="systems/source-code/LegacyOwned.sol" startline="16" endline="21" pcid="864">
    function acceptOwnership() external {
        require(msg.sender == nominatedOwner);
        emit OwnerChanged(owner, nominatedOwner);
        owner = nominatedOwner;
        nominatedOwner = address(0);
    }
</source>
<source file="systems/source-code/Owned.sol" startline="19" endline="24" pcid="1165">
    function acceptOwnership() external {
        require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");
        emit OwnerChanged(owner, nominatedOwner);
        owner = nominatedOwner;
        nominatedOwner = address(0);
    }
</source>
</class>

<class classid="92" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/LegacyTokenState.sol" startline="27" endline="33" pcid="866">
    function setAllowance(
        address tokenOwner,
        address spender,
        uint value
    ) external onlyAssociatedContract {
        allowance[tokenOwner][spender] = value;
    }
</source>
<source file="systems/source-code/TokenState.sol" startline="25" endline="31" pcid="1646">
    function setAllowance(
        address tokenOwner,
        address spender,
        uint value
    ) external onlyAssociatedContract {
        allowance[tokenOwner][spender] = value;
    }
</source>
</class>

<class classid="93" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/LegacyTokenState.sol" startline="35" endline="37" pcid="867">
    function setBalanceOf(address account, uint value) external onlyAssociatedContract {
        balanceOf[account] = value;
    }
</source>
<source file="systems/source-code/TokenState.sol" startline="39" endline="41" pcid="1647">
    function setBalanceOf(address account, uint value) external onlyAssociatedContract {
        balanceOf[account] = value;
    }
</source>
</class>

<class classid="94" nclones="4" nlines="12" similarity="70">
<source file="systems/source-code/Migration_Alphard.sol" startline="70" endline="83" pcid="923">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](11);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(proxyfeepool_i);
        contracts[2] = address(feepooleternalstorage_i);
        contracts[3] = address(feepoolstate_i);
        contracts[4] = address(proxysynthetix_i);
        contracts[5] = address(tokenstatesynthetix_i);
        contracts[6] = address(synthetixstate_i);
        contracts[7] = address(rewardescrow_i);
        contracts[8] = address(rewardsdistribution_i);
        contracts[9] = address(feepool_i);
        contracts[10] = address(issuer_i);
    }
</source>
<source file="systems/source-code/Migration_AlphardOptimism.sol" startline="64" endline="75" pcid="933">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(proxyfeepool_i);
        contracts[2] = address(feepooleternalstorage_i);
        contracts[3] = address(feepoolstate_i);
        contracts[4] = address(proxysynthetix_i);
        contracts[5] = address(tokenstatesynthetix_i);
        contracts[6] = address(rewardsdistribution_i);
        contracts[7] = address(feepool_i);
        contracts[8] = address(issuer_i);
    }
</source>
<source file="systems/source-code/Migration_NunkiOptimism.sol" startline="67" endline="77" pcid="993">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](8);
        contracts[0] = address(futuresmarketmanager_i);
        contracts[1] = address(addressresolver_i);
        contracts[2] = address(exchangerates_i);
        contracts[3] = address(tokenstateswti_i);
        contracts[4] = address(proxyswti_i);
        contracts[5] = address(issuer_i);
        contracts[6] = address(systemsettings_i);
        contracts[7] = address(futuresmarketsettings_i);
    }
</source>
<source file="systems/source-code/Migration_Hamal.sol" startline="50" endline="58" pcid="958">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](6);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(proxysynthetix_i);
        contracts[2] = address(tokenstatesynthetix_i);
        contracts[3] = address(rewardescrow_i);
        contracts[4] = address(supplyschedule_i);
        contracts[5] = address(rewardsdistribution_i);
    }
</source>
</class>

<class classid="95" nclones="20" nlines="6" similarity="75">
<source file="systems/source-code/Migration_Alphard.sol" startline="142" endline="147" pcid="925">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_AlphardOptimism.sol" startline="129" endline="134" pcid="936">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_MirzamOptimism.sol" startline="75" endline="80" pcid="974">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_MirzamOptimism.sol" startline="68" endline="73" pcid="973">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Mirzam.sol" startline="77" endline="82" pcid="967">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_Diphda.sol" startline="394" endline="399" pcid="944">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Mirzam.sol" startline="70" endline="75" pcid="966">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Hamal.sol" startline="100" endline="105" pcid="961">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_MizarOptimism.sol" startline="70" endline="75" pcid="987">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Diphda.sol" startline="401" endline="406" pcid="945">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_Mizar.sol" startline="70" endline="75" pcid="979">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_MizarOptimism.sol" startline="77" endline="82" pcid="988">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_NunkiOptimism.sol" startline="167" endline="172" pcid="995">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_DiphdaOptimism.sol" startline="337" endline="342" pcid="950">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_DiphdaOptimism.sol" startline="344" endline="349" pcid="951">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_NunkiOptimism.sol" startline="174" endline="179" pcid="996">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_Hamal.sol" startline="93" endline="98" pcid="960">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_AlphardOptimism.sol" startline="122" endline="127" pcid="935">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Mizar.sol" startline="77" endline="82" pcid="980">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_Alphard.sol" startline="149" endline="154" pcid="926">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
</class>

<class classid="96" nclones="2" nlines="13" similarity="100">
<source file="systems/source-code/Migration_Alphard.sol" startline="156" endline="171" pcid="927">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](4);
        addressresolver_importAddresses_names_0_0[0] = bytes32("SynthetixDebtShare");
        addressresolver_importAddresses_names_0_0[1] = bytes32("FeePool");
        addressresolver_importAddresses_names_0_0[2] = bytes32("Synthetix");
        addressresolver_importAddresses_names_0_0[3] = bytes32("Issuer");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](4);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_SynthetixDebtShare_contract);
        addressresolver_importAddresses_destinations_0_1[1] = address(new_FeePool_contract);
        addressresolver_importAddresses_destinations_0_1[2] = address(new_Synthetix_contract);
        addressresolver_importAddresses_destinations_0_1[3] = address(new_Issuer_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_AlphardOptimism.sol" startline="136" endline="151" pcid="937">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](4);
        addressresolver_importAddresses_names_0_0[0] = bytes32("SynthetixDebtShare");
        addressresolver_importAddresses_names_0_0[1] = bytes32("FeePool");
        addressresolver_importAddresses_names_0_0[2] = bytes32("Synthetix");
        addressresolver_importAddresses_names_0_0[3] = bytes32("Issuer");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](4);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_SynthetixDebtShare_contract);
        addressresolver_importAddresses_destinations_0_1[1] = address(new_FeePool_contract);
        addressresolver_importAddresses_destinations_0_1[2] = address(new_Synthetix_contract);
        addressresolver_importAddresses_destinations_0_1[3] = address(new_Issuer_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
</class>

<class classid="97" nclones="2" nlines="51" similarity="71">
<source file="systems/source-code/Migration_Diphda.sol" startline="186" endline="243" pcid="942">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](55);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(proxyfeepool_i);
        contracts[2] = address(feepooleternalstorage_i);
        contracts[3] = address(exchangestate_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(rewardescrow_i);
        contracts[6] = address(feepool_i);
        contracts[7] = address(debtcache_i);
        contracts[8] = address(exchangerates_i);
        contracts[9] = address(synthsusd_i);
        contracts[10] = address(tokenstatesusd_i);
        contracts[11] = address(proxysusd_i);
        contracts[12] = address(synthseur_i);
        contracts[13] = address(tokenstateseur_i);
        contracts[14] = address(proxyseur_i);
        contracts[15] = address(synthsjpy_i);
        contracts[16] = address(tokenstatesjpy_i);
        contracts[17] = address(proxysjpy_i);
        contracts[18] = address(synthsaud_i);
        contracts[19] = address(tokenstatesaud_i);
        contracts[20] = address(proxysaud_i);
        contracts[21] = address(synthsgbp_i);
        contracts[22] = address(tokenstatesgbp_i);
        contracts[23] = address(proxysgbp_i);
        contracts[24] = address(synthschf_i);
        contracts[25] = address(tokenstateschf_i);
        contracts[26] = address(proxyschf_i);
        contracts[27] = address(synthskrw_i);
        contracts[28] = address(tokenstateskrw_i);
        contracts[29] = address(proxyskrw_i);
        contracts[30] = address(synthsbtc_i);
        contracts[31] = address(tokenstatesbtc_i);
        contracts[32] = address(proxysbtc_i);
        contracts[33] = address(synthseth_i);
        contracts[34] = address(tokenstateseth_i);
        contracts[35] = address(proxyseth_i);
        contracts[36] = address(synthslink_i);
        contracts[37] = address(tokenstateslink_i);
        contracts[38] = address(proxyslink_i);
        contracts[39] = address(synthsada_i);
        contracts[40] = address(tokenstatesada_i);
        contracts[41] = address(proxysada_i);
        contracts[42] = address(synthsaave_i);
        contracts[43] = address(tokenstatesaave_i);
        contracts[44] = address(proxysaave_i);
        contracts[45] = address(synthsdot_i);
        contracts[46] = address(tokenstatesdot_i);
        contracts[47] = address(proxysdot_i);
        contracts[48] = address(synthsethbtc_i);
        contracts[49] = address(tokenstatesethbtc_i);
        contracts[50] = address(proxysethbtc_i);
        contracts[51] = address(synthsdefi_i);
        contracts[52] = address(tokenstatesdefi_i);
        contracts[53] = address(proxysdefi_i);
        contracts[54] = address(issuer_i);
    }
</source>
<source file="systems/source-code/Migration_DiphdaOptimism.sol" startline="165" endline="207" pcid="948">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](40);
        contracts[0] = address(futuresmarketmanager_i);
        contracts[1] = address(addressresolver_i);
        contracts[2] = address(proxyfeepool_i);
        contracts[3] = address(feepooleternalstorage_i);
        contracts[4] = address(exchangestate_i);
        contracts[5] = address(systemstatus_i);
        contracts[6] = address(feepool_i);
        contracts[7] = address(debtcache_i);
        contracts[8] = address(exchangerates_i);
        contracts[9] = address(synthsusd_i);
        contracts[10] = address(tokenstatesusd_i);
        contracts[11] = address(proxysusd_i);
        contracts[12] = address(synthseth_i);
        contracts[13] = address(tokenstateseth_i);
        contracts[14] = address(proxyseth_i);
        contracts[15] = address(synthsbtc_i);
        contracts[16] = address(tokenstatesbtc_i);
        contracts[17] = address(proxysbtc_i);
        contracts[18] = address(synthslink_i);
        contracts[19] = address(tokenstateslink_i);
        contracts[20] = address(proxyslink_i);
        contracts[21] = address(synthssol_i);
        contracts[22] = address(tokenstatessol_i);
        contracts[23] = address(proxyssol_i);
        contracts[24] = address(synthsavax_i);
        contracts[25] = address(tokenstatesavax_i);
        contracts[26] = address(proxysavax_i);
        contracts[27] = address(synthsmatic_i);
        contracts[28] = address(tokenstatesmatic_i);
        contracts[29] = address(proxysmatic_i);
        contracts[30] = address(synthseur_i);
        contracts[31] = address(tokenstateseur_i);
        contracts[32] = address(proxyseur_i);
        contracts[33] = address(tokenstatesaave_i);
        contracts[34] = address(proxysaave_i);
        contracts[35] = address(tokenstatesuni_i);
        contracts[36] = address(proxysuni_i);
        contracts[37] = address(issuer_i);
        contracts[38] = address(systemsettings_i);
        contracts[39] = address(futuresmarketsettings_i);
    }
</source>
</class>

<class classid="98" nclones="4" nlines="6" similarity="100">
<source file="systems/source-code/Migration_Mirzam.sol" startline="38" endline="43" pcid="964">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](3);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(exchangestate_i);
        contracts[2] = address(systemstatus_i);
    }
</source>
<source file="systems/source-code/Migration_Mizar.sol" startline="38" endline="43" pcid="977">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](3);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(systemstatus_i);
        contracts[2] = address(issuer_i);
    }
</source>
<source file="systems/source-code/Migration_MizarOptimism.sol" startline="38" endline="43" pcid="985">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](3);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(systemstatus_i);
        contracts[2] = address(issuer_i);
    }
</source>
<source file="systems/source-code/Migration_MirzamOptimism.sol" startline="38" endline="43" pcid="971">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](3);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(exchangestate_i);
        contracts[2] = address(systemstatus_i);
    }
</source>
</class>

<class classid="99" nclones="4" nlines="7" similarity="83">
<source file="systems/source-code/Migration_Mirzam.sol" startline="84" endline="93" pcid="968">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("Exchanger");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_Exchanger_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_MirzamOptimism.sol" startline="82" endline="91" pcid="975">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("Exchanger");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_Exchanger_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_Mizar.sol" startline="84" endline="93" pcid="981">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("Issuer");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_Issuer_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_MizarOptimism.sol" startline="84" endline="93" pcid="989">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("Issuer");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_Issuer_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
</class>

<class classid="100" nclones="2" nlines="10" similarity="100">
<source file="systems/source-code/Migration_Mizar.sol" startline="45" endline="68" pcid="978">
    function migrate() external onlyOwner {
        require(
            ISynthetixNamedContract(new_Issuer_contract).CONTRACT_NAME() == "Issuer",
            "Invalid contract supplied for Issuer"
        );

        // ACCEPT OWNERSHIP for all contracts that require ownership to make changes
        acceptAll();

        // MIGRATION
        // Import all new contracts into the address resolver;
        addressresolver_importAddresses_0();
        // Rebuild the resolver caches in all MixinResolver contracts - batch 1;
        addressresolver_rebuildCaches_1();
        // Rebuild the resolver caches in all MixinResolver contracts - batch 2;
        addressresolver_rebuildCaches_2();
        // Ensure Issuer contract can suspend issuance - see SIP-165;
        systemstatus_i.updateAccessControl("Issuance", new_Issuer_contract, true, false);
        // Add synths to the Issuer contract - batch 1;
        issuer_addSynths_5();

        // NOMINATE OWNERSHIP back to owner for aforementioned contracts
        nominateAll();
    }
</source>
<source file="systems/source-code/Migration_MizarOptimism.sol" startline="45" endline="68" pcid="986">
    function migrate() external onlyOwner {
        require(
            ISynthetixNamedContract(new_Issuer_contract).CONTRACT_NAME() == "Issuer",
            "Invalid contract supplied for Issuer"
        );

        // ACCEPT OWNERSHIP for all contracts that require ownership to make changes
        acceptAll();

        // MIGRATION
        // Import all new contracts into the address resolver;
        addressresolver_importAddresses_0();
        // Rebuild the resolver caches in all MixinResolver contracts - batch 1;
        addressresolver_rebuildCaches_1();
        // Rebuild the resolver caches in all MixinResolver contracts - batch 2;
        addressresolver_rebuildCaches_2();
        // Ensure Issuer contract can suspend issuance - see SIP-165;
        systemstatus_i.updateAccessControl("Issuance", new_Issuer_contract, true, false);
        // Add synths to the Issuer contract - batch 1;
        issuer_addSynths_5();

        // NOMINATE OWNERSHIP back to owner for aforementioned contracts
        nominateAll();
    }
</source>
</class>

<class classid="101" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_MizarOptimism.sol" startline="120" endline="124" pcid="991">
    function addressresolver_rebuildCaches_2() internal {
        MixinResolver[] memory addressresolver_rebuildCaches_destinations_2_0 = new MixinResolver[](1);
        addressresolver_rebuildCaches_destinations_2_0[0] = MixinResolver(new_Issuer_contract);
        addressresolver_i.rebuildCaches(addressresolver_rebuildCaches_destinations_2_0);
    }
</source>
<source file="systems/source-code/Migration_NunkiOptimism.sol" startline="223" endline="227" pcid="1000">
    function issuer_addSynths_19() internal {
        ISynth[] memory issuer_addSynths_synthsToAdd_19_0 = new ISynth[](1);
        issuer_addSynths_synthsToAdd_19_0[0] = ISynth(new_SynthsWTI_contract);
        issuer_i.addSynths(issuer_addSynths_synthsToAdd_19_0);
    }
</source>
</class>

<class classid="102" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/MintableSynthetix.sol" startline="50" endline="52" pcid="1008">
    function mintSecondary(address account, uint amount) external onlyBridge {
        _mintSecondary(account, amount);
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="217" endline="219" pcid="1231">
    function appendVestingEntry(address account, uint quantity) external onlyFeePool {
        _appendVestingEntry(account, quantity);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="159" endline="161" pcid="1334">
    function issue(address account, uint amount) external onlyInternalContracts {
        _internalIssue(account, amount);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="163" endline="165" pcid="1335">
    function burn(address account, uint amount) external onlyInternalContracts {
        _internalBurn(account, amount);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToBase.sol" startline="56" endline="58" pcid="1367">
    function withdrawTo(address to, uint amount) external requireInitiationActive {
        _initiateWithdraw(to, amount);
    }
</source>
</class>

<class classid="103" nclones="4" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="46" endline="49" pcid="1011">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_FLEXIBLESTORAGE;
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="81" endline="84" pcid="1392">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_ISSUER;
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="54" endline="57" pcid="1275">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_SHORT;
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="68" endline="71" pcid="1056">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_FLEXIBLESTORAGE;
    }
</source>
</class>

<class classid="104" nclones="9" nlines="3" similarity="100">
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="61" endline="63" pcid="1014">
    function _takerFee(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_TAKER_FEE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="65" endline="67" pcid="1015">
    function _makerFee(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAKER_FEE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="69" endline="71" pcid="1016">
    function _takerFeeNextPrice(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_TAKER_FEE_NEXT_PRICE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="73" endline="75" pcid="1017">
    function _makerFeeNextPrice(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAKER_FEE_NEXT_PRICE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="77" endline="79" pcid="1018">
    function _nextPriceConfirmWindow(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_NEXT_PRICE_CONFIRM_WINDOW);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="81" endline="83" pcid="1019">
    function _maxLeverage(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_LEVERAGE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="85" endline="87" pcid="1020">
    function _maxMarketValueUSD(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_MARKET_VALUE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="93" endline="95" pcid="1022">
    function _maxFundingRate(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_FUNDING_RATE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="89" endline="91" pcid="1021">
    function _skewScaleUSD(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MIN_SKEW_SCALE);
    }
</source>
</class>

<class classid="105" nclones="22" nlines="3" similarity="100">
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="97" endline="99" pcid="1023">
    function _minKeeperFee() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_KEEPER_FEE);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="111" endline="114" pcid="1063">
    function getIssuanceRatio() internal view returns (uint) {
        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="107" endline="109" pcid="1062">
    function getPriceDeviationThresholdFactor() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="103" endline="105" pcid="1061">
    function getWaitingPeriodSecs() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="99" endline="101" pcid="1060">
    function getTradingRewardsEnabled() internal view returns (bool) {
        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="109" endline="111" pcid="1026">
    function _minInitialMargin() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_INITIAL_MARGIN);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="105" endline="107" pcid="1025">
    function _liquidationBufferRatio() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_BUFFER_RATIO);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="134" endline="136" pcid="1068">
    function getLiquidationPenalty() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="138" endline="140" pcid="1069">
    function getRateStalePeriod() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="101" endline="103" pcid="1024">
    function _liquidationFeeRatio() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_FEE_RATIO);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="116" endline="119" pcid="1064">
    function getFeePeriodDuration() internal view returns (uint) {
        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="165" endline="167" pcid="1072">
    function getMinimumStakeTime() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="169" endline="171" pcid="1073">
    function getAggregatorWarningFlags() internal view returns (address) {
        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="121" endline="124" pcid="1065">
    function getTargetThreshold() internal view returns (uint) {
        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="173" endline="175" pcid="1074">
    function getDebtSnapshotStaleTime() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="177" endline="179" pcid="1075">
    function getEtherWrapperMaxETH() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MAX_ETH);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="181" endline="183" pcid="1076">
    function getEtherWrapperMintFeeRate() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MINT_FEE_RATE);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="130" endline="132" pcid="1067">
    function getLiquidationRatio() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="126" endline="128" pcid="1066">
    function getLiquidationDelay() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="185" endline="187" pcid="1077">
    function getEtherWrapperBurnFeeRate() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_BURN_FEE_RATE);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="229" endline="231" pcid="1083">
    function getAtomicMaxVolumePerBlock() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="233" endline="235" pcid="1084">
    function getAtomicTwapWindow() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_TWAP_WINDOW);
    }
</source>
</class>

<class classid="106" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="33" endline="36" pcid="1037">
    function currentFundingRate() external view returns (int) {
        (uint price, ) = assetPrice();
        return _currentFundingRate(price);
    }
</source>
<source file="systems/source-code/TestableFuturesMarket.sol" startline="16" endline="19" pcid="1628">
    function proportionalSkew() external view returns (int) {
        (uint price, ) = assetPrice();
        return _proportionalSkew(price);
    }
</source>
</class>

<class classid="107" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="65" endline="68" pcid="1041">
    function profitLoss(address account) external view returns (int pnl, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_profitLoss(positions[account], price), isInvalid);
    }
</source>
<source file="systems/source-code/MixinFuturesViews.sol" startline="73" endline="76" pcid="1042">
    function accruedFunding(address account) external view returns (int funding, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_accruedFunding(positions[account], price), isInvalid);
    }
</source>
</class>

<class classid="108" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="81" endline="84" pcid="1043">
    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_remainingMargin(positions[account], price), isInvalid);
    }
</source>
<source file="systems/source-code/MixinFuturesViews.sol" startline="90" endline="93" pcid="1044">
    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_accessibleMargin(positions[account], price), isInvalid);
    }
</source>
</class>

<class classid="109" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/MixinSystemSettings.sol" startline="143" endline="149" pcid="1070">
    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="261" endline="267" pcid="1088">
    function getAtomicVolatilityConsiderationWindow(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="269" endline="275" pcid="1089">
    function getAtomicVolatilityUpdateThreshold(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="253" endline="259" pcid="1087">
    function getAtomicPriceBuffer(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_PRICE_BUFFER, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="245" endline="251" pcid="1086">
    function getAtomicExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_EXCHANGE_FEE_RATE, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="237" endline="243" pcid="1085">
    function getAtomicEquivalentForDexPricing(bytes32 currencyKey) internal view returns (address) {
        return
            flexibleStorage().getAddressValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING, currencyKey))
            );
    }
</source>
</class>

<class classid="110" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="81" endline="83" pcid="1092">
    function setAllRoundDataShouldRevert(bool _shouldRevert) external {
        allRoundDataShouldRevert = _shouldRevert;
    }
</source>
<source file="systems/source-code/MockDexPriceAggregator.sol" startline="35" endline="37" pcid="1105">
    function setAssetToAssetShouldRevert(bool _shouldRevert) external {
        assetToAssetShouldRevert = _shouldRevert;
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="46" endline="48" pcid="1123">
    function setInvalid(bool _invalid) external {
        invalid = _invalid;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="85" endline="87" pcid="1093">
    function setLatestRoundDataShouldRevert(bool _shouldRevert) external {
        latestRoundDataShouldRevert = _shouldRevert;
    }
</source>
</class>

<class classid="111" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="118" endline="121" pcid="1098">
    function getAnswer(uint256 _roundId) external view returns (int256) {
        Entry memory entry = entries[_roundId];
        return entry.answer;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="123" endline="126" pcid="1099">
    function getTimestamp(uint256 _roundId) external view returns (uint256) {
        Entry memory entry = entries[_roundId];
        return entry.updatedAt;
    }
</source>
</class>

<class classid="112" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/MockDexPriceAggregator.sol" startline="31" endline="33" pcid="1104">
    function setAssetToAssetRate(uint _rate) external {
        rate = _rate;
    }
</source>
<source file="systems/source-code/MockEtherWrapper.sol" startline="13" endline="15" pcid="1106">
    function setTotalIssuedSynths(uint value) external {
        totalIssuedSynths = value;
    }
</source>
<source file="systems/source-code/MockExchanger.sol" startline="91" endline="93" pcid="1114">
    function setMaxSecsLeft(uint _maxSecsLeft) external {
        _mockMaxSecsLeft = _maxSecsLeft;
    }
</source>
<source file="systems/source-code/MockWrapperFactory.sol" startline="13" endline="15" pcid="1146">
    function setTotalIssuedSynths(uint value) external {
        totalIssuedSynths = value;
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="42" endline="44" pcid="1122">
    function setMarketDebt(uint _debt) external {
        debt = _debt;
    }
</source>
</class>

<class classid="113" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockExchanger.sol" startline="79" endline="81" pcid="1111">
    function setReclaim(uint256 _reclaimAmount) external {
        _mockReclaimAmount = _reclaimAmount;
    }
</source>
<source file="systems/source-code/MockExchanger.sol" startline="83" endline="85" pcid="1112">
    function setRefund(uint256 _refundAmount) external {
        _mockRefundAmount = _refundAmount;
    }
</source>
<source file="systems/source-code/MockSynth.sol" startline="34" endline="36" pcid="1136">
    function setTotalSupply(uint256 _totalSupply) external {
        totalSupply = _totalSupply;
    }
</source>
<source file="systems/source-code/MockExchanger.sol" startline="87" endline="89" pcid="1113">
    function setNumEntries(uint256 _numEntries) external {
        _mockNumEntries = _numEntries;
    }
</source>
</class>

<class classid="114" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MockFuturesMarket.sol" startline="30" endline="32" pcid="1119">
    function setManager(IFuturesMarketManagerInternal _manager) external {
        manager = _manager;
    }
</source>
<source file="systems/source-code/MockSynth.sol" startline="29" endline="31" pcid="1135">
    function setAddressResolver(IAddressResolver _resolver) external {
        addressResolver = _resolver;
    }
</source>
</class>

<class classid="115" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MockFuturesMarket.sol" startline="34" endline="36" pcid="1120">
    function setBaseAsset(bytes32 _baseAsset) external {
        baseAsset = _baseAsset;
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="38" endline="40" pcid="1121">
    function setMarketKey(bytes32 _marketKey) external {
        marketKey = _marketKey;
    }
</source>
</class>

<class classid="116" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MockFuturesMarket.sol" startline="54" endline="56" pcid="1125">
    function issueSUSD(address account, uint amount) external {
        manager.issueSUSD(account, amount);
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="58" endline="60" pcid="1126">
    function burnSUSD(address account, uint amount) external {
        manager.burnSUSD(account, amount);
    }
</source>
</class>

<class classid="117" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MockMintableSynthetix.sol" startline="10" endline="13" pcid="1128">
    function mintSecondary(address account, uint amount) external {
        mintSecondaryCallAccount = account;
        mintSecondaryCallAmount = amount;
    }
</source>
<source file="systems/source-code/MockMintableSynthetix.sol" startline="15" endline="18" pcid="1129">
    function burnSecondary(address account, uint amount) external {
        burnSecondaryCallAccount = account;
        burnSecondaryCallAmount = amount;
    }
</source>
</class>

<class classid="118" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/MockSynth.sol" startline="91" endline="95" pcid="1140">
    function issue(address account, uint amount) external {
        tokenState.setBalanceOf(account, tokenState.balanceOf(account).add(amount));
        totalSupply = totalSupply.add(amount);
        emit Issued(account, amount);
    }
</source>
<source file="systems/source-code/MockSynth.sol" startline="97" endline="101" pcid="1141">
    function burn(address account, uint amount) external {
        tokenState.setBalanceOf(account, tokenState.balanceOf(account).sub(amount));
        totalSupply = totalSupply.sub(amount);
        emit Burned(account, amount);
    }
</source>
</class>

<class classid="119" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MultiCollateralSynth.sol" startline="64" endline="66" pcid="1151">
    function issue(address account, uint amount) external onlyInternalContracts {
        super._internalIssue(account, amount);
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="73" endline="75" pcid="1152">
    function burn(address account, uint amount) external onlyInternalContracts {
        super._internalBurn(account, amount);
    }
</source>
</class>

<class classid="120" nclones="3" nlines="5" similarity="100">
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="57" endline="61" pcid="1177">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](2);
        addresses[0] = CONTRACT_EXT_MESSENGER;
        addresses[1] = CONTRACT_BASE_OWNER_RELAY_ON_ETHEREUM;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="60" endline="64" pcid="1648">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](2);
        addresses[0] = CONTRACT_EXCHANGER;
        addresses[1] = CONTRACT_SYNTHETIX;
    }
</source>
<source file="systems/source-code/SynthRedeemer.sol" startline="26" endline="30" pcid="1435">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](2);
        addresses[0] = CONTRACT_ISSUER;
        addresses[1] = CONTRACT_SYNTHSUSD;
    }
</source>
</class>

<class classid="121" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="65" endline="69" pcid="1178">
    function directRelay(address target, bytes calldata payload) external onlyTemporaryOwner {
        _relayCall(target, payload);

        emit DirectRelay(target, payload);
    }
</source>
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="71" endline="75" pcid="1179">
    function finalizeRelay(address target, bytes calldata payload) external onlyMessengerAndL1Relayer {
        _relayCall(target, payload);

        emit RelayFinalized(target, payload);
    }
</source>
</class>

<class classid="122" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/Proxyable.sol" startline="34" endline="36" pcid="1183">
    function setMessageSender(address sender) external onlyProxy {
        messageSender = sender;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="68" endline="70" pcid="1244">
    function setRewardEscrow(address _rewardEscrow) external onlyOwner {
        rewardEscrow = _rewardEscrow;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="72" endline="74" pcid="1245">
    function setFeePoolProxy(address _feePoolProxy) external onlyOwner {
        feePoolProxy = _feePoolProxy;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="64" endline="66" pcid="1243">
    function setSynthetixProxy(address _synthetixProxy) external onlyOwner {
        synthetixProxy = _synthetixProxy;
    }
</source>
<source file="systems/source-code/TokenExchanger.sol" startline="23" endline="25" pcid="1640">
    function setSynthetix(address _synthetix) external onlyOwner {
        synthetix = _synthetix;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="80" endline="82" pcid="1246">
    function setAuthority(address _authority) external onlyOwner {
        authority = _authority;
    }
</source>
<source file="systems/source-code/RewardsDistributionRecipient.sol" startline="17" endline="19" pcid="1252">
    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {
        rewardsDistribution = _rewardsDistribution;
    }
</source>
<source file="systems/source-code/TokenExchanger.sol" startline="19" endline="21" pcid="1639">
    function setSynthetixProxy(address _integrationProxy) external onlyOwner {
        integrationProxy = _integrationProxy;
    }
</source>
</class>

<class classid="123" nclones="2" nlines="6" similarity="75">
<source file="systems/source-code/Proxyable.sol" startline="52" endline="56" pcid="1185">
    function _optionalProxy() private {
        if (Proxy(msg.sender) != proxy && messageSender != msg.sender) {
            messageSender = msg.sender;
        }
    }
</source>
<source file="systems/source-code/Proxyable.sol" startline="64" endline="69" pcid="1186">
    function _optionalProxy_onlyOwner() private {
        if (Proxy(msg.sender) != proxy && messageSender != msg.sender) {
            messageSender = msg.sender;
        }
        require(messageSender == owner, "Owner only function");
    }
</source>
</class>

<class classid="124" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ProxyERC20.sol" startline="13" endline="16" pcid="1187">
    function name() public view returns (string memory) {
        // Immutable static call from target contract
        return IERC20(address(target)).name();
    }
</source>
<source file="systems/source-code/ProxyERC20.sol" startline="18" endline="21" pcid="1188">
    function symbol() public view returns (string memory) {
        // Immutable static call from target contract
        return IERC20(address(target)).symbol();
    }
</source>
</class>

<class classid="125" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ProxyERC20.sol" startline="23" endline="26" pcid="1189">
    function decimals() public view returns (uint8) {
        // Immutable static call from target contract
        return IERC20(address(target)).decimals();
    }
</source>
<source file="systems/source-code/ProxyERC20.sol" startline="33" endline="36" pcid="1190">
    function totalSupply() public view returns (uint256) {
        // Immutable static call from target contract
        return IERC20(address(target)).totalSupply();
    }
</source>
</class>

<class classid="126" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/ProxyERC20.sol" startline="64" endline="73" pcid="1193">
    function transfer(address to, uint256 value) public returns (bool) {
        // Mutable state call requires the proxy to tell the target who the msg.sender is.
        target.setMessageSender(msg.sender);

        // Forward the ERC20 call to the target contract
        IERC20(address(target)).transfer(to, value);

        // Event emitting will occur via Synthetix.Proxy._emit()
        return true;
    }
</source>
<source file="systems/source-code/ProxyERC20.sol" startline="84" endline="93" pcid="1194">
    function approve(address spender, uint256 value) public returns (bool) {
        // Mutable state call requires the proxy to tell the target who the msg.sender is.
        target.setMessageSender(msg.sender);

        // Forward the ERC20 call to the target contract
        IERC20(address(target)).approve(spender, value);

        // Event emitting will occur via Synthetix.Proxy._emit()
        return true;
    }
</source>
</class>

<class classid="127" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicEST.sol" startline="17" endline="19" pcid="1196">
    function transfer(address to, uint value) external optionalProxy returns (bool) {
        return _transferByProxy(messageSender, to, value);
    }
</source>
<source file="systems/source-code/PublicEST8Decimals.sol" startline="17" endline="19" pcid="1199">
    function transfer(address to, uint value) external optionalProxy returns (bool) {
        return _transferByProxy(messageSender, to, value);
    }
</source>
</class>

<class classid="128" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicEST.sol" startline="21" endline="27" pcid="1197">
    function transferFrom(
        address from,
        address to,
        uint value
    ) external optionalProxy returns (bool) {
        return _transferFromByProxy(messageSender, from, to, value);
    }
</source>
<source file="systems/source-code/PublicEST8Decimals.sol" startline="21" endline="27" pcid="1200">
    function transferFrom(
        address from,
        address to,
        uint value
    ) external optionalProxy returns (bool) {
        return _transferFromByProxy(messageSender, from, to, value);
    }
</source>
</class>

<class classid="129" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicEST.sol" startline="32" endline="34" pcid="1198">
    function somethingToBeProxied(uint256 inputA, bytes32 inputB) external {
        emit Received(messageSender, inputA, inputB);
    }
</source>
<source file="systems/source-code/PublicEST8Decimals.sol" startline="32" endline="34" pcid="1201">
    function somethingToBeProxied(uint256 inputA, bytes32 inputB) external {
        emit Received(messageSender, inputA, inputB);
    }
</source>
</class>

<class classid="130" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="11" endline="13" pcid="1203">
    function unit() public pure returns (uint) {
        return SafeDecimalMath.unit();
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="15" endline="17" pcid="1204">
    function preciseUnit() public pure returns (uint) {
        return SafeDecimalMath.preciseUnit();
    }
</source>
</class>

<class classid="131" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="19" endline="21" pcid="1205">
    function multiplyDecimal(uint x, uint y) public pure returns (uint) {
        return x.multiplyDecimal(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="35" endline="37" pcid="1209">
    function divideDecimalRound(uint x, uint y) public pure returns (uint) {
        return x.divideDecimalRound(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="39" endline="41" pcid="1210">
    function divideDecimalRoundPrecise(uint x, uint y) public pure returns (uint) {
        return x.divideDecimalRoundPrecise(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="27" endline="29" pcid="1207">
    function multiplyDecimalRoundPrecise(uint x, uint y) public pure returns (uint) {
        return x.multiplyDecimalRoundPrecise(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="31" endline="33" pcid="1208">
    function divideDecimal(uint x, uint y) public pure returns (uint) {
        return x.divideDecimal(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="23" endline="25" pcid="1206">
    function multiplyDecimalRound(uint x, uint y) public pure returns (uint) {
        return x.multiplyDecimalRound(y);
    }
</source>
</class>

<class classid="132" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="43" endline="45" pcid="1211">
    function decimalToPreciseDecimal(uint i) public pure returns (uint) {
        return i.decimalToPreciseDecimal();
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="47" endline="49" pcid="1212">
    function preciseDecimalToDecimal(uint i) public pure returns (uint) {
        return i.preciseDecimalToDecimal();
    }
</source>
</class>

<class classid="133" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/PurgeableSynth.sol" startline="72" endline="74" pcid="1216">
    function emitPurged(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, PURGED_SIG, addressToBytes32(account), 0, 0);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="284" endline="286" pcid="1350">
    function emitBurned(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, BURNED_SIG, addressToBytes32(account), 0, 0);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="277" endline="279" pcid="1349">
    function emitIssued(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, ISSUED_SIG, addressToBytes32(account), 0, 0);
    }
</source>
</class>

<class classid="134" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="60" endline="63" pcid="1217">
    function setSynthetix(ISynthetix _synthetix) external onlyOwner {
        synthetix = _synthetix;
        emit SynthetixUpdated(address(_synthetix));
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="46" endline="49" pcid="1413">
    function setSynthetix(ISynthetix _synthetix) external onlyOwner {
        synthetix = _synthetix;
        emit SynthetixUpdated(address(_synthetix));
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="69" endline="72" pcid="1218">
    function setFeePool(IFeePool _feePool) external onlyOwner {
        feePool = _feePool;
        emit FeePoolUpdated(address(_feePool));
    }
</source>
</class>

<class classid="135" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="98" endline="100" pcid="1222">
    function getVestingScheduleEntry(address account, uint index) public view returns (uint[2] memory) {
        return vestingSchedules[account][index];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="71" endline="73" pcid="1416">
    function getVestingScheduleEntry(address account, uint index) public view returns (uint[2] memory) {
        return vestingSchedules[account][index];
    }
</source>
</class>

<class classid="136" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="105" endline="107" pcid="1223">
    function getVestingTime(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[TIME_INDEX];
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="112" endline="114" pcid="1224">
    function getVestingQuantity(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[QUANTITY_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="85" endline="87" pcid="1418">
    function getVestingQuantity(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[QUANTITY_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="78" endline="80" pcid="1417">
    function getVestingTime(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[TIME_INDEX];
    }
</source>
</class>

<class classid="137" nclones="2" nlines="9" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="119" endline="127" pcid="1225">
    function getNextVestingIndex(address account) public view returns (uint) {
        uint len = _numVestingEntries(account);
        for (uint i = 0; i < len; i++) {
            if (getVestingTime(account, i) != 0) {
                return i;
            }
        }
        return len;
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="92" endline="100" pcid="1419">
    function getNextVestingIndex(address account) public view returns (uint) {
        uint len = numVestingEntries(account);
        for (uint i = 0; i < len; i++) {
            if (getVestingTime(account, i) != 0) {
                return i;
            }
        }
        return len;
    }
</source>
</class>

<class classid="138" nclones="2" nlines="7" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="132" endline="138" pcid="1226">
    function getNextVestingEntry(address account) public view returns (uint[2] memory) {
        uint index = getNextVestingIndex(account);
        if (index == _numVestingEntries(account)) {
            return [uint(0), 0];
        }
        return getVestingScheduleEntry(account, index);
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="105" endline="111" pcid="1420">
    function getNextVestingEntry(address account) public view returns (uint[2] memory) {
        uint index = getNextVestingIndex(account);
        if (index == numVestingEntries(account)) {
            return [uint(0), 0];
        }
        return getVestingScheduleEntry(account, index);
    }
</source>
</class>

<class classid="139" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="143" endline="145" pcid="1227">
    function getNextVestingTime(address account) external view returns (uint) {
        return getNextVestingEntry(account)[TIME_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="116" endline="118" pcid="1421">
    function getNextVestingTime(address account) external view returns (uint) {
        return getNextVestingEntry(account)[TIME_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="123" endline="125" pcid="1422">
    function getNextVestingQuantity(address account) external view returns (uint) {
        return getNextVestingEntry(account)[QUANTITY_INDEX];
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="150" endline="152" pcid="1228">
    function getNextVestingQuantity(address account) external view returns (uint) {
        return getNextVestingEntry(account)[QUANTITY_INDEX];
    }
</source>
</class>

<class classid="140" nclones="2" nlines="22" similarity="82">
<source file="systems/source-code/RewardEscrow.sol" startline="224" endline="247" pcid="1232">
    function vest() external {
        uint numEntries = _numVestingEntries(msg.sender);
        uint total;
        for (uint i = 0; i < numEntries; i++) {
            uint time = getVestingTime(msg.sender, i);
            /* The list is sorted; when we reach the first future time, bail out. */
            if (time > now) {
                break;
            }
            uint qty = getVestingQuantity(msg.sender, i);
            if (qty > 0) {
                vestingSchedules[msg.sender][i] = [0, 0];
                total = total.add(qty);
            }
        }

        if (total != 0) {
            totalEscrowedBalance = totalEscrowedBalance.sub(total);
            totalEscrowedAccountBalance[msg.sender] = totalEscrowedAccountBalance[msg.sender].sub(total);
            totalVestedAccountBalance[msg.sender] = totalVestedAccountBalance[msg.sender].add(total);
            IERC20(address(synthetix)).transfer(msg.sender, total);
            emit Vested(msg.sender, now, total);
        }
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="206" endline="228" pcid="1426">
    function vest() external {
        uint numEntries = numVestingEntries(msg.sender);
        uint total;
        for (uint i = 0; i < numEntries; i++) {
            uint time = getVestingTime(msg.sender, i);
            /* The list is sorted; when we reach the first future time, bail out. */
            if (time > now) {
                break;
            }
            uint qty = getVestingQuantity(msg.sender, i);
            if (qty > 0) {
                vestingSchedules[msg.sender][i] = [0, 0];
                total = total.add(qty);
            }
        }

        if (total != 0) {
            totalVestedBalance = totalVestedBalance.sub(total);
            totalVestedAccountBalance[msg.sender] = totalVestedAccountBalance[msg.sender].sub(total);
            IERC20(address(synthetix)).transfer(msg.sender, total);
            emit Vested(msg.sender, now, total);
        }
    }
</source>
</class>

<class classid="141" nclones="2" nlines="7" similarity="80">
<source file="systems/source-code/SafeDecimalMath.sol" startline="61" endline="74" pcid="1263">
    function _multiplyDecimalRound(
        uint x,
        uint y,
        uint precisionUnit
    ) private pure returns (uint) {
        /* Divide by UNIT to remove the extra factor introduced by the product. */
        uint quotientTimesTen = x.mul(y) / (precisionUnit / 10);

        if (quotientTimesTen % 10 >= 5) {
            quotientTimesTen += 10;
        }

        return quotientTimesTen / 10;
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="130" endline="142" pcid="1267">
    function _divideDecimalRound(
        uint x,
        uint y,
        uint precisionUnit
    ) private pure returns (uint) {
        uint resultTimesTen = x.mul(precisionUnit * 10).div(y);

        if (resultTimesTen % 10 >= 5) {
            resultTimesTen += 10;
        }

        return resultTimesTen / 10;
    }
</source>
</class>

<class classid="142" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/SafeDecimalMath.sol" startline="88" endline="90" pcid="1264">
    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {
        return _multiplyDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="104" endline="106" pcid="1265">
    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {
        return _multiplyDecimalRound(x, y, UNIT);
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="164" endline="166" pcid="1269">
    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {
        return _divideDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="152" endline="154" pcid="1268">
    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {
        return _divideDecimalRound(x, y, UNIT);
    }
</source>
</class>

<class classid="143" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="73" endline="75" pcid="1279">
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp < periodFinish ? block.timestamp : periodFinish;
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="57" endline="59" pcid="1307">
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp < periodFinish ? block.timestamp : periodFinish;
    }
</source>
</class>

<class classid="144" nclones="2" nlines="6" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="77" endline="85" pcid="1280">
    function rewardPerToken() public view returns (uint256) {
        if (_totalSupply == 0) {
            return rewardPerTokenStored;
        }
        return
            rewardPerTokenStored.add(
                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)
            );
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="61" endline="69" pcid="1308">
    function rewardPerToken() public view returns (uint256) {
        if (_totalSupply == 0) {
            return rewardPerTokenStored;
        }
        return
            rewardPerTokenStored.add(
                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)
            );
    }
</source>
</class>

<class classid="145" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="87" endline="89" pcid="1281">
    function earned(address account) public view returns (uint256) {
        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="71" endline="73" pcid="1309">
    function earned(address account) public view returns (uint256) {
        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
    }
</source>
</class>

<class classid="146" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="91" endline="93" pcid="1282">
    function getRewardForDuration() external view returns (uint256) {
        return rewardRate.mul(rewardsDuration);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="75" endline="77" pcid="1310">
    function getRewardForDuration() external view returns (uint256) {
        return rewardRate.mul(rewardsDuration);
    }
</source>
</class>

<class classid="147" nclones="2" nlines="15" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="125" endline="144" pcid="1286">
    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
        if (block.timestamp >= periodFinish) {
            rewardRate = reward.div(rewardsDuration);
        } else {
            uint256 remaining = periodFinish.sub(block.timestamp);
            uint256 leftover = remaining.mul(rewardRate);
            rewardRate = reward.add(leftover).div(rewardsDuration);
        }

        // Ensure the provided reward amount is not more than the balance in the contract.
        // This keeps the reward rate in the right range, preventing overflows due to
        // very high values of rewardRate in the earned and rewardsPerToken functions;
        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.
        uint balance = rewardsToken.balanceOf(address(this));
        require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");

        lastUpdateTime = block.timestamp;
        periodFinish = block.timestamp.add(rewardsDuration);
        emit RewardAdded(reward);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="113" endline="132" pcid="1315">
    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
        if (block.timestamp >= periodFinish) {
            rewardRate = reward.div(rewardsDuration);
        } else {
            uint256 remaining = periodFinish.sub(block.timestamp);
            uint256 leftover = remaining.mul(rewardRate);
            rewardRate = reward.add(leftover).div(rewardsDuration);
        }

        // Ensure the provided reward amount is not more than the balance in the contract.
        // This keeps the reward rate in the right range, preventing overflows due to
        // very high values of rewardRate in the earned and rewardsPerToken functions;
        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.
        uint balance = rewardsToken.balanceOf(address(this));
        require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");

        lastUpdateTime = block.timestamp;
        periodFinish = block.timestamp.add(rewardsDuration);
        emit RewardAdded(reward);
    }
</source>
</class>

<class classid="148" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="146" endline="153" pcid="1287">
    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
        require(
            block.timestamp > periodFinish,
            "Previous rewards period must be complete before changing the duration for the new period"
        );
        rewardsDuration = _rewardsDuration;
        emit RewardsDurationUpdated(rewardsDuration);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="141" endline="148" pcid="1317">
    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
        require(
            block.timestamp > periodFinish,
            "Previous rewards period must be complete before changing the duration for the new period"
        );
        rewardsDuration = _rewardsDuration;
        emit RewardsDurationUpdated(rewardsDuration);
    }
</source>
</class>

<class classid="149" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="100" endline="102" pcid="1293">
    function multiplyDecimalRoundPrecise(int x, int y) internal pure returns (int) {
        return _multiplyDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="171" endline="173" pcid="1298">
    function divideDecimalRoundPrecise(int x, int y) internal pure returns (int) {
        return _divideDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="116" endline="118" pcid="1294">
    function multiplyDecimalRound(int x, int y) internal pure returns (int) {
        return _multiplyDecimalRound(x, y, UNIT);
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="159" endline="161" pcid="1297">
    function divideDecimalRound(int x, int y) internal pure returns (int) {
        return _divideDecimalRound(x, y, UNIT);
    }
</source>
</class>

<class classid="150" nclones="2" nlines="5" similarity="75">
<source file="systems/source-code/SupplySchedule.sol" startline="132" endline="136" pcid="1325">
    function setMinterReward(uint amount) external onlyOwner {
        require(amount <= MAX_MINTER_REWARD, "Reward cannot exceed max minter reward");
        minterReward = amount;
        emit MinterRewardUpdated(minterReward);
    }
</source>
<source file="systems/source-code/SupplySchedule.sol" startline="154" endline="158" pcid="1327">
    function setInflationAmount(uint amount) external onlyOwner {
        require(amount <= maxInflationAmount, "Amount above maximum inflation");
        inflationAmount = amount;
        emit InflationAmountUpdated(inflationAmount);
    }
</source>
</class>

<class classid="151" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SynthetixDebtShare.sol" startline="142" endline="145" pcid="1399">
    function addAuthorizedBroker(address target) external onlyOwner {
        authorizedBrokers[target] = true;
        emit ChangeAuthorizedBroker(target, true);
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="152" endline="155" pcid="1401">
    function addAuthorizedToSnapshot(address target) external onlyOwner {
        authorizedToSnapshot[target] = true;
        emit ChangeAuthorizedToSnapshot(target, true);
    }
</source>
</class>

<class classid="152" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SynthetixDebtShare.sol" startline="147" endline="150" pcid="1400">
    function removeAuthorizedBroker(address target) external onlyOwner {
        authorizedBrokers[target] = false;
        emit ChangeAuthorizedBroker(target, false);
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="157" endline="160" pcid="1402">
    function removeAuthorizedToSnapshot(address target) external onlyOwner {
        authorizedToSnapshot[target] = false;
        emit ChangeAuthorizedToSnapshot(target, false);
    }
</source>
</class>

<class classid="153" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SynthetixDebtShare.sol" startline="189" endline="191" pcid="1406">
    function approve(address, uint256) external pure returns (bool) {
        revert("debt shares are not transferrable");
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="193" endline="195" pcid="1407">
    function transfer(address, uint256) external pure returns (bool) {
        revert("debt shares are not transferrable");
    }
</source>
</class>

<class classid="154" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SynthetixState.sol" startline="67" endline="69" pcid="1429">
    function incrementTotalIssuerCount() external onlyAssociatedContract {
        totalIssuerCount = totalIssuerCount.add(1);
    }
</source>
<source file="systems/source-code/SynthetixState.sol" startline="75" endline="77" pcid="1430">
    function decrementTotalIssuerCount() external onlyAssociatedContract {
        totalIssuerCount = totalIssuerCount.sub(1);
    }
</source>
</class>

<class classid="155" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="94" endline="96" pcid="1463">
    function exchangeDynamicFeeThreshold() external view returns (uint) {
        return getExchangeDynamicFeeConfig().threshold;
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="112" endline="114" pcid="1466">
    function exchangeMaxDynamicFee() external view returns (uint) {
        return getExchangeDynamicFeeConfig().maxFee;
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="100" endline="102" pcid="1464">
    function exchangeDynamicFeeWeightDecay() external view returns (uint) {
        return getExchangeDynamicFeeConfig().weightDecay;
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="106" endline="108" pcid="1465">
    function exchangeDynamicFeeRounds() external view returns (uint) {
        return getExchangeDynamicFeeConfig().rounds;
    }
</source>
</class>

<class classid="156" nclones="15" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="236" endline="239" pcid="1488">
    function setIssuanceRatio(uint ratio) external onlyOwner {
        flexibleStorage().setIssuanceRatio(SETTING_ISSUANCE_RATIO, ratio);
        emit IssuanceRatioUpdated(ratio);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="366" endline="369" pcid="1507">
    function setEtherWrapperMintFeeRate(uint _rate) external onlyOwner {
        flexibleStorage().setEtherWrapperMintFeeRate(SETTING_ETHER_WRAPPER_MINT_FEE_RATE, _rate);
        emit EtherWrapperMintFeeRateUpdated(_rate);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="361" endline="364" pcid="1506">
    function setEtherWrapperMaxETH(uint _maxETH) external onlyOwner {
        flexibleStorage().setEtherWrapperMaxETH(SETTING_ETHER_WRAPPER_MAX_ETH, _maxETH);
        emit EtherWrapperMaxETHUpdated(_maxETH);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="269" endline="272" pcid="1494">
    function setLiquidationDelay(uint time) external onlyOwner {
        flexibleStorage().setLiquidationDelay(SETTING_LIQUIDATION_DELAY, time);
        emit LiquidationDelayUpdated(time);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="259" endline="262" pcid="1492">
    function setFeePeriodDuration(uint _feePeriodDuration) external onlyOwner {
        flexibleStorage().setFeePeriodDuration(SETTING_FEE_PERIOD_DURATION, _feePeriodDuration);
        emit FeePeriodDurationUpdated(_feePeriodDuration);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="351" endline="354" pcid="1504">
    function setDebtSnapshotStaleTime(uint _seconds) external onlyOwner {
        flexibleStorage().setDebtSnapshotStaleTime(SETTING_DEBT_SNAPSHOT_STALE_TIME, _seconds);
        emit DebtSnapshotStaleTimeUpdated(_seconds);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="251" endline="257" pcid="1491">
    function setPriceDeviationThresholdFactor(uint _priceDeviationThresholdFactor) external onlyOwner {
        flexibleStorage().setPriceDeviationThresholdFactor(
            SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR,
            _priceDeviationThresholdFactor
        );
        emit PriceDeviationThresholdUpdated(_priceDeviationThresholdFactor);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="291" endline="294" pcid="1497">
    function setRateStalePeriod(uint period) external onlyOwner {
        flexibleStorage().setRateStalePeriod(SETTING_RATE_STALE_PERIOD, period);
        emit RateStalePeriodUpdated(period);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="371" endline="374" pcid="1508">
    function setEtherWrapperBurnFeeRate(uint _rate) external onlyOwner {
        flexibleStorage().setEtherWrapperBurnFeeRate(SETTING_ETHER_WRAPPER_BURN_FEE_RATE, _rate);
        emit EtherWrapperBurnFeeRateUpdated(_rate);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="346" endline="349" pcid="1503">
    function setMinimumStakeTime(uint _seconds) external onlyOwner {
        flexibleStorage().setMinimumStakeTime(SETTING_MINIMUM_STAKE_TIME, _seconds);
        emit MinimumStakeTimeUpdated(_seconds);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="246" endline="249" pcid="1490">
    function setWaitingPeriodSecs(uint _waitingPeriodSecs) external onlyOwner {
        flexibleStorage().setWaitingPeriodSecs(SETTING_WAITING_PERIOD_SECS, _waitingPeriodSecs);
        emit WaitingPeriodSecsUpdated(_waitingPeriodSecs);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="416" endline="419" pcid="1515">
    function setAtomicTwapWindow(uint _window) external onlyOwner {
        flexibleStorage().setAtomicTwapWindow(SETTING_ATOMIC_TWAP_WINDOW, _window);
        emit AtomicTwapWindowUpdated(_window);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="411" endline="414" pcid="1514">
    function setAtomicMaxVolumePerBlock(uint _maxVolume) external onlyOwner {
        flexibleStorage().setAtomicMaxVolumePerBlock(SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK, _maxVolume);
        emit AtomicMaxVolumePerBlockUpdated(_maxVolume);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="341" endline="344" pcid="1502">
    function setExchangeMaxDynamicFee(uint maxFee) external onlyOwner {
        flexibleStorage().setExchangeMaxDynamicFee(SETTING_EXCHANGE_MAX_DYNAMIC_FEE, maxFee);
        emit ExchangeMaxDynamicFeeUpdated(maxFee);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="286" endline="289" pcid="1496">
    function setLiquidationPenalty(uint penalty) external onlyOwner {
        flexibleStorage().setLiquidationPenalty(SETTING_LIQUIDATION_PENALTY, penalty);
        emit LiquidationPenaltyUpdated(penalty);
    }
</source>
</class>

<class classid="157" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="381" endline="389" pcid="1510">
    function setWrapperMintFeeRate(address _wrapper, int _rate) external onlyOwner {
        flexibleStorage().setWrapperMintFeeRate(
            SETTING_WRAPPER_MINT_FEE_RATE,
            _wrapper,
            _rate,
            getWrapperBurnFeeRate(_wrapper)
        );
        emit WrapperMintFeeRateUpdated(_wrapper, _rate);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="391" endline="399" pcid="1511">
    function setWrapperBurnFeeRate(address _wrapper, int _rate) external onlyOwner {
        flexibleStorage().setWrapperBurnFeeRate(
            SETTING_WRAPPER_BURN_FEE_RATE,
            _wrapper,
            _rate,
            getWrapperMintFeeRate(_wrapper)
        );
        emit WrapperBurnFeeRateUpdated(_wrapper, _rate);
    }
</source>
</class>

<class classid="158" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="401" endline="404" pcid="1512">
    function setInteractionDelay(address _collateral, uint _interactionDelay) external onlyOwner {
        flexibleStorage().setInteractionDelay(SETTING_INTERACTION_DELAY, _collateral, _interactionDelay);
        emit InteractionDelayUpdated(_interactionDelay);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="406" endline="409" pcid="1513">
    function setCollapseFeeRate(address _collateral, uint _collapseFeeRate) external onlyOwner {
        flexibleStorage().setCollapseFeeRate(SETTING_COLLAPSE_FEE_RATE, _collateral, _collapseFeeRate);
        emit CollapseFeeRateUpdated(_collapseFeeRate);
    }
</source>
</class>

<class classid="159" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="435" endline="438" pcid="1518">
    function setAtomicPriceBuffer(bytes32 _currencyKey, uint _buffer) external onlyOwner {
        flexibleStorage().setAtomicPriceBuffer(SETTING_ATOMIC_PRICE_BUFFER, _currencyKey, _buffer);
        emit AtomicPriceBufferUpdated(_currencyKey, _buffer);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="440" endline="447" pcid="1519">
    function setAtomicVolatilityConsiderationWindow(bytes32 _currencyKey, uint _window) external onlyOwner {
        flexibleStorage().setAtomicVolatilityConsiderationWindow(
            SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW,
            _currencyKey,
            _window
        );
        emit AtomicVolatilityConsiderationWindowUpdated(_currencyKey, _window);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="449" endline="456" pcid="1520">
    function setAtomicVolatilityUpdateThreshold(bytes32 _currencyKey, uint _threshold) external onlyOwner {
        flexibleStorage().setAtomicVolatilityUpdateThreshold(
            SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD,
            _currencyKey,
            _threshold
        );
        emit AtomicVolatilityUpdateThresholdUpdated(_currencyKey, _threshold);
    }
</source>
</class>

<class classid="160" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettingsLib.sol" startline="95" endline="101" pcid="1525">
    function setWaitingPeriodSecs(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _waitingPeriodSecs
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _waitingPeriodSecs);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="174" endline="180" pcid="1532">
    function setRateStalePeriod(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint period
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, period);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="208" endline="214" pcid="1535">
    function setDebtSnapshotStaleTime(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _seconds
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _seconds);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="225" endline="231" pcid="1537">
    function setEtherWrapperMaxETH(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _maxETH
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _maxETH);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="103" endline="109" pcid="1526">
    function setPriceDeviationThresholdFactor(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _priceDeviationThresholdFactor
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _priceDeviationThresholdFactor);
    }
</source>
</class>

<class classid="161" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettingsLib.sol" startline="251" endline="262" pcid="1540">
    function setWrapperMaxTokenAmount(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        address _wrapper,
        uint _maxTokenAmount
    ) external {
        flexibleStorage.setUIntValue(
            SETTINGS_CONTRACT_NAME,
            keccak256(abi.encodePacked(settingName, _wrapper)),
            _maxTokenAmount
        );
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="316" endline="327" pcid="1544">
    function setCollapseFeeRate(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        address _collateral,
        uint _collapseFeeRate
    ) external {
        flexibleStorage.setUIntValue(
            SETTINGS_CONTRACT_NAME,
            keccak256(abi.encodePacked(settingName, _collateral)),
            _collapseFeeRate
        );
    }
</source>
</class>

<class classid="162" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettingsLib.sol" startline="376" endline="387" pcid="1549">
    function setAtomicPriceBuffer(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        bytes32 _currencyKey,
        uint _buffer
    ) external {
        flexibleStorage.setUIntValue(
            SETTINGS_CONTRACT_NAME,
            keccak256(abi.encodePacked(settingName, _currencyKey)),
            _buffer
        );
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="412" endline="423" pcid="1551">
    function setAtomicVolatilityUpdateThreshold(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        bytes32 _currencyKey,
        uint _threshold
    ) external {
        flexibleStorage.setUIntValue(
            SETTINGS_CONTRACT_NAME,
            keccak256(abi.encodePacked(settingName, _currencyKey)),
            _threshold
        );
    }
</source>
</class>

<class classid="163" nclones="3" nlines="4" similarity="75">
<source file="systems/source-code/SystemStatus.sol" startline="47" endline="53" pcid="1555">
    function requireIssuanceActive() external view {
        // Issuance requires the system be active
        _internalRequireSystemActive();

        // and issuance itself of course
        _internalRequireIssuanceActive();
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="55" endline="61" pcid="1556">
    function requireExchangeActive() external view {
        // Exchanging requires the system be active
        _internalRequireSystemActive();

        // and exchanging itself of course
        _internalRequireExchangeActive();
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="69" endline="73" pcid="1558">
    function requireFuturesActive() external view {
        _internalRequireSystemActive();
        _internalRequireExchangeActive();
        _internalRequireFuturesActive();
    }
</source>
</class>

<class classid="164" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="63" endline="67" pcid="1557">
    function requireSynthExchangeActive(bytes32 currencyKey) external view {
        // Synth exchange and transfer requires the system be active
        _internalRequireSystemActive();
        _internalRequireSynthExchangeActive(currencyKey);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="87" endline="91" pcid="1561">
    function requireSynthActive(bytes32 currencyKey) external view {
        // Synth exchange and transfer requires the system be active
        _internalRequireSystemActive();
        _internalRequireSynthActive(currencyKey);
    }
</source>
</class>

<class classid="165" nclones="3" nlines="8" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="120" endline="132" pcid="1565">
    function getSynthExchangeSuspensions(bytes32[] calldata synths)
        external
        view
        returns (bool[] memory exchangeSuspensions, uint256[] memory reasons)
    {
        exchangeSuspensions = new bool[](synths.length);
        reasons = new uint256[](synths.length);

        for (uint i = 0; i < synths.length; i++) {
            exchangeSuspensions[i] = synthExchangeSuspension[synths[i]].suspended;
            reasons[i] = synthExchangeSuspension[synths[i]].reason;
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="149" endline="161" pcid="1567">
    function getFuturesMarketSuspensions(bytes32[] calldata marketKeys)
        external
        view
        returns (bool[] memory suspensions, uint256[] memory reasons)
    {
        suspensions = new bool[](marketKeys.length);
        reasons = new uint256[](marketKeys.length);

        for (uint i = 0; i < marketKeys.length; i++) {
            suspensions[i] = futuresMarketSuspension[marketKeys[i]].suspended;
            reasons[i] = futuresMarketSuspension[marketKeys[i]].reason;
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="134" endline="146" pcid="1566">
    function getSynthSuspensions(bytes32[] calldata synths)
        external
        view
        returns (bool[] memory suspensions, uint256[] memory reasons)
    {
        suspensions = new bool[](synths.length);
        reasons = new uint256[](synths.length);

        for (uint i = 0; i < synths.length; i++) {
            suspensions[i] = synthSuspension[synths[i]].suspended;
            reasons[i] = synthSuspension[synths[i]].reason;
        }
    }
</source>
</class>

<class classid="166" nclones="4" nlines="6" similarity="80">
<source file="systems/source-code/SystemStatus.sol" startline="190" endline="195" pcid="1570">
    function suspendSystem(uint256 reason) external {
        _requireAccessToSuspend(SECTION_SYSTEM);
        systemSuspension.suspended = true;
        systemSuspension.reason = uint248(reason);
        emit SystemSuspended(systemSuspension.reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="232" endline="237" pcid="1576">
    function suspendFutures(uint256 reason) external {
        _requireAccessToSuspend(SECTION_FUTURES);
        futuresSuspension.suspended = true;
        futuresSuspension.reason = uint248(reason);
        emit FuturesSuspended(reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="204" endline="209" pcid="1572">
    function suspendIssuance(uint256 reason) external {
        _requireAccessToSuspend(SECTION_ISSUANCE);
        issuanceSuspension.suspended = true;
        issuanceSuspension.reason = uint248(reason);
        emit IssuanceSuspended(reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="218" endline="223" pcid="1574">
    function suspendExchange(uint256 reason) external {
        _requireAccessToSuspend(SECTION_EXCHANGE);
        exchangeSuspension.suspended = true;
        exchangeSuspension.reason = uint248(reason);
        emit ExchangeSuspended(reason);
    }
</source>
</class>

<class classid="167" nclones="4" nlines="6" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="197" endline="202" pcid="1571">
    function resumeSystem() external {
        _requireAccessToResume(SECTION_SYSTEM);
        systemSuspension.suspended = false;
        emit SystemResumed(uint256(systemSuspension.reason));
        systemSuspension.reason = 0;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="211" endline="216" pcid="1573">
    function resumeIssuance() external {
        _requireAccessToResume(SECTION_ISSUANCE);
        issuanceSuspension.suspended = false;
        emit IssuanceResumed(uint256(issuanceSuspension.reason));
        issuanceSuspension.reason = 0;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="225" endline="230" pcid="1575">
    function resumeExchange() external {
        _requireAccessToResume(SECTION_EXCHANGE);
        exchangeSuspension.suspended = false;
        emit ExchangeResumed(uint256(exchangeSuspension.reason));
        exchangeSuspension.reason = 0;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="239" endline="244" pcid="1577">
    function resumeFutures() external {
        _requireAccessToResume(SECTION_FUTURES);
        futuresSuspension.suspended = false;
        emit FuturesResumed(uint256(futuresSuspension.reason));
        futuresSuspension.reason = 0;
    }
</source>
</class>

<class classid="168" nclones="3" nlines="5" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="247" endline="251" pcid="1578">
    function suspendFuturesMarket(bytes32 marketKey, uint256 reason) external {
        bytes32[] memory marketKeys = new bytes32[](1);
        marketKeys[0] = marketKey;
        _internalSuspendFuturesMarkets(marketKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="270" endline="274" pcid="1582">
    function suspendSynthExchange(bytes32 currencyKey, uint256 reason) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalSuspendSynthExchange(currencyKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="290" endline="294" pcid="1586">
    function suspendSynth(bytes32 currencyKey, uint256 reason) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalSuspendSynths(currencyKeys, reason);
    }
</source>
</class>

<class classid="169" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="254" endline="256" pcid="1579">
    function suspendFuturesMarkets(bytes32[] calldata marketKeys, uint256 reason) external {
        _internalSuspendFuturesMarkets(marketKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="296" endline="298" pcid="1587">
    function suspendSynths(bytes32[] calldata currencyKeys, uint256 reason) external {
        _internalSuspendSynths(currencyKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="276" endline="278" pcid="1583">
    function suspendSynthsExchange(bytes32[] calldata currencyKeys, uint256 reason) external {
        _internalSuspendSynthExchange(currencyKeys, reason);
    }
</source>
</class>

<class classid="170" nclones="3" nlines="5" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="259" endline="263" pcid="1580">
    function resumeFuturesMarket(bytes32 marketKey) external {
        bytes32[] memory marketKeys = new bytes32[](1);
        marketKeys[0] = marketKey;
        _internalResumeFuturesMarkets(marketKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="300" endline="304" pcid="1588">
    function resumeSynth(bytes32 currencyKey) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalResumeSynths(currencyKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="280" endline="284" pcid="1584">
    function resumeSynthExchange(bytes32 currencyKey) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalResumeSynthsExchange(currencyKeys);
    }
</source>
</class>

<class classid="171" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="266" endline="268" pcid="1581">
    function resumeFuturesMarkets(bytes32[] calldata marketKeys) external {
        _internalResumeFuturesMarkets(marketKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="286" endline="288" pcid="1585">
    function resumeSynthsExchange(bytes32[] calldata currencyKeys) external {
        _internalResumeSynthsExchange(currencyKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="306" endline="308" pcid="1589">
    function resumeSynths(bytes32[] calldata currencyKeys) external {
        _internalResumeSynths(currencyKeys);
    }
</source>
</class>

<class classid="172" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="312" endline="314" pcid="1590">
    function _requireAccessToSuspend(bytes32 section) internal view {
        require(accessControl[section][msg.sender].canSuspend, "Restricted to access control list");
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="316" endline="318" pcid="1591">
    function _requireAccessToResume(bytes32 section) internal view {
        require(accessControl[section][msg.sender].canResume, "Restricted to access control list");
    }
</source>
</class>

<class classid="173" nclones="3" nlines="9" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="353" endline="361" pcid="1599">
    function _internalSuspendSynths(bytes32[] memory currencyKeys, uint256 reason) internal {
        _requireAccessToSuspend(SECTION_SYNTH);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            synthSuspension[currencyKey].suspended = true;
            synthSuspension[currencyKey].reason = uint248(reason);
            emit SynthSuspended(currencyKey, reason);
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="391" endline="399" pcid="1603">
    function _internalSuspendFuturesMarkets(bytes32[] memory marketKeys, uint256 reason) internal {
        _requireAccessToSuspend(SECTION_FUTURES);
        for (uint i = 0; i < marketKeys.length; i++) {
            bytes32 marketKey = marketKeys[i];
            futuresMarketSuspension[marketKey].suspended = true;
            futuresMarketSuspension[marketKey].reason = uint248(reason);
            emit FuturesMarketSuspended(marketKey, reason);
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="372" endline="380" pcid="1601">
    function _internalSuspendSynthExchange(bytes32[] memory currencyKeys, uint256 reason) internal {
        _requireAccessToSuspend(SECTION_SYNTH_EXCHANGE);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            synthExchangeSuspension[currencyKey].suspended = true;
            synthExchangeSuspension[currencyKey].reason = uint248(reason);
            emit SynthExchangeSuspended(currencyKey, reason);
        }
    }
</source>
</class>

<class classid="174" nclones="3" nlines="8" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="363" endline="370" pcid="1600">
    function _internalResumeSynths(bytes32[] memory currencyKeys) internal {
        _requireAccessToResume(SECTION_SYNTH);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            emit SynthResumed(currencyKey, uint256(synthSuspension[currencyKey].reason));
            delete synthSuspension[currencyKey];
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="401" endline="408" pcid="1604">
    function _internalResumeFuturesMarkets(bytes32[] memory marketKeys) internal {
        _requireAccessToResume(SECTION_FUTURES);
        for (uint i = 0; i < marketKeys.length; i++) {
            bytes32 marketKey = marketKeys[i];
            emit FuturesMarketResumed(marketKey, uint256(futuresMarketSuspension[marketKey].reason));
            delete futuresMarketSuspension[marketKey];
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="382" endline="389" pcid="1602">
    function _internalResumeSynthsExchange(bytes32[] memory currencyKeys) internal {
        _requireAccessToResume(SECTION_SYNTH_EXCHANGE);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            emit SynthExchangeResumed(currencyKey, uint256(synthExchangeSuspension[currencyKey].reason));
            delete synthExchangeSuspension[currencyKey];
        }
    }
</source>
</class>

<class classid="175" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TestableAddressSet.sol" startline="18" endline="20" pcid="1612">
    function add(address element) public {
        set.add(element);
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="22" endline="24" pcid="1613">
    function remove(address element) public {
        set.remove(element);
    }
</source>
</class>

<class classid="176" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TestableAddressSet.sol" startline="30" endline="32" pcid="1615">
    function element(uint index) public view returns (address) {
        return set.elements[index];
    }
</source>
<source file="systems/source-code/TestableBytes32Set.sol" startline="30" endline="32" pcid="1622">
    function element(uint index) public view returns (bytes32) {
        return set.elements[index];
    }
</source>
</class>

<class classid="177" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TestableBytes32Set.sol" startline="18" endline="20" pcid="1619">
    function add(bytes32 element) public {
        set.add(element);
    }
</source>
<source file="systems/source-code/TestableBytes32Set.sol" startline="22" endline="24" pcid="1620">
    function remove(bytes32 element) public {
        set.remove(element);
    }
</source>
</class>

<class classid="178" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TokenExchanger.sol" startline="27" endline="29" pcid="1641">
    function checkBalance(address account) public view synthetixProxyIsSet returns (uint) {
        return IERC20(integrationProxy).balanceOf(account);
    }
</source>
<source file="systems/source-code/TokenExchanger.sol" startline="35" endline="37" pcid="1643">
    function checkBalanceSNXDirect(address account) public view synthetixProxyIsSet returns (uint) {
        return IERC20(synthetix).balanceOf(account);
    }
</source>
</class>

<class classid="179" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/TradingRewards.sol" startline="94" endline="96" pcid="1656">
    function getPeriodIsClaimable(uint periodID) external view returns (bool) {
        return _periods[periodID].isFinalized;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="110" endline="112" pcid="1660">
    function getPeriodAvailableRewards(uint periodID) external view returns (uint) {
        return _periods[periodID].availableRewards;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="98" endline="100" pcid="1657">
    function getPeriodIsFinalized(uint periodID) external view returns (bool) {
        return _periods[periodID].isFinalized;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="106" endline="108" pcid="1659">
    function getPeriodTotalRewards(uint periodID) external view returns (uint) {
        return _periods[periodID].totalRewards;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="102" endline="104" pcid="1658">
    function getPeriodRecordedFees(uint periodID) external view returns (uint) {
        return _periods[periodID].recordedFees;
    }
</source>
</class>

</clones>
