<clones>
<systeminfo processor="nicad6" system="source-code" granularity="functions-consistent" threshold="0%" minlines="3" maxlines="2500"/>
<cloneinfo npcs="2696" npairs="18136"/>
<runinfo ncompares="851122" cputime="35101"/>
<classinfo nclasses="283"/>

<class classid="1" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/AddressResolver.sol" startline="49" endline="51" pcid="4">
    function getAddress(bytes32 name) external view returns (address) {
        return repository[name];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="80" endline="82" pcid="502">
    function getBytes32Value(bytes32 record) external view returns (bytes32) {
        return Bytes32Storage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="106" endline="108" pcid="508">
    function getIntValue(bytes32 record) external view returns (int) {
        return IntStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="93" endline="95" pcid="505">
    function getBooleanValue(bytes32 record) external view returns (bool) {
        return BooleanStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="54" endline="56" pcid="496">
    function getAddressValue(bytes32 record) external view returns (address) {
        return AddressStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="28" endline="30" pcid="490">
    function getUIntValue(bytes32 record) external view returns (uint) {
        return UIntStorage[record];
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="111" endline="113" pcid="22">
    function cachedSynthDebt(bytes32 currencyKey) external view returns (uint) {
        return _cachedSynthDebt[currencyKey];
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="127" endline="129" pcid="346">
    function shortRateLastUpdated(bytes32 currency) internal view returns (uint) {
        return shortRatesLastUpdated[currency];
    }
</source>
</class>

<class classid="2" nclones="2" nlines="13" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="57" endline="69" pcid="11">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](8);
        newAddresses[0] = CONTRACT_ISSUER;
        newAddresses[1] = CONTRACT_EXCHANGER;
        newAddresses[2] = CONTRACT_EXRATES;
        newAddresses[3] = CONTRACT_SYSTEMSTATUS;
        newAddresses[4] = CONTRACT_COLLATERALMANAGER;
        newAddresses[5] = CONTRACT_WRAPPER_FACTORY;
        newAddresses[6] = CONTRACT_ETHER_WRAPPER;
        newAddresses[7] = CONTRACT_FUTURESMARKETMANAGER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="101" endline="113" pcid="211">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](8);
        newAddresses[0] = CONTRACT_EXT_MESSENGER;
        newAddresses[1] = CONTRACT_SYNTHETIX;
        newAddresses[2] = CONTRACT_REWARDESCROW;
        newAddresses[3] = CONTRACT_ISSUER;
        newAddresses[4] = CONTRACT_FEEPOOL;
        newAddresses[5] = CONTRACT_FLEXIBLESTORAGE;
        newAddresses[6] = CONTRACT_EXCHANGERATES;
        newAddresses[7] = CONTRACT_SYSTEM_STATUS;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="3" nclones="144" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="71" endline="73" pcid="12">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="71" endline="73" pcid="2641">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="128" endline="130" pcid="240">
    function _exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="75" endline="77" pcid="13">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/BaseDebtMigrator.sol" startline="61" endline="63" pcid="55">
    function _synthetixERC20() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/OwnerRelayOnEthereum.sol" startline="24" endline="26" pcid="1784">
    function _messenger() private view returns (iAbs_BaseCrossDomainMessenger) {
        return iAbs_BaseCrossDomainMessenger(requireAndGetAddress(CONTRACT_EXT_MESSENGER));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="217" endline="219" pcid="771">
    function _manager() internal view returns (IFuturesMarketManagerInternal) {
        return IFuturesMarketManagerInternal(requireAndGetAddress(CONTRACT_FUTURESMARKETMANAGER));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="82" endline="84" pcid="106">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="67" endline="69" pcid="2640">
    function synthetix() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="82" endline="84" pcid="139">
    function rewardsDistribution() internal view returns (IRewardsDistribution) {
        return IRewardsDistribution(requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="216" endline="218" pcid="2259">
    function futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURESMARKETMANAGER));
    }
</source>
<source file="systems/source-code/RewardEscrowV2Frozen.sol" startline="52" endline="54" pcid="2129">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/PerpsV2MarketDelayedExecution.sol" startline="36" endline="38" pcid="1892">
    function _perpsV2ExchangeRate() internal view returns (IPerpsV2ExchangeRate) {
        return IPerpsV2ExchangeRate(requireAndGetAddress(CONTRACT_PERPSV2EXCHANGERATE));
    }
</source>
<source file="systems/source-code/LiquidatorRewards.sol" startline="70" endline="72" pcid="1043">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="104" endline="106" pcid="546">
    function debtCache() internal view returns (IExchangerInternalDebtCache) {
        return IExchangerInternalDebtCache(requireAndGetAddress(CONTRACT_DEBTCACHE));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="72" endline="74" pcid="538">
    function exchangeState() internal view returns (IExchangeState) {
        return IExchangeState(requireAndGetAddress(CONTRACT_EXCHANGESTATE));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="61" endline="63" pcid="69">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="212" endline="214" pcid="2258">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="70" endline="72" pcid="136">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="78" endline="80" pcid="138">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="54" endline="56" pcid="201">
    function messenger() internal view returns (iAbs_BaseCrossDomainMessenger) {
        return iAbs_BaseCrossDomainMessenger(requireAndGetAddress(CONTRACT_EXT_MESSENGER));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="515" endline="517" pcid="444">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="58" endline="60" pcid="202">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/LiquidatorRewards.sol" startline="66" endline="68" pcid="1042">
    function synthetixDebtShare() internal view returns (ISynthetixDebtShare) {
        return ISynthetixDebtShare(requireAndGetAddress(CONTRACT_SYNTHETIXDEBTSHARE));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="92" endline="94" pcid="543">
    function tradingRewards() internal view returns (ITradingRewards) {
        return ITradingRewards(requireAndGetAddress(CONTRACT_TRADING_REWARDS));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="76" endline="78" pcid="539">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="73" endline="75" pcid="512">
    function synthsUSD() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="112" endline="114" pcid="236">
    function _systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="96" endline="98" pcid="544">
    function delegateApprovals() internal view returns (IDelegateApprovals) {
        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS));
    }
</source>
<source file="systems/source-code/BaseDebtMigrator.sol" startline="53" endline="55" pcid="53">
    function _messenger() internal view returns (iAbs_BaseCrossDomainMessenger) {
        return iAbs_BaseCrossDomainMessenger(requireAndGetAddress(CONTRACT_EXT_MESSENGER));
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="73" endline="75" pcid="1016">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="69" endline="71" pcid="1015">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="78" endline="80" pcid="105">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="74" endline="76" pcid="137">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="62" endline="64" pcid="203">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="146" endline="148" pcid="930">
    function liquidatorRewards() internal view returns (ILiquidatorRewards) {
        return ILiquidatorRewards(requireAndGetAddress(CONTRACT_LIQUIDATOR_REWARDS));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="100" endline="102" pcid="545">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/NativeEtherWrapper.sol" startline="33" endline="35" pcid="1769">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="94" endline="96" pcid="142">
    function liquidator() internal view returns (ILiquidator) {
        return ILiquidator(requireAndGetAddress(CONTRACT_LIQUIDATOR));
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="51" endline="53" pcid="386">
    function _synthetixDebtShare() internal view returns (ISynthetixDebtShare) {
        return ISynthetixDebtShare(requireAndGetAddress(CONTRACT_SYNTHETIX_DEBT_SHARE));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="213" endline="215" pcid="770">
    function _systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="124" endline="126" pcid="239">
    function _exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/LiquidatorRewards.sol" startline="74" endline="76" pcid="1044">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));
    }
</source>
<source file="systems/source-code/SynthRedeemer.sol" startline="36" endline="38" pcid="2356">
    function sUSD() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="208" endline="210" pcid="2257">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="36" endline="38" pcid="1931">
    function _futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURES_MARKET_MANAGER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="137" endline="139" pcid="686">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="77" endline="79" pcid="513">
    function synthsETH() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSETH));
    }
</source>
<source file="systems/source-code/RewardEscrowV2Frozen.sol" startline="48" endline="50" pcid="2128">
    function oldRewardEscrow() internal view returns (IRewardEscrow) {
        return IRewardEscrow(requireAndGetAddress(CONTRACT_REWARD_ESCROW));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="142" endline="144" pcid="929">
    function liquidator() internal view returns (ILiquidator) {
        return ILiquidator(requireAndGetAddress(CONTRACT_LIQUIDATOR));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="123" endline="125" pcid="1824">
    function _exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="36" endline="38" pcid="2291">
    function synthetixERC20() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="169" endline="171" pcid="694">
    function wrapperFactory() internal view returns (IWrapperFactory) {
        return IWrapperFactory(requireAndGetAddress(CONTRACT_WRAPPER_FACTORY));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="74" endline="76" pcid="104">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="65" endline="67" pcid="1014">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/BaseDebtMigrator.sol" startline="57" endline="59" pcid="54">
    function _rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW));
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="47" endline="49" pcid="385">
    function _synthetixBridgeToOptimism() internal view returns (ISynthetixBridgeToOptimism) {
        return ISynthetixBridgeToOptimism(requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE_TO_OPTIMISM));
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="61" endline="63" pcid="1013">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="153" endline="155" pcid="690">
    function delegateApprovals() internal view returns (IDelegateApprovals) {
        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS));
    }
</source>
<source file="systems/source-code/CircuitBreaker.sol" startline="86" endline="88" pcid="230">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="28" endline="30" pcid="1790">
    function _messenger() private view returns (iAbs_BaseCrossDomainMessenger) {
        return iAbs_BaseCrossDomainMessenger(requireAndGetAddress(CONTRACT_EXT_MESSENGER));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="209" endline="211" pcid="769">
    function _exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="134" endline="136" pcid="927">
    function circuitBreaker() internal view returns (ICircuitBreaker) {
        return ICircuitBreaker(requireAndGetAddress(CONTRACT_CIRCUIT_BREAKER));
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="43" endline="45" pcid="384">
    function _liquidatorRewards() internal view returns (ILiquidatorRewards) {
        return ILiquidatorRewards(requireAndGetAddress(CONTRACT_LIQUIDATOR_REWARDS));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="132" endline="134" pcid="241">
    function _feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="57" endline="59" pcid="68">
    function synthetixERC20() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="108" endline="110" pcid="547">
    function directIntegrationManager() internal view returns (IDirectIntegrationManager) {
        return IDirectIntegrationManager(requireAndGetAddress(CONTRACT_DIRECT_INTEGRATION_MANAGER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="161" endline="163" pcid="692">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="44" endline="46" pcid="2270">
    function supplySchedule() internal view returns (ISupplySchedule) {
        return ISupplySchedule(requireAndGetAddress(CONTRACT_SUPPLYSCHEDULE));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="66" endline="68" pcid="204">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/LiquidatorRewards.sol" startline="78" endline="80" pcid="1045">
    function synthetix() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="122" endline="124" pcid="924">
    function synthetixERC20() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="79" endline="81" pcid="1616">
    function flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="91" endline="93" pcid="849">
    function _exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="88" endline="90" pcid="542">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="69" endline="71" pcid="1581">
    function _flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="138" endline="140" pcid="928">
    function synthetixDebtShare() internal view returns (ISynthetixDebtShare) {
        return ISynthetixDebtShare(requireAndGetAddress(CONTRACT_SYNTHETIXDEBTSHARE));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="83" endline="85" pcid="15">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="44" endline="46" pcid="1763">
    function wrapperFactory() internal view returns (IWrapperFactory) {
        return IWrapperFactory(requireAndGetAddress(CONTRACT_WRAPPER_FACTORY));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="125" endline="127" pcid="683">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="204" endline="206" pcid="2256">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/SynthRedeemer.sol" startline="32" endline="34" pcid="2355">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="158" endline="160" pcid="933">
    function debtCache() internal view returns (IIssuerInternalDebtCache) {
        return IIssuerInternalDebtCache(requireAndGetAddress(CONTRACT_DEBTCACHE));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="70" endline="72" pcid="205">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="51" endline="53" pcid="1541">
    function _flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="127" endline="129" pcid="1825">
    function _exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="87" endline="89" pcid="16">
    function collateralManager() internal view returns (ICollateralManager) {
        return ICollateralManager(requireAndGetAddress(CONTRACT_COLLATERALMANAGER));
    }
</source>
<source file="systems/source-code/Synth.sol" startline="200" endline="202" pcid="2255">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="99" endline="101" pcid="19">
    function wrapperFactory() internal view returns (IWrapperFactory) {
        return IWrapperFactory(requireAndGetAddress(CONTRACT_WRAPPER_FACTORY));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="81" endline="83" pcid="514">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="141" endline="143" pcid="292">
    function _exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="136" endline="138" pcid="242">
    function _collateralUtil() internal view returns (ICollateralUtil) {
        return ICollateralUtil(requireAndGetAddress(CONTRACT_COLLATERALUTIL));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="79" endline="81" pcid="14">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="40" endline="42" pcid="2292">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="141" endline="143" pcid="687">
    function collateralManager() internal view returns (ICollateralManager) {
        return ICollateralManager(requireAndGetAddress(CONTRACT_COLLATERALMANAGER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="157" endline="159" pcid="691">
    function rewardsDistribution() internal view returns (IRewardsDistribution) {
        return IRewardsDistribution(requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="149" endline="151" pcid="689">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="137" endline="139" pcid="291">
    function _issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/PurgeableSynth.sol" startline="42" endline="44" pcid="2104">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/NativeEtherWrapper.sol" startline="41" endline="43" pcid="1771">
    function synthsETH() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHSETH));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="126" endline="128" pcid="925">
    function exchanger() internal view returns (IExchanger) {
        return IExchanger(requireAndGetAddress(CONTRACT_EXCHANGER));
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="113" endline="115" pcid="587">
    function circuitBreaker() internal view returns (ICircuitBreaker) {
        return ICircuitBreaker(requireAndGetAddress(CONTRACT_CIRCUIT_BREAKER));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="511" endline="513" pcid="443">
    function synthetix() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="95" endline="97" pcid="18">
    function futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURESMARKETMANAGER));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="53" endline="55" pcid="67">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="82" endline="84" pcid="208">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEM_STATUS));
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="40" endline="42" pcid="1762">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="165" endline="167" pcid="693">
    function futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURES_MARKET_MANAGER));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="85" endline="87" pcid="515">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="131" endline="133" pcid="1826">
    function _systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="87" endline="89" pcid="848">
    function _feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="74" endline="76" pcid="206">
    function flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="133" endline="135" pcid="685">
    function feePoolEternalStorage() internal view returns (FeePoolEternalStorage) {
        return FeePoolEternalStorage(requireAndGetAddress(CONTRACT_FEEPOOLETERNALSTORAGE));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="84" endline="86" pcid="541">
    function synthetix() internal view returns (ISynthetix) {
        return ISynthetix(requireAndGetAddress(CONTRACT_SYNTHETIX));
    }
</source>
<source file="systems/source-code/BaseDebtMigrator.sol" startline="49" endline="51" pcid="52">
    function _issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="40" endline="42" pcid="630">
    function directIntegrationManager() internal view returns (IDirectIntegrationManager) {
        return IDirectIntegrationManager(requireAndGetAddress(CONTRACT_DIRECT_INTEGRATION_MANAGER));
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="59" endline="61" pcid="2187">
    function _short() internal view returns (ICollateralErc20) {
        return ICollateralErc20(requireAndGetAddress(CONTRACT_SHORT));
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="40" endline="42" pcid="2269">
    function rewardEscrow() internal view returns (IRewardEscrow) {
        return IRewardEscrow(requireAndGetAddress(CONTRACT_REWARD_ESCROW));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="80" endline="82" pcid="540">
    function circuitBreaker() internal view returns (ICircuitBreaker) {
        return ICircuitBreaker(requireAndGetAddress(CONTRACT_CIRCUIT_BREAKER));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="65" endline="67" pcid="70">
    function state() internal view returns (IRewardEscrowV2Storage) {
        return IRewardEscrowV2Storage(requireAndGetAddress(CONTRACT_REWARDESCROWV2STORAGE));
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="120" endline="122" pcid="238">
    function _synthsUSD() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="162" endline="164" pcid="934">
    function synthRedeemer() internal view returns (ISynthRedeemer) {
        return ISynthRedeemer(requireAndGetAddress(CONTRACT_SYNTHREDEEMER));
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="36" endline="38" pcid="2689">
    function synthsUSD() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTH_SUSD));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="507" endline="509" pcid="442">
    function synthsUSD() internal view returns (IERC20) {
        return IERC20(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="40" endline="42" pcid="2690">
    function flexibleStorage() internal view returns (IFlexibleStorage) {
        return IFlexibleStorage(requireAndGetAddress(CONTRACT_FLEXIBLESTORAGE));
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="78" endline="80" pcid="207">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXCHANGERATES));
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="44" endline="46" pcid="2691">
    function feePool() internal view returns (IFeePool) {
        return IFeePool(requireAndGetAddress(CONTRACT_FEEPOOL));
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="91" endline="93" pcid="17">
    function etherWrapper() internal view returns (IEtherWrapper) {
        return IEtherWrapper(requireAndGetAddress(CONTRACT_ETHER_WRAPPER));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="135" endline="137" pcid="1827">
    function _manager() internal view returns (IFuturesMarketManagerInternal) {
        return IFuturesMarketManagerInternal(requireAndGetAddress(CONTRACT_FUTURESMARKETMANAGER));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="154" endline="156" pcid="932">
    function rewardEscrowV2() internal view returns (IHasBalance) {
        return IHasBalance(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="52" endline="54" pcid="533">
    function exchangeRates() public view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="150" endline="152" pcid="931">
    function delegateApprovals() internal view returns (IDelegateApprovals) {
        return IDelegateApprovals(requireAndGetAddress(CONTRACT_DELEGATEAPPROVALS));
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="39" endline="41" pcid="383">
    function _liquidator() internal view returns (ILiquidator) {
        return ILiquidator(requireAndGetAddress(CONTRACT_LIQUIDATOR));
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="89" endline="91" pcid="516">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="36" endline="38" pcid="1761">
    function collateralManager() internal view returns (ICollateralManager) {
        return ICollateralManager(requireAndGetAddress(CONTRACT_COLLATERALMANAGER));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="90" endline="92" pcid="141">
    function rewardEscrowV2() internal view returns (IRewardEscrowV2) {
        return IRewardEscrowV2(requireAndGetAddress(CONTRACT_REWARDESCROW_V2));
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="205" endline="207" pcid="768">
    function _exchangeCircuitBreaker() internal view returns (IExchangeCircuitBreaker) {
        return IExchangeCircuitBreaker(requireAndGetAddress(CONTRACT_CIRCUIT_BREAKER));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="145" endline="147" pcid="688">
    function issuer() internal view returns (IIssuer) {
        return IIssuer(requireAndGetAddress(CONTRACT_ISSUER));
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="83" endline="85" pcid="847">
    function _sUSD() internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(CONTRACT_SYNTHSUSD));
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="130" endline="132" pcid="926">
    function exchangeRates() internal view returns (IExchangeRates) {
        return IExchangeRates(requireAndGetAddress(CONTRACT_EXRATES));
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="68" endline="70" pcid="537">
    function systemStatus() internal view returns (ISystemStatus) {
        return ISystemStatus(requireAndGetAddress(CONTRACT_SYSTEMSTATUS));
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="33" endline="35" pcid="883">
    function _futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return IFuturesMarketManager(requireAndGetAddress(CONTRACT_FUTURES_MARKET_MANAGER));
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="86" endline="88" pcid="140">
    function liquidatorRewards() internal view returns (ILiquidatorRewards) {
        return ILiquidatorRewards(requireAndGetAddress(CONTRACT_LIQUIDATORREWARDS));
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="129" endline="131" pcid="684">
    function synthetixDebtShare() internal view returns (ISynthetixDebtShare) {
        return ISynthetixDebtShare(requireAndGetAddress(CONTRACT_SYNTHETIXDEBTSHARE));
    }
</source>
</class>

<class classid="4" nclones="64" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="103" endline="105" pcid="20">
    function debtSnapshotStaleTime() external view returns (uint) {
        return getDebtSnapshotStaleTime();
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="181" endline="183" pcid="697">
    function targetThreshold() external view returns (uint) {
        return getTargetThreshold();
    }
</source>
<source file="systems/source-code/SynthetixBridgeToBase.sol" startline="30" endline="32" pcid="2281">
    function counterpart() internal view returns (address) {
        return synthetixBridgeToOptimism();
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="243" endline="245" pcid="1957">
    function liquidationFeeRatio() external view returns (uint) {
        return _liquidationFeeRatio();
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="132" endline="134" pcid="590">
    function aggregatorWarningFlags() external view returns (address) {
        return getAggregatorWarningFlags();
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="258" endline="260" pcid="1959">
    function keeperLiquidationFee() external view returns (uint) {
        return _keeperLiquidationFee();
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="60" endline="62" pcid="2297">
    function counterpart() internal view returns (address) {
        return synthetixBridgeToBase();
    }
</source>
<source file="systems/source-code/DebtMigratorOnOptimism.sol" startline="33" endline="35" pcid="397">
    function _counterpart() internal view returns (address) {
        return _debtMigratorOnEthereum();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="155" endline="157" pcid="897">
    function minInitialMargin() external view returns (uint) {
        return _minInitialMargin();
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="235" endline="237" pcid="1956">
    function maxKeeperFee() external view returns (uint) {
        return _maxKeeperFee();
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="173" endline="175" pcid="695">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/ExchangerWithFeeRecAlternatives.sol" startline="50" endline="52" pcid="641">
    function atomicMaxVolumePerBlock() external view returns (uint) {
        return getAtomicMaxVolumePerBlock();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="85" endline="87" pcid="1019">
    function liquidationRatio() external view returns (uint) {
        return getLiquidationRatio();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="89" endline="91" pcid="1020">
    function liquidationEscrowDuration() external view returns (uint) {
        return getLiquidationEscrowDuration();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="122" endline="124" pcid="2053">
    function currentFundingVelocity() external view returns (int) {
        return _currentFundingVelocity();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="114" endline="116" pcid="2052">
    function currentFundingRate() external view returns (int) {
        return _currentFundingRate();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="93" endline="98" pcid="1021">
    function liquidationPenalty() external view returns (uint) {
        // SIP-251: use getSnxLiquidationPenalty instead of getLiquidationPenalty
        // which is used for loans / shorts (collateral contracts).
        // Keeping the view name because it makes sense in the context of this contract.
        return getSnxLiquidationPenalty();
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="177" endline="179" pcid="696">
    function feePeriodDuration() external view returns (uint) {
        return getFeePeriodDuration();
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="367" endline="369" pcid="956">
    function minimumStakeTime() external view returns (uint) {
        return getMinimumStakeTime();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="100" endline="102" pcid="1022">
    function selfLiquidationPenalty() external view returns (uint) {
        return getSelfLiquidationPenalty();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="108" endline="110" pcid="1024">
    function flagReward() external view returns (uint) {
        return getFlagReward();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="140" endline="142" pcid="895">
    function liquidationFeeRatio() external view returns (uint) {
        return _liquidationFeeRatio();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="156" endline="158" pcid="2392">
    function debtSnapshotStaleTime() external view returns (uint) {
        return getDebtSnapshotStaleTime();
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="251" endline="253" pcid="1958">
    function minInitialMargin() external view returns (uint) {
        return _minInitialMargin();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="152" endline="154" pcid="2391">
    function minimumStakeTime() external view returns (uint) {
        return getMinimumStakeTime();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="160" endline="162" pcid="2393">
    function aggregatorWarningFlags() external view returns (address) {
        return getAggregatorWarningFlags();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="116" endline="118" pcid="2385">
    function rateStalePeriod() external view returns (uint) {
        return getRateStalePeriod();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="109" endline="111" pcid="2384">
    function liquidateReward() external view returns (uint) {
        return getLiquidateReward();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="103" endline="105" pcid="2383">
    function flagReward() external view returns (uint) {
        return getFlagReward();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="97" endline="99" pcid="2382">
    function selfLiquidationPenalty() external view returns (uint) {
        return getSelfLiquidationPenalty();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="91" endline="93" pcid="2381">
    function liquidationEscrowDuration() external view returns (uint) {
        return getLiquidationEscrowDuration();
    }
</source>
<source file="systems/source-code/VirtualSynth.sol" startline="128" endline="130" pcid="2676">
    function rate() external view returns (uint) {
        return calcRate();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="83" endline="85" pcid="2380">
    function snxLiquidationPenalty() external view returns (uint) {
        return getSnxLiquidationPenalty();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="77" endline="79" pcid="1017">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="166" endline="168" pcid="2394">
    function tradingRewardsEnabled() external view returns (bool) {
        return getTradingRewardsEnabled();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="77" endline="79" pcid="2379">
    function liquidationPenalty() external view returns (uint) {
        return getLiquidationPenalty();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="71" endline="73" pcid="2378">
    function liquidationRatio() external view returns (uint) {
        return getLiquidationRatio();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="64" endline="66" pcid="2377">
    function liquidationDelay() external view returns (uint) {
        return getLiquidationDelay();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="176" endline="178" pcid="2396">
    function etherWrapperMaxETH() external view returns (uint) {
        return getEtherWrapperMaxETH();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="58" endline="60" pcid="2376">
    function targetThreshold() external view returns (uint) {
        return getTargetThreshold();
    }
</source>
<source file="systems/source-code/VirtualSynth.sol" startline="138" endline="140" pcid="2678">
    function secsLeftInWaitingPeriod() external view returns (uint) {
        return secsLeft();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="182" endline="184" pcid="2397">
    function etherWrapperMintFeeRate() external view returns (uint) {
        return getEtherWrapperMintFeeRate();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="81" endline="83" pcid="1018">
    function liquidationDelay() external view returns (uint) {
        return getLiquidationDelay();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="53" endline="55" pcid="2375">
    function feePeriodDuration() external view returns (uint) {
        return getFeePeriodDuration();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="45" endline="47" pcid="2374">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="39" endline="41" pcid="2373">
    function priceDeviationThresholdFactor() external view returns (uint) {
        return getPriceDeviationThresholdFactor();
    }
</source>
<source file="systems/source-code/CircuitBreaker.sol" startline="72" endline="74" pcid="227">
    function priceDeviationThresholdFactor() external view returns (uint) {
        return getPriceDeviationThresholdFactor();
    }
</source>
<source file="systems/source-code/TestablePerpsV2Market.sol" startline="21" endline="23" pcid="2575">
    function proportionalSkew() external view returns (int) {
        return _proportionalSkew();
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="128" endline="130" pcid="589">
    function rateStalePeriod() external view returns (uint) {
        return getRateStalePeriod();
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="190" endline="192" pcid="936">
    function issuanceRatio() external view returns (uint) {
        return getIssuanceRatio();
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="228" endline="230" pcid="1955">
    function minKeeperFee() external view returns (uint) {
        return _minKeeperFee();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="188" endline="190" pcid="2398">
    function etherWrapperBurnFeeRate() external view returns (uint) {
        return getEtherWrapperBurnFeeRate();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="147" endline="149" pcid="896">
    function liquidationBufferRatio() external view returns (uint) {
        return _liquidationBufferRatio();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="220" endline="222" pcid="2404">
    function atomicMaxVolumePerBlock() external view returns (uint) {
        return getAtomicMaxVolumePerBlock();
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="124" endline="126" pcid="549">
    function waitingPeriodSecs() external view returns (uint) {
        return getWaitingPeriodSecs();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="226" endline="228" pcid="2405">
    function atomicTwapWindow() external view returns (uint) {
        return getAtomicTwapWindow();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="32" endline="34" pcid="2372">
    function waitingPeriodSecs() external view returns (uint) {
        return getWaitingPeriodSecs();
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="128" endline="130" pcid="550">
    function tradingRewardsEnabled() external view returns (bool) {
        return getTradingRewardsEnabled();
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="128" endline="130" pcid="522">
    function maxETH() public view returns (uint256) {
        return getEtherWrapperMaxETH();
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="132" endline="134" pcid="551">
    function priceDeviationThresholdFactor() external view returns (uint) {
        return getPriceDeviationThresholdFactor();
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="132" endline="134" pcid="523">
    function mintFeeRate() public view returns (uint256) {
        return getEtherWrapperMintFeeRate();
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="132" endline="134" pcid="894">
    function minKeeperFee() external view returns (uint) {
        return _minKeeperFee();
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="136" endline="138" pcid="524">
    function burnFeeRate() public view returns (uint256) {
        return getEtherWrapperBurnFeeRate();
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="104" endline="106" pcid="1023">
    function liquidateReward() external view returns (uint) {
        return getLiquidateReward();
    }
</source>
</class>

<class classid="5" nclones="26" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="107" endline="109" pcid="21">
    function cachedDebt() external view returns (uint) {
        return _cachedDebt;
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="24" endline="26" pcid="2171">
    function unit() external pure returns (uint) {
        return UNIT;
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="115" endline="117" pcid="23">
    function cacheTimestamp() external view returns (uint) {
        return _cacheTimestamp;
    }
</source>
<source file="systems/source-code/MockMutator.sol" startline="6" endline="8" pcid="1699">
    function read() external view returns (uint) {
        return count;
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="61" endline="63" pcid="2452">
    function contractName() external view returns (bytes32) {
        return SETTINGS_CONTRACT_NAME;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="110" endline="112" pcid="1665">
    function latestRound() public view returns (uint256) {
        return roundId;
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="140" endline="142" pcid="525">
    function weth() public view returns (IWETH) {
        return _weth;
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="65" endline="67" pcid="2188">
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="148" endline="150" pcid="1991">
    function entryDebtCorrection() external view returns (int128) {
        return _entryDebtCorrection;
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="31" endline="33" pcid="2172">
    function preciseUnit() external pure returns (uint) {
        return PRECISE_UNIT;
    }
</source>
<source file="systems/source-code/OneWeekSetup.sol" startline="10" endline="12" pcid="1780">
    function publicSetupExpiryTime() public view returns (uint) {
        return setupExpiryTime;
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="81" endline="83" pcid="339">
    function ratesLastUpdated() public view returns (uint) {
        return borrowRatesLastUpdated;
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="49" endline="51" pcid="2216">
    function totalSupply() external view returns (uint256) {
        return _totalSupply;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="91" endline="93" pcid="2646">
    function getCurrentPeriod() external view returns (uint) {
        return _currentPeriodID;
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="100" endline="102" pcid="2019">
    function entryDebtCorrection() external view returns (int128) {
        return _entryDebtCorrection;
    }
</source>
<source file="systems/source-code/TestableFuturesMarket.sol" startline="12" endline="14" pcid="2564">
    function entryDebtCorrection() external view returns (int) {
        return _entryDebtCorrection;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="87" endline="89" pcid="2645">
    function getPeriodController() external view returns (address) {
        return _periodController;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="114" endline="116" pcid="1666">
    function decimals() external view returns (uint8) {
        return keyDecimals;
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="119" endline="121" pcid="24">
    function cacheInvalid() external view returns (bool) {
        return _cacheInvalid;
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="25" endline="27" pcid="2199">
    function unit() external pure returns (int) {
        return UNIT;
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="152" endline="154" pcid="1992">
    function nextPositionId() external view returns (uint64) {
        return _nextPositionId;
    }
</source>
<source file="systems/source-code/MockPyth.sol" startline="120" endline="122" pcid="1742">
    function getValidTimePeriod() public view returns (uint) {
        return validTimePeriod;
    }
</source>
<source file="systems/source-code/WETH.sol" startline="41" endline="46" pcid="2684">
    function totalSupply() public view returns (uint) {
        // Using _totalSupply instead of balanceOf[this]
        // as it would cause error in OVM compile
        // return address(this).balance;
        return _totalSupply;
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="32" endline="34" pcid="2200">
    function preciseUnit() external pure returns (int) {
        return PRECISE_UNIT;
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="104" endline="106" pcid="2020">
    function nextPositionId() external view returns (uint64) {
        return _nextPositionId;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="75" endline="77" pcid="2642">
    function getAvailableRewards() external view returns (uint) {
        return _balanceAssignedToRewards;
    }
</source>
</class>

<class classid="6" nclones="20" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="130" endline="132" pcid="26">
    function cacheStale() external view returns (bool) {
        return _cacheStale(_cacheTimestamp);
    }
</source>
<source file="systems/source-code/ExchangerWithFeeRecAlternatives.sol" startline="124" endline="126" pcid="645">
    function _virtualSynthMastercopy() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_VIRTUALSYNTH_MASTERCOPY);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="44" endline="46" pcid="2293">
    function rewardsDistribution() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_REWARDSDISTRIBUTION);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="48" endline="50" pcid="2294">
    function synthetixBridgeToBase() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_OVM_SYNTHETIXBRIDGETOBASE);
    }
</source>
<source file="systems/source-code/MintableSynthetix.sol" startline="45" endline="47" pcid="1536">
    function synthetixBridge() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToBase.sol" startline="26" endline="28" pcid="2280">
    function synthetixBridgeToOptimism() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_BASE_SYNTHETIXBRIDGETOOPTIMISM);
    }
</source>
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="32" endline="34" pcid="1791">
    function _ownerRelayOnEthereum() private view returns (address) {
        return requireAndGetAddress(CONTRACT_BASE_OWNER_RELAY_ON_ETHEREUM);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="52" endline="54" pcid="2295">
    function synthetixBridgeEscrow() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIXBRIDGEESCROW);
    }
</source>
<source file="systems/source-code/TestableFuturesMarket.sol" startline="21" endline="23" pcid="2566">
    function maxFundingRate() external view returns (uint) {
        return _maxFundingRate(marketKey);
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="115" endline="117" pcid="212">
    function synthTransferSent() external view returns (uint) {
        return _sumTransferAmounts(SYNTH_TRANSFER_SENT);
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="221" endline="223" pcid="772">
    function _settings() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_FUTURESMARKETSETTINGS);
    }
</source>
<source file="systems/source-code/DebtMigratorOnOptimism.sol" startline="29" endline="31" pcid="396">
    function _debtMigratorOnEthereum() private view returns (address) {
        return requireAndGetAddress(CONTRACT_BASE_DEBT_MIGRATOR_ON_ETHEREUM);
    }
</source>
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="119" endline="121" pcid="213">
    function synthTransferReceived() external view returns (uint) {
        return _sumTransferAmounts(SYNTH_TRANSFER_RECV);
    }
</source>
<source file="systems/source-code/RewardEscrowV2.sol" startline="29" endline="31" pcid="2124">
    function synthetixBridgeToOptimism() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE_OPTIMISM);
    }
</source>
<source file="systems/source-code/RewardEscrowV2Frozen.sol" startline="44" endline="46" pcid="2127">
    function synthetixBridgeToOptimism() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE_OPTIMISM);
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="35" endline="37" pcid="382">
    function _debtMigratorOnOptimism() private view returns (address) {
        return requireAndGetAddress(CONTRACT_OVM_DEBT_MIGRATOR_ON_OPTIMISM);
    }
</source>
<source file="systems/source-code/ImportableRewardEscrowV2Frozen.sol" startline="30" endline="32" pcid="920">
    function synthetixBridgeToBase() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE_BASE);
    }
</source>
<source file="systems/source-code/OwnerRelayOnEthereum.sol" startline="28" endline="30" pcid="1785">
    function _ownerRelayOnOptimism() private view returns (address) {
        return requireAndGetAddress(CONTRACT_OVM_OWNER_RELAY_ON_OPTIMISM);
    }
</source>
<source file="systems/source-code/ImportableRewardEscrowV2.sol" startline="25" endline="27" pcid="917">
    function synthetixBridgeToBase() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_SYNTHETIX_BRIDGE_BASE);
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="139" endline="141" pcid="1828">
    function _settings() internal view returns (address) {
        return requireAndGetAddress(CONTRACT_PERPSV2MARKETSETTINGS);
    }
</source>
</class>

<class classid="7" nclones="2" nlines="8" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="184" endline="191" pcid="30">
    function _cachedSynthDebts(bytes32[] memory currencyKeys) internal view returns (uint[] memory) {
        uint numKeys = currencyKeys.length;
        uint[] memory debts = new uint[](numKeys);
        for (uint i = 0; i < numKeys; i++) {
            debts[i] = _cachedSynthDebt[currencyKeys[i]];
        }
        return debts;
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="197" endline="204" pcid="32">
    function _excludedIssuedDebts(bytes32[] memory currencyKeys) internal view returns (uint[] memory) {
        uint numKeys = currencyKeys.length;
        uint[] memory debts = new uint[](numKeys);
        for (uint i = 0; i < numKeys; i++) {
            debts[i] = _excludedIssuedDebt[currencyKeys[i]];
        }
        return debts;
    }
</source>
</class>

<class classid="8" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="193" endline="195" pcid="31">
    function cachedSynthDebts(bytes32[] calldata currencyKeys) external view returns (uint[] memory snxIssuedDebts) {
        return _cachedSynthDebts(currencyKeys);
    }
</source>
<source file="systems/source-code/BaseDebtCache.sol" startline="206" endline="208" pcid="33">
    function excludedIssuedDebts(bytes32[] calldata currencyKeys) external view returns (uint[] memory excludedDebts) {
        return _excludedIssuedDebts(currencyKeys);
    }
</source>
</class>

<class classid="9" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseDebtCache.sol" startline="301" endline="303" pcid="38">
    function currentDebt() external view returns (uint debt, bool anyRateIsInvalid) {
        return _currentDebt();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="48" endline="50" pcid="2043">
    function assetPrice() external view returns (uint price, bool invalid) {
        return _assetPrice();
    }
</source>
</class>

<class classid="10" nclones="3" nlines="9" similarity="100">
<source file="systems/source-code/BaseDebtMigrator.sol" startline="65" endline="73" pcid="56">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](4);
        newAddresses[0] = CONTRACT_EXT_MESSENGER;
        newAddresses[1] = CONTRACT_REWARDESCROW;
        newAddresses[2] = CONTRACT_ISSUER;
        newAddresses[3] = CONTRACT_SYNTHETIX;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToOptimism.sol" startline="66" endline="74" pcid="2298">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseSynthetixBridge.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](4);
        newAddresses[0] = CONTRACT_ISSUER;
        newAddresses[1] = CONTRACT_REWARDSDISTRIBUTION;
        newAddresses[2] = CONTRACT_OVM_SYNTHETIXBRIDGETOBASE;
        newAddresses[3] = CONTRACT_SYNTHETIXBRIDGEESCROW;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="51" endline="59" pcid="1012">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](4);
        newAddresses[0] = CONTRACT_SYSTEMSTATUS;
        newAddresses[1] = CONTRACT_SYNTHETIX;
        newAddresses[2] = CONTRACT_ISSUER;
        newAddresses[3] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="11" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/BaseDebtMigrator.sol" startline="77" endline="81" pcid="57">
    function debtTransferSent() external view returns (uint) {
        bytes32 debtSharesKey = keccak256(abi.encodePacked(DEBT_TRANSFER_NAMESPACE, DEBT_TRANSFER_SENT, SDS));
        uint currentDebtShares = flexibleStorage().getUIntValue(CONTRACT_NAME(), debtSharesKey);
        return currentDebtShares;
    }
</source>
<source file="systems/source-code/BaseDebtMigrator.sol" startline="83" endline="87" pcid="58">
    function debtTransferReceived() external view returns (uint) {
        bytes32 debtSharesKey = keccak256(abi.encodePacked(DEBT_TRANSFER_NAMESPACE, DEBT_TRANSFER_RECV, SDS));
        uint currentDebtShares = flexibleStorage().getUIntValue(CONTRACT_NAME(), debtSharesKey);
        return currentDebtShares;
    }
</source>
</class>

<class classid="12" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/BaseOneNetAggregator.sol" startline="25" endline="29" pcid="61">
    function setOverrideTimestamp(uint timestamp) public onlyOwner {
        overrideTimestamp = timestamp;

        emit SetOverrideTimestamp(timestamp);
    }
</source>
<source file="systems/source-code/RewardEscrowV2Frozen.sol" startline="64" endline="67" pcid="2130">
    function setMigrateEntriesThresholdAmount(uint amount) external onlyOwner {
        migrateEntriesThresholdAmount = amount;
        emit MigrateEntriesThresholdAmountUpdated(amount);
    }
</source>
</class>

<class classid="13" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/BaseOneNetAggregator.sol" startline="49" endline="51" pcid="64">
    function decimals() external view returns (uint8) {
        return 0;
    }
</source>
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="30" endline="32" pcid="478">
    function numMarkets() external view returns (uint) {
        return 0;
    }
</source>
<source file="systems/source-code/EmptyEtherWrapper.sol" startline="10" endline="12" pcid="474">
    function totalIssuedSynths() public view returns (uint) {
        return 0;
    }
</source>
</class>

<class classid="14" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="69" endline="71" pcid="71">
    function _notImplemented() internal pure {
        revert("Cannot be run on this layer");
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="528" endline="530" pcid="189">
    function _notImplemented() internal pure {
        revert("Cannot be run on this layer");
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="617" endline="620" pcid="627">
    function _notImplemented() internal pure {
        // slither-disable-next-line dead-code
        revert("Cannot be run on this layer");
    }
</source>
<source file="systems/source-code/Exchanger.sol" startline="792" endline="794" pcid="582">
    function _notImplemented() internal pure {
        revert("Cannot be run on this layer");
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="86" endline="88" pcid="107">
    function _notImplemented() internal pure {
        revert("Cannot be run on this layer");
    }
</source>
</class>

<class classid="15" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="86" endline="88" pcid="73">
    function numVestingEntries(address account) public view returns (uint) {
        return state().numVestingEntries(account);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="154" endline="156" pcid="155">
    function collateralisationRatio(address _issuer) external view returns (uint) {
        return issuer().collateralisationRatio(_issuer);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="158" endline="160" pcid="156">
    function collateral(address account) external view returns (uint) {
        return issuer().collateral(account);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="126" endline="128" pcid="150">
    function synthsByAddress(address synthAddress) external view returns (bytes32) {
        return issuer().synthsByAddress(synthAddress);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="98" endline="100" pcid="76">
    function totalVestedAccountBalance(address account) external view returns (uint) {
        return state().totalVestedAccountBalance(account);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="94" endline="96" pcid="75">
    function totalEscrowedAccountBalance(address account) public view returns (uint) {
        return state().totalEscrowedAccountBalance(account);
    }
</source>
</class>

<class classid="16" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="90" endline="92" pcid="74">
    function totalEscrowedBalance() public view returns (uint) {
        return state().totalEscrowedBalance();
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="114" endline="116" pcid="147">
    function availableSynthCount() external view returns (uint) {
        return issuer().availableSynthCount();
    }
</source>
<source file="systems/source-code/NativeEtherWrapper.sol" startline="37" endline="39" pcid="1770">
    function weth() internal view returns (IWETH) {
        return etherWrapper().weth();
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="102" endline="104" pcid="77">
    function nextEntryId() external view returns (uint) {
        return state().nextEntryId();
    }
</source>
</class>

<class classid="17" nclones="10" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="117" endline="119" pcid="80">
    function balanceOf(address account) public view returns (uint) {
        return totalEscrowedAccountBalance(account);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="371" endline="373" pcid="957">
    function canBurnSynths(address account) external view returns (bool) {
        return _canBurnSynths(account);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="407" endline="409" pcid="965">
    function collateral(address account) external view returns (uint) {
        return _collateral(account);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="194" endline="196" pcid="2399">
    function wrapperMaxTokenAmount(address wrapper) external view returns (uint) {
        return getWrapperMaxTokenAmount(wrapper);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="200" endline="202" pcid="2400">
    function wrapperMintFeeRate(address wrapper) external view returns (int) {
        return getWrapperMintFeeRate(wrapper);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="206" endline="208" pcid="2401">
    function wrapperBurnFeeRate(address wrapper) external view returns (int) {
        return getWrapperBurnFeeRate(wrapper);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="210" endline="212" pcid="2402">
    function interactionDelay(address collateral) external view returns (uint) {
        return getInteractionDelay(collateral);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="214" endline="216" pcid="2403">
    function collapseFeeRate(address collateral) external view returns (uint) {
        return getCollapseFeeRate(collateral);
    }
</source>
<source file="systems/source-code/VirtualSynth.sol" startline="134" endline="136" pcid="2677">
    function balanceOfUnderlying(address account) external view returns (uint) {
        return balanceUnderlying(account);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="391" endline="393" pcid="962">
    function lastIssueEvent(address account) external view returns (uint) {
        return _lastIssueEvent(account);
    }
</source>
</class>

<class classid="18" nclones="2" nlines="7" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="208" endline="215" pcid="86">
    function _claimableAmount(VestingEntries.VestingEntry memory _entry) internal view returns (uint256) {
        uint256 quantity;
        if (_entry.escrowAmount != 0) {
            /* Escrow amounts claimable if block.timestamp equal to or after entry endTime */
            quantity = block.timestamp >= _entry.endTime ? _entry.escrowAmount : 0;
        }
        return quantity;
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="198" endline="205" pcid="116">
    function _claimableAmount(VestingEntries.VestingEntry memory _entry) internal view returns (uint256) {
        uint256 quantity;
        if (_entry.escrowAmount != 0) {
            /* Escrow amounts claimable if block.timestamp equal to or after entry endTime */
            quantity = block.timestamp >= _entry.endTime ? _entry.escrowAmount : 0;
        }
        return quantity;
    }
</source>
</class>

<class classid="19" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="337" endline="343" pcid="91">
    function appendVestingEntry(
        address account,
        uint256 quantity,
        uint256 duration
    ) external onlyFeePool {
        _appendVestingEntry(account, quantity, duration);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="266" endline="272" pcid="119">
    function appendVestingEntry(
        address account,
        uint256 quantity,
        uint256 duration
    ) external onlyFeePool {
        _appendVestingEntry(account, quantity, duration);
    }
</source>
</class>

<class classid="20" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="378" endline="380" pcid="93">
    function accountMergingIsOpen() public view returns (bool) {
        return accountMergingStartTime.add(accountMergingDuration) > block.timestamp;
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="290" endline="292" pcid="122">
    function accountMergingIsOpen() public view returns (bool) {
        return accountMergingStartTime.add(accountMergingDuration) > block.timestamp;
    }
</source>
</class>

<class classid="21" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="382" endline="385" pcid="94">
    function startMergingWindow() external onlyOwner {
        accountMergingStartTime = block.timestamp;
        emit AccountMergingStarted(accountMergingStartTime, accountMergingStartTime.add(accountMergingDuration));
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="294" endline="297" pcid="123">
    function startMergingWindow() external onlyOwner {
        accountMergingStartTime = block.timestamp;
        emit AccountMergingStarted(accountMergingStartTime, accountMergingStartTime.add(accountMergingDuration));
    }
</source>
</class>

<class classid="22" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="387" endline="391" pcid="95">
    function setAccountMergingDuration(uint256 duration) external onlyOwner {
        require(duration <= maxAccountMergingDuration, "exceeds max merging duration");
        accountMergingDuration = duration;
        emit AccountMergingDurationUpdated(duration);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="299" endline="303" pcid="124">
    function setAccountMergingDuration(uint256 duration) external onlyOwner {
        require(duration <= maxAccountMergingDuration, "exceeds max merging duration");
        accountMergingDuration = duration;
        emit AccountMergingDurationUpdated(duration);
    }
</source>
</class>

<class classid="23" nclones="4" nlines="4" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="393" endline="396" pcid="96">
    function setMaxAccountMergingWindow(uint256 duration) external onlyOwner {
        maxAccountMergingDuration = duration;
        emit MaxAccountMergingDurationUpdated(duration);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="398" endline="401" pcid="97">
    function setMaxEscrowDuration(uint256 duration) external onlyOwner {
        max_duration = duration;
        emit MaxEscrowDurationUpdated(duration);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="310" endline="313" pcid="126">
    function setMaxEscrowDuration(uint256 duration) external onlyOwner {
        max_duration = duration;
        emit MaxEscrowDurationUpdated(duration);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="305" endline="308" pcid="125">
    function setMaxAccountMergingWindow(uint256 duration) external onlyOwner {
        maxAccountMergingDuration = duration;
        emit MaxAccountMergingDurationUpdated(duration);
    }
</source>
</class>

<class classid="24" nclones="2" nlines="7" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="404" endline="410" pcid="98">
    function nominateAccountToMerge(address account) external {
        require(account != msg.sender, "Cannot nominate own account to merge");
        require(accountMergingIsOpen(), "Account merging has ended");
        require(issuer().debtBalanceOf(msg.sender, "sUSD") == 0, "Cannot merge accounts with debt");
        nominatedReceiver[msg.sender] = account;
        emit NominateAccountToMerge(msg.sender, account);
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="316" endline="322" pcid="127">
    function nominateAccountToMerge(address account) external {
        require(account != msg.sender, "Cannot nominate own account to merge");
        require(accountMergingIsOpen(), "Account merging has ended");
        require(issuer().debtBalanceOf(msg.sender, "sUSD") == 0, "Cannot merge accounts with debt");
        nominatedReceiver[msg.sender] = account;
        emit NominateAccountToMerge(msg.sender, account);
    }
</source>
</class>

<class classid="25" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="447" endline="449" pcid="100">
    function migrateVestingSchedule(address) external {
        _notImplemented();
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="375" endline="377" pcid="130">
    function migrateVestingSchedule(address) external {
        _notImplemented();
    }
</source>
</class>

<class classid="26" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="451" endline="457" pcid="101">
    function migrateAccountEscrowBalances(
        address[] calldata,
        uint256[] calldata,
        uint256[] calldata
    ) external {
        _notImplemented();
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="379" endline="385" pcid="131">
    function migrateAccountEscrowBalances(
        address[] calldata,
        uint256[] calldata,
        uint256[] calldata
    ) external {
        _notImplemented();
    }
</source>
</class>

<class classid="27" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="461" endline="463" pcid="102">
    function burnForMigration(address, uint[] calldata) external returns (uint256, VestingEntries.VestingEntry[] memory) {
        _notImplemented();
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="389" endline="391" pcid="132">
    function burnForMigration(address, uint[] calldata) external returns (uint256, VestingEntries.VestingEntry[] memory) {
        _notImplemented();
    }
</source>
</class>

<class classid="28" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2.sol" startline="465" endline="471" pcid="103">
    function importVestingEntries(
        address,
        uint256,
        VestingEntries.VestingEntry[] calldata
    ) external {
        _notImplemented();
    }
</source>
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="393" endline="399" pcid="133">
    function importVestingEntries(
        address,
        uint256,
        VestingEntries.VestingEntry[] calldata
    ) external {
        _notImplemented();
    }
</source>
</class>

<class classid="29" nclones="5" nlines="6" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="93" endline="98" pcid="108">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTHETIX;
        addresses[1] = CONTRACT_FEEPOOL;
        addresses[2] = CONTRACT_ISSUER;
    }
</source>
<source file="systems/source-code/TestableMixinResolver.sol" startline="15" endline="20" pcid="2572">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_EXAMPLE_1;
        addresses[1] = CONTRACT_EXAMPLE_2;
        addresses[2] = CONTRACT_EXAMPLE_3;
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="76" endline="81" pcid="846">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTHSUSD;
        addresses[1] = CONTRACT_FEEPOOL;
        addresses[2] = CONTRACT_EXCHANGER;
    }
</source>
<source file="systems/source-code/Depot.sol" startline="465" endline="470" pcid="438">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTHSUSD;
        addresses[1] = CONTRACT_EXRATES;
        addresses[2] = CONTRACT_SYNTHETIX;
    }
</source>
<source file="systems/source-code/WrapperFactory.sol" startline="28" endline="33" pcid="2688">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](3);
        addresses[0] = CONTRACT_SYNTH_SUSD;
        addresses[1] = CONTRACT_FLEXIBLESTORAGE;
        addresses[2] = CONTRACT_FEEPOOL;
    }
</source>
</class>

<class classid="30" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="103" endline="105" pcid="109">
    function balanceOf(address account) public view returns (uint) {
        return totalEscrowedAccountBalance[account];
    }
</source>
<source file="systems/source-code/MockFlagsInterface.sol" startline="14" endline="16" pcid="1684">
    function getFlag(address aggregator) external view returns (bool) {
        return flags[aggregator];
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="69" endline="71" pcid="2189">
    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }
</source>
<source file="systems/source-code/CircuitBreaker.sol" startline="76" endline="78" pcid="228">
    function lastValue(address oracleAddress) external view returns (uint) {
        return _lastValue[oracleAddress];
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="53" endline="55" pcid="2217">
    function balanceOf(address account) external view returns (uint256) {
        return _balances[account];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="56" endline="58" pcid="2333">
    function balanceOf(address account) public view returns (uint) {
        return totalVestedAccountBalance[account];
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="79" endline="81" pcid="2109">
    function balanceOf(address account) public view returns (uint) {
        return totalEscrowedAccountBalance[account];
    }
</source>
<source file="systems/source-code/CircuitBreaker.sol" startline="80" endline="82" pcid="229">
    function circuitBroken(address oracleAddress) external view returns (bool) {
        return _circuitBroken[oracleAddress];
    }
</source>
</class>

<class classid="31" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/BaseRewardEscrowV2Frozen.sol" startline="110" endline="112" pcid="110">
    function numVestingEntries(address account) external view returns (uint) {
        return accountVestingEntryIDs[account].length;
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="63" endline="65" pcid="2334">
    function numVestingEntries(address account) public view returns (uint) {
        return vestingSchedules[account].length;
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="90" endline="92" pcid="2111">
    function numVestingEntries(address account) external view returns (uint) {
        return vestingSchedules[account].length;
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="83" endline="85" pcid="2110">
    function _numVestingEntries(address account) internal view returns (uint) {
        return vestingSchedules[account].length;
    }
</source>
</class>

<class classid="32" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="240" endline="250" pcid="162">
    function settle(bytes32 currencyKey)
        external
        optionalProxy
        returns (
            uint reclaimed,
            uint refunded,
            uint numEntriesSettled
        )
    {
        return exchanger().settle(messageSender, currencyKey);
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="118" endline="128" pcid="2274">
    function settle(bytes32 currencyKey)
        external
        optionalProxy
        returns (
            uint reclaimed,
            uint refunded,
            uint numEntriesSettled
        )
    {
        return exchanger().settle(messageSender, currencyKey);
    }
</source>
</class>

<class classid="33" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="331" endline="333" pcid="168">
    function issueSynths(uint amount) external issuanceActive optionalProxy {
        return issuer().issueSynths(messageSender, amount);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="347" endline="349" pcid="172">
    function burnSynths(uint amount) external issuanceActive optionalProxy {
        return issuer().burnSynths(messageSender, amount);
    }
</source>
</class>

<class classid="34" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="335" endline="337" pcid="169">
    function issueSynthsOnBehalf(address issueForAddress, uint amount) external issuanceActive optionalProxy {
        return issuer().issueSynthsOnBehalf(issueForAddress, messageSender, amount);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="351" endline="353" pcid="173">
    function burnSynthsOnBehalf(address burnForAddress, uint amount) external issuanceActive optionalProxy {
        return issuer().burnSynthsOnBehalf(burnForAddress, messageSender, amount);
    }
</source>
</class>

<class classid="35" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="339" endline="341" pcid="170">
    function issueMaxSynths() external issuanceActive optionalProxy {
        return issuer().issueMaxSynths(messageSender);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="355" endline="357" pcid="174">
    function burnSynthsToTarget() external issuanceActive optionalProxy {
        return issuer().burnSynthsToTarget(messageSender);
    }
</source>
</class>

<class classid="36" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="343" endline="345" pcid="171">
    function issueMaxSynthsOnBehalf(address issueForAddress) external issuanceActive optionalProxy {
        return issuer().issueMaxSynthsOnBehalf(issueForAddress, messageSender);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="359" endline="361" pcid="175">
    function burnSynthsToTargetOnBehalf(address burnForAddress) external issuanceActive optionalProxy {
        return issuer().burnSynthsToTargetOnBehalf(burnForAddress, messageSender);
    }
</source>
</class>

<class classid="37" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="516" endline="518" pcid="186">
    function mintSecondary(address, uint) external {
        _notImplemented();
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="524" endline="526" pcid="188">
    function burnSecondary(address, uint) external {
        _notImplemented();
    }
</source>
</class>

<class classid="38" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="539" endline="541" pcid="190">
    function _systemActive() private view {
        systemStatus().requireSystemActive();
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="642" endline="644" pcid="271">
    function _requireIssuanceIsActive() private view {
        _systemStatus().requireIssuanceActive();
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="548" endline="550" pcid="191">
    function _issuanceActive() private view {
        systemStatus().requireIssuanceActive();
    }
</source>
</class>

<class classid="39" nclones="2" nlines="11" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="575" endline="585" pcid="194">
    function _onlyProxyOrInternal() internal {
        if (msg.sender == address(proxy)) {
            // allow proxy through, messageSender should be already set correctly
            return;
        } else if (_isInternalTransferCaller(msg.sender)) {
            // optionalProxy behaviour only for the internal legacy contracts
            messageSender = msg.sender;
        } else {
            revert("Only the proxy can call");
        }
    }
</source>
<source file="systems/source-code/Synth.sol" startline="278" endline="288" pcid="2264">
    function _onlyProxyOrInternal() internal {
        if (msg.sender == address(proxy)) {
            // allow proxy through, messageSender should be already set correctly
            return;
        } else if (_isInternalTransferCaller(msg.sender)) {
            // optionalProxy behaviour only for the internal legacy contracts
            messageSender = msg.sender;
        } else {
            revert("Only the proxy can call");
        }
    }
</source>
</class>

<class classid="40" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="634" endline="650" pcid="197">
    function emitSynthExchange(
        address account,
        bytes32 fromCurrencyKey,
        uint256 fromAmount,
        bytes32 toCurrencyKey,
        uint256 toAmount,
        address toAddress
    ) external onlyExchanger {
        proxy._emit(
            abi.encode(fromCurrencyKey, fromAmount, toCurrencyKey, toAmount, toAddress),
            2,
            SYNTH_EXCHANGE_SIG,
            addressToBytes32(account),
            0,
            0
        );
    }
</source>
<source file="systems/source-code/Synthetix.sol" startline="193" endline="209" pcid="2277">
    function emitAtomicSynthExchange(
        address account,
        bytes32 fromCurrencyKey,
        uint256 fromAmount,
        bytes32 toCurrencyKey,
        uint256 toAmount,
        address toAddress
    ) external onlyExchanger {
        proxy._emit(
            abi.encode(fromCurrencyKey, fromAmount, toCurrencyKey, toAmount, toAddress),
            2,
            ATOMIC_SYNTH_EXCHANGE_SIG,
            addressToBytes32(account),
            0,
            0
        );
    }
</source>
</class>

<class classid="41" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetix.sol" startline="667" endline="673" pcid="199">
    function emitExchangeReclaim(
        address account,
        bytes32 currencyKey,
        uint256 amount
    ) external onlyExchanger {
        proxy._emit(abi.encode(currencyKey, amount), 2, EXCHANGERECLAIM_SIG, addressToBytes32(account), 0, 0);
    }
</source>
<source file="systems/source-code/BaseSynthetix.sol" startline="678" endline="684" pcid="200">
    function emitExchangeRebate(
        address account,
        bytes32 currencyKey,
        uint256 amount
    ) external onlyExchanger {
        proxy._emit(abi.encode(currencyKey, amount), 2, EXCHANGEREBATE_SIG, addressToBytes32(account), 0, 0);
    }
</source>
</class>

<class classid="42" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="86" endline="88" pcid="209">
    function initiatingActive() internal view {
        require(initiationActive, "Initiation deactivated");
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="55" endline="57" pcid="387">
    function _initiatingActive() internal view {
        require(initiationActive, "Initiation deactivated");
    }
</source>
</class>

<class classid="43" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="137" endline="141" pcid="214">
    function suspendInitiation() external onlyOwner {
        require(initiationActive, "Initiation suspended");
        initiationActive = false;
        emit InitiationSuspended();
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="146" endline="150" pcid="392">
    function suspendInitiation() external onlyOwner {
        require(initiationActive, "Initiation suspended");
        initiationActive = false;
        emit InitiationSuspended();
    }
</source>
</class>

<class classid="44" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/BaseSynthetixBridge.sol" startline="143" endline="147" pcid="215">
    function resumeInitiation() external onlyOwner {
        require(!initiationActive, "Initiation not suspended");
        initiationActive = true;
        emit InitiationResumed();
    }
</source>
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="152" endline="156" pcid="393">
    function resumeInitiation() external onlyOwner {
        require(!initiationActive, "Initiation not suspended");
        initiationActive = true;
        emit InitiationResumed();
    }
</source>
</class>

<class classid="45" nclones="2" nlines="8" similarity="100">
<source file="systems/source-code/CircuitBreaker.sol" startline="53" endline="60" pcid="224">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](3);
        newAddresses[0] = CONTRACT_SYSTEMSTATUS;
        newAddresses[1] = CONTRACT_ISSUER;
        newAddresses[2] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="48" endline="55" pcid="1764">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = Synth.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](3);
        newAddresses[0] = CONTRACT_COLLATERALMANAGER;
        newAddresses[1] = CONTRACT_ETHER_WRAPPER;
        newAddresses[2] = CONTRACT_WRAPPER_FACTORY;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="46" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Collateral.sol" startline="116" endline="118" pcid="237">
    function _synth(bytes32 synthName) internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(synthName));
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="145" endline="147" pcid="293">
    function _synth(bytes32 synthName) internal view returns (ISynth) {
        return ISynth(requireAndGetAddress(synthName));
    }
</source>
</class>

<class classid="47" nclones="6" nlines="4" similarity="100">
<source file="systems/source-code/Collateral.sol" startline="181" endline="184" pcid="247">
    function setMinCollateral(uint _minCollateral) external onlyOwner {
        minCollateral = _minCollateral;
        emit MinCollateralUpdated(minCollateral);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="323" endline="326" pcid="308">
    function setMaxSkewRate(uint _maxSkewRate) public onlyOwner {
        maxSkewRate = _maxSkewRate;
        emit MaxSkewRateUpdated(maxSkewRate);
    }
</source>
<source file="systems/source-code/Collateral.sol" startline="186" endline="189" pcid="248">
    function setIssueFeeRate(uint _issueFeeRate) external onlyOwner {
        issueFeeRate = _issueFeeRate;
        emit IssueFeeRateUpdated(issueFeeRate);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="328" endline="331" pcid="309">
    function setBaseBorrowRate(uint _baseBorrowRate) public onlyOwner {
        baseBorrowRate = _baseBorrowRate;
        emit BaseBorrowRateUpdated(baseBorrowRate);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="333" endline="336" pcid="310">
    function setBaseShortRate(uint _baseShortRate) public onlyOwner {
        baseShortRate = _baseShortRate;
        emit BaseShortRateUpdated(baseShortRate);
    }
</source>
<source file="systems/source-code/Depot.sol" startline="91" endline="94" pcid="422">
    function setMaxEthPurchase(uint _maxEthPurchase) external onlyOwner {
        maxEthPurchase = _maxEthPurchase;
        emit MaxEthPurchaseUpdated(maxEthPurchase);
    }
</source>
</class>

<class classid="48" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/Collateral.sol" startline="191" endline="194" pcid="249">
    function setCanOpenLoans(bool _canOpenLoans) external onlyOwner {
        canOpenLoans = _canOpenLoans;
        emit CanOpenLoansUpdated(canOpenLoans);
    }
</source>
<source file="systems/source-code/DappMaintenance.sol" startline="33" endline="36" pcid="369">
    function setMaintenanceModeStaking(bool isPaused) external onlyOwner {
        isPausedStaking = isPaused;
        emit StakingMaintenance(isPausedStaking);
    }
</source>
<source file="systems/source-code/DappMaintenance.sol" startline="38" endline="41" pcid="370">
    function setMaintenanceModeSX(bool isPaused) external onlyOwner {
        isPausedSX = isPaused;
        emit SXMaintenance(isPausedSX);
    }
</source>
</class>

<class classid="49" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/CollateralErc20.sol" startline="83" endline="89" pcid="276">
    function repay(
        address borrower,
        uint id,
        uint amount
    ) external returns (uint principal, uint collateral) {
        (principal, collateral) = _repay(borrower, msg.sender, id, amount);
    }
</source>
<source file="systems/source-code/CollateralShort.sol" startline="53" endline="59" pcid="352">
    function repay(
        address borrower,
        uint id,
        uint amount
    ) external returns (uint principal, uint collateral) {
        (principal, collateral) = _repay(borrower, msg.sender, id, amount);
    }
</source>
<source file="systems/source-code/CollateralEth.sol" startline="43" endline="49" pcid="285">
    function repay(
        address borrower,
        uint id,
        uint amount
    ) external returns (uint principal, uint collateral) {
        (principal, collateral) = _repay(borrower, msg.sender, id, amount);
    }
</source>
</class>

<class classid="50" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/CollateralErc20.sol" startline="91" endline="93" pcid="277">
    function draw(uint id, uint amount) external returns (uint principal, uint collateral) {
        (principal, collateral) = _draw(id, amount);
    }
</source>
<source file="systems/source-code/CollateralShort.sol" startline="82" endline="84" pcid="356">
    function draw(uint id, uint amount) external returns (uint principal, uint collateral) {
        (principal, collateral) = _draw(id, amount);
    }
</source>
<source file="systems/source-code/CollateralEth.sol" startline="51" endline="53" pcid="286">
    function draw(uint id, uint amount) external returns (uint principal, uint collateral) {
        (principal, collateral) = _draw(id, amount);
    }
</source>
</class>

<class classid="51" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="151" endline="153" pcid="294">
    function hasCollateral(address collateral) public view returns (bool) {
        return _collaterals.contains(collateral);
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="244" endline="246" pcid="864">
    function isEndorsed(address account) external view returns (bool) {
        return _endorsedAddresses.contains(account);
    }
</source>
</class>

<class classid="52" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="166" endline="168" pcid="296">
    function long(bytes32 synth) external view returns (uint amount) {
        return state.long(synth);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="170" endline="172" pcid="297">
    function short(bytes32 synth) external view returns (uint amount) {
        return state.short(synth);
    }
</source>
</class>

<class classid="53" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="311" endline="315" pcid="306">
    function setUtilisationMultiplier(uint _utilisationMultiplier) public onlyOwner {
        require(_utilisationMultiplier > 0, "Must be greater than 0");
        utilisationMultiplier = _utilisationMultiplier;
        emit UtilisationMultiplierUpdated(utilisationMultiplier);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="317" endline="321" pcid="307">
    function setMaxDebt(uint _maxDebt) public onlyOwner {
        require(_maxDebt > 0, "Must be greater than 0");
        maxDebt = _maxDebt;
        emit MaxDebtUpdated(maxDebt);
    }
</source>
</class>

<class classid="54" nclones="2" nlines="8" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="346" endline="353" pcid="312">
    function addCollaterals(address[] calldata collaterals) external onlyOwner {
        for (uint i = 0; i < collaterals.length; i++) {
            if (!_collaterals.contains(collaterals[i])) {
                _collaterals.add(collaterals[i]);
                emit CollateralAdded(collaterals[i]);
            }
        }
    }
</source>
<source file="systems/source-code/PerpsV2ExchangeRate.sol" startline="48" endline="55" pcid="1801">
    function addAssociatedContracts(address[] calldata associatedContracts) external onlyOwner {
        for (uint i = 0; i < associatedContracts.length; i++) {
            if (!_associatedContracts.contains(associatedContracts[i])) {
                _associatedContracts.add(associatedContracts[i]);
                emit AssociatedContractAdded(associatedContracts[i]);
            }
        }
    }
</source>
</class>

<class classid="55" nclones="4" nlines="8" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="355" endline="362" pcid="313">
    function removeCollaterals(address[] calldata collaterals) external onlyOwner {
        for (uint i = 0; i < collaterals.length; i++) {
            if (_collaterals.contains(collaterals[i])) {
                _collaterals.remove(collaterals[i]);
                emit CollateralRemoved(collaterals[i]);
            }
        }
    }
</source>
<source file="systems/source-code/PerpsV2ExchangeRate.sol" startline="58" endline="65" pcid="1802">
    function removeAssociatedContracts(address[] calldata associatedContracts) external onlyOwner {
        for (uint i = 0; i < associatedContracts.length; i++) {
            if (_associatedContracts.contains(associatedContracts[i])) {
                _associatedContracts.remove(associatedContracts[i]);
                emit AssociatedContractRemoved(associatedContracts[i]);
            }
        }
    }
</source>
<source file="systems/source-code/StateShared.sol" startline="48" endline="55" pcid="2234">
    function removeAssociatedContracts(address[] calldata associatedContracts) external onlyOwner {
        for (uint i = 0; i < associatedContracts.length; i++) {
            if (_associatedContracts.contains(associatedContracts[i])) {
                _associatedContracts.remove(associatedContracts[i]);
                emit AssociatedContractRemoved(associatedContracts[i]);
            }
        }
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="429" endline="436" pcid="879">
    function removeEndorsedAddresses(address[] calldata addresses) external onlyOwner {
        for (uint i = 0; i < addresses.length; i++) {
            if (_endorsedAddresses.contains(addresses[i])) {
                _endorsedAddresses.remove(addresses[i]);
                emit EndorsedAddressRemoved(addresses[i]);
            }
        }
    }
</source>
</class>

<class classid="56" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="481" endline="483" pcid="320">
    function updateBorrowRates(uint rate) internal {
        state.updateBorrowRates(rate);
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="67" endline="69" pcid="1710">
    function payFee(uint amount) external {
        manager.payFee(amount);
    }
</source>
</class>

<class classid="57" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="489" endline="491" pcid="322">
    function updateBorrowRatesCollateral(uint rate) external onlyCollateral {
        state.updateBorrowRates(rate);
    }
</source>
<source file="systems/source-code/SynthetixState.sol" startline="84" endline="86" pcid="2350">
    function appendDebtLedgerValue(uint value) external onlyAssociatedContract {
        debtLedger.push(value);
    }
</source>
</class>

<class classid="58" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManager.sol" startline="497" endline="499" pcid="324">
    function incrementLongs(bytes32 synth, uint amount) external onlyCollateral {
        state.incrementLongs(synth, amount);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="505" endline="507" pcid="326">
    function incrementShorts(bytes32 synth, uint amount) external onlyCollateral {
        state.incrementShorts(synth, amount);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="501" endline="503" pcid="325">
    function decrementLongs(bytes32 synth, uint amount) external onlyCollateral {
        state.decrementLongs(synth, amount);
    }
</source>
<source file="systems/source-code/CollateralManager.sol" startline="509" endline="511" pcid="327">
    function decrementShorts(bytes32 synth, uint amount) external onlyCollateral {
        state.decrementShorts(synth, amount);
    }
</source>
</class>

<class classid="59" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="42" endline="44" pcid="330">
    function long(bytes32 synth) external view onlyAssociatedContract returns (uint) {
        return totalIssuedSynths[synth].long;
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="46" endline="48" pcid="331">
    function short(bytes32 synth) external view onlyAssociatedContract returns (uint) {
        return totalIssuedSynths[synth].short;
    }
</source>
</class>

<class classid="60" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="50" endline="52" pcid="332">
    function incrementLongs(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].long = totalIssuedSynths[synth].long.add(amount);
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="62" endline="64" pcid="335">
    function decrementShorts(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].short = totalIssuedSynths[synth].short.sub(amount);
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="58" endline="60" pcid="334">
    function incrementShorts(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].short = totalIssuedSynths[synth].short.add(amount);
    }
</source>
<source file="systems/source-code/CollateralManagerState.sol" startline="54" endline="56" pcid="333">
    function decrementLongs(bytes32 synth, uint256 amount) external onlyAssociatedContract {
        totalIssuedSynths[synth].long = totalIssuedSynths[synth].long.sub(amount);
    }
</source>
</class>

<class classid="61" nclones="7" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="72" endline="74" pcid="337">
    function getRatesLength() public view returns (uint) {
        return borrowRates.length;
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="108" endline="110" pcid="2021">
    function fundingSequenceLength() external view returns (uint) {
        return fundingSequence.length;
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="379" endline="381" pcid="959">
    function availableSynthCount() external view returns (uint) {
        return availableSynths.length;
    }
</source>
<source file="systems/source-code/SynthetixState.sol" startline="93" endline="95" pcid="2351">
    function debtLedgerLength() external view returns (uint) {
        return debtLedger.length;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="43" endline="45" pcid="2491">
    function systemSuspended() external view returns (bool) {
        return systemSuspension.suspended;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="196" endline="198" pcid="2162">
    function distributionsLength() external view returns (uint) {
        return distributions.length;
    }
</source>
<source file="systems/source-code/MixinFuturesViews.sol" startline="50" endline="52" pcid="1568">
    function fundingSequenceLength() external view returns (uint) {
        return fundingSequence.length;
    }
</source>
</class>

<class classid="62" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/CollateralManagerState.sol" startline="110" endline="112" pcid="342">
    function removeShortCurrency(bytes32 currency) external onlyAssociatedContract {
        delete shortRates[currency];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="101" endline="103" pcid="507">
    function deleteBooleanValue(bytes32 record) external onlyAssociatedContract {
        delete BooleanStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="49" endline="51" pcid="495">
    function deleteStringValue(bytes32 record) external onlyAssociatedContract {
        delete StringStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="75" endline="77" pcid="501">
    function deleteBytesValue(bytes32 record) external onlyAssociatedContract {
        delete BytesStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="62" endline="64" pcid="498">
    function deleteAddressValue(bytes32 record) external onlyAssociatedContract {
        delete AddressStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="88" endline="90" pcid="504">
    function deleteBytes32Value(bytes32 record) external onlyAssociatedContract {
        delete Bytes32Storage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="36" endline="38" pcid="492">
    function deleteUIntValue(bytes32 record) external onlyAssociatedContract {
        delete UIntStorage[record];
    }
</source>
<source file="systems/source-code/EternalStorage.sol" startline="114" endline="116" pcid="510">
    function deleteIntValue(bytes32 record) external onlyAssociatedContract {
        delete IntStorage[record];
    }
</source>
</class>

<class classid="63" nclones="10" nlines="6" similarity="100">
<source file="systems/source-code/CollateralUtil.sol" startline="27" endline="32" pcid="360">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToBase.sol" startline="36" endline="41" pcid="2282">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseSynthetixBridge.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_BASE_SYNTHETIXBRIDGETOOPTIMISM;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="26" endline="31" pcid="882">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinFuturesMarketSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_FUTURES_MARKET_MANAGER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="29" endline="34" pcid="1930">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinPerpsV2MarketSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_FUTURES_MARKET_MANAGER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/MintableSynthetix.sol" startline="38" endline="43" pcid="1535">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseSynthetix.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_SYNTHETIX_BRIDGE;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/PurgeableSynth.sol" startline="35" endline="40" pcid="2103">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = Synth.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/DebtMigratorOnOptimism.sol" startline="22" endline="27" pcid="395">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseDebtMigrator.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_BASE_DEBT_MIGRATOR_ON_ETHEREUM;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/ExchangerWithFeeRecAlternatives.sol" startline="41" endline="46" pcid="640">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = Exchanger.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_VIRTUALSYNTH_MASTERCOPY;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="20" endline="25" pcid="628">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = ExchangeRates.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_DIRECT_INTEGRATION_MANAGER;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/ExchangeCircuitBreaker.sol" startline="45" endline="50" pcid="532">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_EXRATES;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="64" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="59" endline="66" pcid="388">
    function _getCrossDomainGasLimit(uint32 crossDomainGasLimit) private view returns (uint32) {
        // Use specified crossDomainGasLimit if specified value is not zero.
        // otherwise use the default in SystemSettings.
        return
            crossDomainGasLimit != 0
                ? crossDomainGasLimit
                : uint32(getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits.Relay));
    }
</source>
<source file="systems/source-code/OwnerRelayOnEthereum.sol" startline="32" endline="39" pcid="1786">
    function _getCrossDomainGasLimit(uint32 crossDomainGasLimit) private view returns (uint32) {
        // Use specified crossDomainGasLimit if specified value is not zero.
        // otherwise use the default in SystemSettings.
        return
            crossDomainGasLimit != 0
                ? crossDomainGasLimit
                : uint32(getCrossDomainMessageGasLimit(CrossDomainMessageGasLimits.Relay));
    }
</source>
</class>

<class classid="65" nclones="2" nlines="10" similarity="100">
<source file="systems/source-code/DebtMigratorOnEthereum.sol" startline="68" endline="77" pcid="389">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseDebtMigrator.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](5);
        newAddresses[0] = CONTRACT_OVM_DEBT_MIGRATOR_ON_OPTIMISM;
        newAddresses[1] = CONTRACT_LIQUIDATOR;
        newAddresses[2] = CONTRACT_LIQUIDATOR_REWARDS;
        newAddresses[3] = CONTRACT_SYNTHETIX_BRIDGE_TO_OPTIMISM;
        newAddresses[4] = CONTRACT_SYNTHETIX_DEBT_SHARE;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/FuturesMarketBase.sol" startline="194" endline="203" pcid="767">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinFuturesMarketSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](5);
        newAddresses[0] = CONTRACT_EXCHANGER;
        newAddresses[1] = CONTRACT_CIRCUIT_BREAKER;
        newAddresses[2] = CONTRACT_FUTURESMARKETMANAGER;
        newAddresses[3] = CONTRACT_FUTURESMARKETSETTINGS;
        newAddresses[4] = CONTRACT_SYSTEMSTATUS;
        addresses = combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="66" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/DelegateApprovals.sol" startline="47" endline="49" pcid="403">
    function canBurnFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(BURN_FOR_ADDRESS, authoriser, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="51" endline="53" pcid="404">
    function canIssueFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(ISSUE_FOR_ADDRESS, authoriser, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="59" endline="61" pcid="406">
    function canExchangeFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(EXCHANGE_FOR_ADDRESS, authoriser, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="55" endline="57" pcid="405">
    function canClaimFor(address authoriser, address delegate) external view returns (bool) {
        return _checkApproval(CLAIM_FOR_ADDRESS, authoriser, delegate);
    }
</source>
</class>

<class classid="67" nclones="9" nlines="3" similarity="100">
<source file="systems/source-code/DelegateApprovals.sol" startline="83" endline="85" pcid="409">
    function approveAllDelegatePowers(address delegate) external {
        _setApproval(APPROVE_ALL, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="117" endline="119" pcid="416">
    function removeClaimOnBehalf(address delegate) external {
        _withdrawApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="126" endline="128" pcid="418">
    function removeExchangeOnBehalf(address delegate) external {
        _withdrawApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="99" endline="101" pcid="412">
    function removeBurnOnBehalf(address delegate) external {
        _withdrawApproval(BURN_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="108" endline="110" pcid="414">
    function removeIssueOnBehalf(address delegate) external {
        _withdrawApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="113" endline="115" pcid="415">
    function approveClaimOnBehalf(address delegate) external {
        _setApproval(CLAIM_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="95" endline="97" pcid="411">
    function approveBurnOnBehalf(address delegate) external {
        _setApproval(BURN_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="122" endline="124" pcid="417">
    function approveExchangeOnBehalf(address delegate) external {
        _setApproval(EXCHANGE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
<source file="systems/source-code/DelegateApprovals.sol" startline="104" endline="106" pcid="413">
    function approveIssueOnBehalf(address delegate) external {
        _setApproval(ISSUE_FOR_ADDRESS, msg.sender, delegate);
    }
</source>
</class>

<class classid="68" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Depot.sol" startline="477" endline="480" pcid="439">
    function synthetixReceivedForSynths(uint amount) public view returns (uint) {
        // And what would that be worth in SNX based on the current price?
        return amount.divideDecimal(exchangeRates().rateForCurrency(SNX));
    }
</source>
<source file="systems/source-code/Depot.sol" startline="500" endline="503" pcid="441">
    function synthsReceivedForEther(uint amount) public view returns (uint) {
        // How many synths would that amount of ether be worth?
        return amount.multiplyDecimal(exchangeRates().rateForCurrency(ETH));
    }
</source>
</class>

<class classid="69" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EmptyCollateralManager.sol" startline="16" endline="18" pcid="450">
    function long(bytes32) external view returns (uint amount) {
        return 0;
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="20" endline="22" pcid="451">
    function short(bytes32) external view returns (uint amount) {
        return 0;
    }
</source>
</class>

<class classid="70" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/EmptyCollateralManager.sol" startline="24" endline="26" pcid="452">
    function totalLong() external view returns (uint susdValue, bool anyRateIsInvalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="44" endline="46" pcid="2589">
    function assetPrice() external view returns (uint price, bool invalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="61" endline="63" pcid="484">
    function totalDebt() external view returns (uint debt, bool isInvalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="32" endline="34" pcid="454">
    function getBorrowRate() external view returns (uint borrowRate, bool anyRateIsInvalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="28" endline="30" pcid="453">
    function totalShort() external view returns (uint susdValue, bool anyRateIsInvalid) {
        return (0, false);
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="52" endline="54" pcid="2591">
    function marketDebt() external view returns (uint debt, bool isInvalid) {
        return (0, false);
    }
</source>
</class>

<class classid="71" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EmptyCollateralManager.sol" startline="70" endline="72" pcid="459">
    function areSynthsAndCurrenciesSet(bytes32[] calldata, bytes32[] calldata) external view returns (bool) {
        return false;
    }
</source>
<source file="systems/source-code/EmptyCollateralManager.sol" startline="74" endline="76" pcid="460">
    function areShortableSynthsSet(bytes32[] calldata, bytes32[] calldata) external view returns (bool) {
        return false;
    }
</source>
</class>

<class classid="72" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EmptyCollateralManager.sol" startline="79" endline="81" pcid="461">
    function getNewLoanId() external returns (uint id) {
        return 0;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="149" endline="151" pcid="2606">
    function recomputeFunding() external returns (uint lastIndex) {
        return 0;
    }
</source>
</class>

<class classid="73" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="39" endline="42" pcid="480">
    function allMarkets() external view returns (address[] memory) {
        address[] memory _markets;
        return _markets;
    }
</source>
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="70" endline="73" pcid="486">
    function allEndorsedAddresses() external view returns (address[] memory) {
        address[] memory _endorsedAddresses;
        return _endorsedAddresses;
    }
</source>
</class>

<class classid="74" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="65" endline="68" pcid="485">
    function isEndorsed(address account) external view returns (bool) {
        account;
        return false;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="109" endline="112" pcid="2603">
    function canLiquidate(address account) external view returns (bool) {
        account;
        return false;
    }
</source>
</class>

<class classid="75" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="75" endline="77" pcid="487">
    function addEndorsedAddresses(address[] calldata addresses) external {
        addresses;
    }
</source>
<source file="systems/source-code/EmptyFuturesMarketManager.sol" startline="79" endline="81" pcid="488">
    function removeEndorsedAddresses(address[] calldata addresses) external {
        addresses;
    }
</source>
</class>

<class classid="76" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/EtherWrapper.sol" startline="120" endline="122" pcid="520">
    function calculateMintFee(uint amount) public view returns (uint) {
        return amount.multiplyDecimalRound(mintFeeRate());
    }
</source>
<source file="systems/source-code/EtherWrapper.sol" startline="124" endline="126" pcid="521">
    function calculateBurnFee(uint amount) public view returns (uint) {
        return amount.multiplyDecimalRound(burnFeeRate());
    }
</source>
</class>

<class classid="77" nclones="4" nlines="6" similarity="100">
<source file="systems/source-code/ExchangeRates.sol" startline="105" endline="111" pcid="586">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = MixinSystemSettings.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_CIRCUIT_BREAKER;

        return combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/ImportableRewardEscrowV2Frozen.sol" startline="23" endline="28" pcid="919">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseRewardEscrowV2Frozen.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_SYNTHETIX_BRIDGE_BASE;
        return combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/ImportableRewardEscrowV2.sol" startline="18" endline="23" pcid="916">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseRewardEscrowV2.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_SYNTHETIX_BRIDGE_BASE;
        return combineArrays(existingAddresses, newAddresses);
    }
</source>
<source file="systems/source-code/RewardEscrowV2.sol" startline="22" endline="27" pcid="2123">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        bytes32[] memory existingAddresses = BaseRewardEscrowV2.resolverAddressesRequired();
        bytes32[] memory newAddresses = new bytes32[](1);
        newAddresses[0] = CONTRACT_SYNTHETIX_BRIDGE_OPTIMISM;
        return combineArrays(existingAddresses, newAddresses);
    }
</source>
</class>

<class classid="78" nclones="40" nlines="3" similarity="100">
<source file="systems/source-code/ExchangeRates.sol" startline="160" endline="162" pcid="593">
    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint) {
        return _getCurrentRoundId(currencyKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="238" endline="240" pcid="2407">
    function atomicExchangeFeeRate(bytes32 currencyKey) external view returns (uint) {
        return getAtomicExchangeFeeRate(currencyKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="232" endline="234" pcid="2406">
    function atomicEquivalentForDexPricing(bytes32 currencyKey) external view returns (address) {
        return getAtomicEquivalentForDexPricing(currencyKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="121" endline="123" pcid="2386">
    function exchangeFeeRate(bytes32 currencyKey) external view returns (uint) {
        return getExchangeFeeRate(currencyKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="59" endline="61" pcid="1934">
    function takerFeeDelayedOrder(bytes32 _marketKey) external view returns (uint) {
        return _takerFeeDelayedOrder(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="150" endline="152" pcid="1947">
    function maxDelayTimeDelta(bytes32 _marketKey) public view returns (uint) {
        return _maxDelayTimeDelta(_marketKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="244" endline="246" pcid="2408">
    function atomicVolatilityConsiderationWindow(bytes32 currencyKey) external view returns (uint) {
        return getAtomicVolatilityConsiderationWindow(currencyKey);
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="198" endline="200" pcid="596">
    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256) {
        return _getUpdatedTime(currencyKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="49" endline="51" pcid="885">
    function makerFee(bytes32 _marketKey) public view returns (uint) {
        return _makerFee(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="66" endline="68" pcid="1935">
    function makerFeeDelayedOrder(bytes32 _marketKey) public view returns (uint) {
        return _makerFeeDelayedOrder(_marketKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="256" endline="258" pcid="2410">
    function pureChainlinkPriceForAtomicSwapsEnabled(bytes32 currencyKey) external view returns (bool) {
        return getPureChainlinkPriceForAtomicSwapsEnabled(currencyKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="84" endline="86" pcid="890">
    function maxMarketValueUSD(bytes32 _marketKey) public view returns (uint) {
        return _maxMarketValueUSD(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="101" endline="103" pcid="1940">
    function offchainDelayedOrderMinAge(bytes32 _marketKey) public view returns (uint) {
        return _offchainDelayedOrderMinAge(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="122" endline="124" pcid="1943">
    function maxMarketValue(bytes32 _marketKey) public view returns (uint) {
        return _maxMarketValue(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="192" endline="194" pcid="1953">
    function maxPD(bytes32 _marketKey) public view returns (uint) {
        return _maxPD(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="45" endline="47" pcid="1932">
    function takerFee(bytes32 _marketKey) external view returns (uint) {
        return _takerFee(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="73" endline="75" pcid="1936">
    function takerFeeOffchainDelayedOrder(bytes32 _marketKey) external view returns (uint) {
        return _takerFeeOffchainDelayedOrder(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="178" endline="180" pcid="1951">
    function liquidationBufferRatio(bytes32 _marketKey) external view returns (uint) {
        return _liquidationBufferRatio(_marketKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="250" endline="252" pcid="2409">
    function atomicVolatilityUpdateThreshold(bytes32 currencyKey) external view returns (uint) {
        return getAtomicVolatilityUpdateThreshold(currencyKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="91" endline="93" pcid="891">
    function maxFundingRate(bytes32 _marketKey) public view returns (uint) {
        return _maxFundingRate(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="42" endline="44" pcid="884">
    function takerFee(bytes32 _marketKey) external view returns (uint) {
        return _takerFee(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="56" endline="58" pcid="886">
    function takerFeeNextPrice(bytes32 _marketKey) external view returns (uint) {
        return _takerFeeNextPrice(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="171" endline="173" pcid="1950">
    function liquidationPremiumMultiplier(bytes32 _marketKey) public view returns (uint) {
        return _liquidationPremiumMultiplier(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="87" endline="89" pcid="1938">
    function nextPriceConfirmWindow(bytes32 _marketKey) public view returns (uint) {
        return _nextPriceConfirmWindow(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="143" endline="145" pcid="1946">
    function minDelayTimeDelta(bytes32 _marketKey) public view returns (uint) {
        return _minDelayTimeDelta(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="94" endline="96" pcid="1939">
    function delayedOrderConfirmWindow(bytes32 _marketKey) public view returns (uint) {
        return _delayedOrderConfirmWindow(_marketKey);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="262" endline="264" pcid="2411">
    function crossChainSynthTransferEnabled(bytes32 currencyKey) external view returns (uint) {
        return getCrossChainSynthTransferEnabled(currencyKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="136" endline="138" pcid="1945">
    function maxFundingVelocity(bytes32 _marketKey) public view returns (uint) {
        return _maxFundingVelocity(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="185" endline="187" pcid="1952">
    function maxLiquidationDelta(bytes32 _marketKey) public view returns (uint) {
        return _maxLiquidationDelta(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="63" endline="65" pcid="887">
    function makerFeeNextPrice(bytes32 _marketKey) public view returns (uint) {
        return _makerFeeNextPrice(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="52" endline="54" pcid="1933">
    function makerFee(bytes32 _marketKey) public view returns (uint) {
        return _makerFee(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="70" endline="72" pcid="888">
    function nextPriceConfirmWindow(bytes32 _marketKey) public view returns (uint) {
        return _nextPriceConfirmWindow(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="129" endline="131" pcid="1944">
    function skewScale(bytes32 _marketKey) public view returns (uint) {
        return _skewScale(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="157" endline="159" pcid="1948">
    function offchainMarketKey(bytes32 _marketKey) public view returns (bytes32) {
        return _offchainMarketKey(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="164" endline="166" pcid="1949">
    function offchainPriceDivergence(bytes32 _marketKey) public view returns (uint) {
        return _offchainPriceDivergence(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="98" endline="100" pcid="892">
    function skewScaleUSD(bytes32 _marketKey) public view returns (uint) {
        return _skewScaleUSD(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="80" endline="82" pcid="1937">
    function makerFeeOffchainDelayedOrder(bytes32 _marketKey) public view returns (uint) {
        return _makerFeeOffchainDelayedOrder(_marketKey);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="77" endline="79" pcid="889">
    function maxLeverage(bytes32 _marketKey) public view returns (uint) {
        return _maxLeverage(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="108" endline="110" pcid="1941">
    function offchainDelayedOrderMaxAge(bytes32 _marketKey) public view returns (uint) {
        return _offchainDelayedOrderMaxAge(_marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="115" endline="117" pcid="1942">
    function maxLeverage(bytes32 _marketKey) public view returns (uint) {
        return _maxLeverage(_marketKey);
    }
</source>
</class>

<class classid="79" nclones="2" nlines="7" similarity="100">
<source file="systems/source-code/ExchangeRates.sol" startline="202" endline="210" pcid="597">
    function lastRateUpdateTimesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory) {
        uint[] memory lastUpdateTimes = new uint[](currencyKeys.length);

        for (uint i = 0; i < currencyKeys.length; i++) {
            lastUpdateTimes[i] = _getUpdatedTime(currencyKeys[i]);
        }

        return lastUpdateTimes;
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="304" endline="312" pcid="604">
    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory) {
        uint[] memory _localRates = new uint[](currencyKeys.length);

        for (uint i = 0; i < currencyKeys.length; i++) {
            _localRates[i] = _getRate(currencyKeys[i]);
        }

        return _localRates;
    }
</source>
</class>

<class classid="80" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/ExchangeRates.sol" startline="272" endline="274" pcid="602">
    function rateForCurrency(bytes32 currencyKey) external view returns (uint) {
        return _getRateAndUpdatedTime(currencyKey).rate;
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="552" endline="554" pcid="620">
    function _getRate(bytes32 currencyKey) internal view returns (uint256) {
        return _getRateAndUpdatedTime(currencyKey).rate;
    }
</source>
<source file="systems/source-code/ExchangeRates.sol" startline="556" endline="558" pcid="621">
    function _getUpdatedTime(bytes32 currencyKey) internal view returns (uint256) {
        return _getRateAndUpdatedTime(currencyKey).time;
    }
</source>
</class>

<class classid="81" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ExchangeRatesWithDexPricing.sol" startline="128" endline="130" pcid="634">
    function _getMinValue(uint x, uint y) internal pure returns (uint) {
        return x < y ? x : y;
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="848" endline="850" pcid="994">
    function _getMinValue(uint x, uint y) internal pure returns (uint) {
        return x < y ? x : y;
    }
</source>
</class>

<class classid="82" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/ExchangeSettlementLib.sol" startline="105" endline="114" pcid="654">
    function _reclaim(
        ResolvedAddresses memory resolvedAddresses,
        address from,
        bytes32 currencyKey,
        uint amount
    ) internal {
        // burn amount from user
        resolvedAddresses.issuer.synths(currencyKey).burn(from, amount);
        ISynthetixInternal(address(resolvedAddresses.synthetix)).emitExchangeReclaim(from, currencyKey, amount);
    }
</source>
<source file="systems/source-code/ExchangeSettlementLib.sol" startline="116" endline="125" pcid="655">
    function _refund(
        ResolvedAddresses memory resolvedAddresses,
        address from,
        bytes32 currencyKey,
        uint amount
    ) internal {
        // issue amount to user
        resolvedAddresses.issuer.synths(currencyKey).issue(from, amount);
        ISynthetixInternal(address(resolvedAddresses.synthetix)).emitExchangeRebate(from, currencyKey, amount);
    }
</source>
</class>

<class classid="83" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/ExchangeState.sol" startline="18" endline="20" pcid="663">
    function setMaxEntriesInQueue(uint _maxEntriesInQueue) external onlyOwner {
        maxEntriesInQueue = _maxEntriesInQueue;
    }
</source>
<source file="systems/source-code/Synth.sol" startline="184" endline="186" pcid="2253">
    function setTotalSupply(uint amount) external optionalProxy_onlyOwner {
        totalSupply = amount;
    }
</source>
<source file="systems/source-code/TestablePausable.sol" startline="14" endline="16" pcid="2573">
    function setSomeValue(uint _value) external notPaused {
        someValue = _value;
    }
</source>
<source file="systems/source-code/TestableTempOwned.sol" startline="13" endline="15" pcid="2629">
    function setTestValue(uint _testValue) external onlyTemporaryOwner {
        testValue = _testValue;
    }
</source>
</class>

<class classid="84" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/ExternStateToken.sol" startline="60" endline="62" pcid="670">
    function balanceOf(address account) external view returns (uint) {
        return tokenState.balanceOf(account);
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="10" endline="12" pcid="2547">
    function contains(address candidate) public view returns (bool) {
        return set.contains(candidate);
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="219" endline="221" pcid="2063">
    function isFlagged(address account) external view returns (bool) {
        return marketState.isFlagged(account);
    }
</source>
</class>

<class classid="85" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ExternStateToken.sol" startline="133" endline="135" pcid="676">
    function addressToBytes32(address input) internal pure returns (bytes32) {
        return bytes32(uint256(uint160(input)));
    }
</source>
<source file="systems/source-code/PerpsV2MarketProxyable.sol" startline="276" endline="278" pcid="1926">
    function addressToBytes32(address input) internal pure returns (bytes32) {
        return bytes32(uint256(uint160(input)));
    }
</source>
</class>

<class classid="86" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ExternStateToken.sol" startline="140" endline="146" pcid="677">
    function emitTransfer(
        address from,
        address to,
        uint value
    ) internal {
        proxy._emit(abi.encode(value), 3, TRANSFER_SIG, addressToBytes32(from), addressToBytes32(to), 0);
    }
</source>
<source file="systems/source-code/ExternStateToken.sol" startline="151" endline="157" pcid="678">
    function emitApproval(
        address owner,
        address spender,
        uint value
    ) internal {
        proxy._emit(abi.encode(value), 3, APPROVAL_SIG, addressToBytes32(owner), addressToBytes32(spender), 0);
    }
</source>
</class>

<class classid="87" nclones="2" nlines="8" similarity="100">
<source file="systems/source-code/FeePool.sol" startline="480" endline="490" pcid="713">
    function totalFeesAvailable() external view returns (uint) {
        uint totalFees = 0;

        // Fees in fee period [0] are not yet available for withdrawal
        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {
            totalFees = totalFees.add(_recentFeePeriodsStorage(i).feesToDistribute);
            totalFees = totalFees.sub(_recentFeePeriodsStorage(i).feesClaimed);
        }

        return totalFees;
    }
</source>
<source file="systems/source-code/FeePool.sol" startline="502" endline="512" pcid="715">
    function totalRewardsAvailable() external view returns (uint) {
        uint totalRewards = 0;

        // Rewards in fee period [0] are not yet available for withdrawal
        for (uint i = 1; i < FEE_PERIOD_LENGTH; i++) {
            totalRewards = totalRewards.add(_recentFeePeriodsStorage(i).rewardsToDistribute);
            totalRewards = totalRewards.sub(_recentFeePeriodsStorage(i).rewardsClaimed);
        }

        return totalRewards;
    }
</source>
</class>

<class classid="88" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/FlexibleStorage.sol" startline="69" endline="71" pcid="742">
    function getUIntValue(bytes32 contractName, bytes32 record) external view returns (uint) {
        return uintStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="125" endline="127" pcid="750">
    function getBytes32Value(bytes32 contractName, bytes32 record) external view returns (bytes32) {
        return bytes32Storage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="83" endline="85" pcid="744">
    function getIntValue(bytes32 contractName, bytes32 record) external view returns (int) {
        return intStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="97" endline="99" pcid="746">
    function getAddressValue(bytes32 contractName, bytes32 record) external view returns (address) {
        return addressStorage[hashes[contractName]][record];
    }
</source>
<source file="systems/source-code/FlexibleStorage.sol" startline="111" endline="113" pcid="748">
    function getBoolValue(bytes32 contractName, bytes32 record) external view returns (bool) {
        return boolStorage[hashes[contractName]][record];
    }
</source>
</class>

<class classid="89" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="307" endline="309" pcid="779">
    function _notionalValue(int positionSize, uint price) internal pure returns (int value) {
        return positionSize.multiplyDecimal(int(price));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="268" endline="270" pcid="1839">
    function _notionalValue(int positionSize, uint price) internal pure returns (int value) {
        return positionSize.multiplyDecimal(int(price));
    }
</source>
</class>

<class classid="90" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="311" endline="314" pcid="780">
    function _profitLoss(Position memory position, uint price) internal pure returns (int pnl) {
        int priceShift = int(price).sub(int(position.lastPrice));
        return int(position.size).multiplyDecimal(priceShift);
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="272" endline="275" pcid="1840">
    function _profitLoss(Position memory position, uint price) internal pure returns (int pnl) {
        int priceShift = int(price).sub(int(position.lastPrice));
        return int(position.size).multiplyDecimal(priceShift);
    }
</source>
</class>

<class classid="91" nclones="2" nlines="8" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="316" endline="323" pcid="781">
    function _accruedFunding(Position memory position, uint price) internal view returns (int funding) {
        uint lastModifiedIndex = position.lastFundingIndex;
        if (lastModifiedIndex == 0) {
            return 0; // The position does not exist -- no funding.
        }
        int net = _netFundingPerUnit(lastModifiedIndex, price);
        return int(position.size).multiplyDecimal(net);
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="277" endline="284" pcid="1841">
    function _accruedFunding(Position memory position, uint price) internal view returns (int funding) {
        uint lastModifiedIndex = position.lastFundingIndex;
        if (lastModifiedIndex == 0) {
            return 0; // The position does not exist -- no funding.
        }
        int net = _netFundingPerUnit(lastModifiedIndex, price);
        return int(position.size).multiplyDecimal(net);
    }
</source>
</class>

<class classid="92" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="328" endline="331" pcid="782">
    function _marginPlusProfitFunding(Position memory position, uint price) internal view returns (int) {
        int funding = _accruedFunding(position, price);
        return int(position.margin).add(_profitLoss(position, price)).add(funding);
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="289" endline="292" pcid="1842">
    function _marginPlusProfitFunding(Position memory position, uint price) internal view returns (int) {
        int funding = _accruedFunding(position, price);
        return int(position.margin).add(_profitLoss(position, price)).add(funding);
    }
</source>
</class>

<class classid="93" nclones="2" nlines="13" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="339" endline="358" pcid="783">
    function _recomputeMarginWithDelta(
        Position memory position,
        uint price,
        int marginDelta
    ) internal view returns (uint margin, Status statusCode) {
        int newMargin = _marginPlusProfitFunding(position, price).add(marginDelta);
        if (newMargin < 0) {
            return (0, Status.InsufficientMargin);
        }

        uint uMargin = uint(newMargin);
        int positionSize = int(position.size);
        // minimum margin beyond which position can be liquidated
        uint lMargin = _liquidationMargin(positionSize, price);
        if (positionSize != 0 && uMargin <= lMargin) {
            return (uMargin, Status.CanLiquidate);
        }

        return (uMargin, Status.Ok);
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="300" endline="319" pcid="1843">
    function _recomputeMarginWithDelta(
        Position memory position,
        uint price,
        int marginDelta
    ) internal view returns (uint margin, Status statusCode) {
        int newMargin = _marginPlusProfitFunding(position, price).add(marginDelta);
        if (newMargin < 0) {
            return (0, Status.InsufficientMargin);
        }

        uint uMargin = uint(newMargin);
        int positionSize = int(position.size);
        // minimum margin beyond which position can be liquidated
        uint lMargin = _liquidationMargin(positionSize, price);
        if (positionSize != 0 && uMargin <= lMargin) {
            return (uMargin, Status.CanLiquidate);
        }

        return (uMargin, Status.Ok);
    }
</source>
</class>

<class classid="94" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="360" endline="365" pcid="784">
    function _remainingMargin(Position memory position, uint price) internal view returns (uint) {
        int remaining = _marginPlusProfitFunding(position, price);

        // If the margin went past zero, the position should have been liquidated - return zero remaining margin.
        return uint(_max(0, remaining));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="321" endline="326" pcid="1844">
    function _remainingMargin(Position memory position, uint price) internal view returns (uint) {
        int remaining = _marginPlusProfitFunding(position, price);

        // If the margin went past zero, the position should have been liquidated - return zero remaining margin.
        return uint(_max(0, remaining));
    }
</source>
</class>

<class classid="95" nclones="2" nlines="6" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="423" endline="430" pcid="788">
    function _canLiquidate(Position memory position, uint price) internal view returns (bool) {
        // No liquidating empty positions.
        if (position.size == 0) {
            return false;
        }

        return _remainingMargin(position, price) <= _liquidationMargin(int(position.size), price);
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="433" endline="440" pcid="1850">
    function _canLiquidate(Position memory position, uint price) internal view returns (bool) {
        // No liquidating empty positions.
        if (position.size == 0) {
            return false;
        }

        return _remainingLiquidatableMargin(position, price) <= _liquidationMargin(int(position.size), price);
    }
</source>
</class>

<class classid="96" nclones="2" nlines="6" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="432" endline="443" pcid="789">
    function _currentLeverage(
        Position memory position,
        uint price,
        uint remainingMargin_
    ) internal pure returns (int leverage) {
        // No position is open, or it is ready to be liquidated; leverage goes to nil
        if (remainingMargin_ == 0) {
            return 0;
        }

        return _notionalValue(position.size, price).divideDecimal(int(remainingMargin_));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="442" endline="453" pcid="1851">
    function _currentLeverage(
        Position memory position,
        uint price,
        uint remainingMargin_
    ) internal pure returns (int leverage) {
        // No position is open, or it is ready to be liquidated; leverage goes to nil
        if (remainingMargin_ == 0) {
            return 0;
        }

        return _notionalValue(position.size, price).divideDecimal(int(remainingMargin_));
    }
</source>
</class>

<class classid="97" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="570" endline="572" pcid="794">
    function _signedAbs(int x) internal pure returns (int) {
        return x < 0 ? -x : x;
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="653" endline="655" pcid="1858">
    function _signedAbs(int x) internal pure returns (int) {
        return x < 0 ? -x : x;
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="197" endline="199" pcid="2184">
    function signedAbs(int x) internal pure returns (int) {
        return x < 0 ? -x : x;
    }
</source>
</class>

<class classid="98" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="577" endline="579" pcid="795">
    function _abs(int x) internal pure returns (uint) {
        return uint(_signedAbs(x));
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="660" endline="662" pcid="1859">
    function _abs(int x) internal pure returns (uint) {
        return uint(_signedAbs(x));
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="204" endline="206" pcid="2185">
    function abs(int x) internal pure returns (uint) {
        return uint(signedAbs(x));
    }
</source>
</class>

<class classid="99" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="581" endline="583" pcid="796">
    function _max(int x, int y) internal pure returns (int) {
        return x < y ? y : x;
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="664" endline="666" pcid="1860">
    function _max(int x, int y) internal pure returns (int) {
        return x < y ? y : x;
    }
</source>
</class>

<class classid="100" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="585" endline="587" pcid="797">
    function _min(int x, int y) internal pure returns (int) {
        return x < y ? x : y;
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="668" endline="670" pcid="1861">
    function _min(int x, int y) internal pure returns (int) {
        return x < y ? x : y;
    }
</source>
</class>

<class classid="101" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="598" endline="600" pcid="799">
    function _isError(Status status) internal pure returns (bool) {
        return status != Status.Ok;
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="683" endline="685" pcid="1863">
    function _isError(Status status) internal pure returns (bool) {
        return status != Status.Ok;
    }
</source>
</class>

<class classid="102" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="605" endline="609" pcid="800">
    function _revertIfError(bool isError, Status status) internal view {
        if (isError) {
            revert(_errorMessages[uint8(status)]);
        }
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="690" endline="694" pcid="1864">
    function _revertIfError(bool isError, Status status) internal view {
        if (isError) {
            revert(_errorMessages[uint8(status)]);
        }
    }
</source>
</class>

<class classid="103" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="614" endline="618" pcid="801">
    function _revertIfError(Status status) internal view {
        if (_isError(status)) {
            revert(_errorMessages[uint8(status)]);
        }
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="699" endline="703" pcid="1865">
    function _revertIfError(Status status) internal view {
        if (_isError(status)) {
            revert(_errorMessages[uint8(status)]);
        }
    }
</source>
</class>

<class classid="104" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="908" endline="910" pcid="814">
    function modifyPosition(int sizeDelta) external {
        _modifyPosition(sizeDelta, bytes32(0));
    }
</source>
<source file="systems/source-code/MixinFuturesNextPriceOrders.sol" startline="31" endline="33" pcid="1556">
    function submitNextPriceOrder(int sizeDelta) external {
        _submitNextPriceOrder(sizeDelta, bytes32(0));
    }
</source>
</class>

<class classid="105" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketBase.sol" startline="916" endline="918" pcid="815">
    function modifyPositionWithTracking(int sizeDelta, bytes32 trackingCode) external {
        _modifyPosition(sizeDelta, trackingCode);
    }
</source>
<source file="systems/source-code/MixinFuturesNextPriceOrders.sol" startline="37" endline="39" pcid="1557">
    function submitNextPriceOrderWithTracking(int sizeDelta, bytes32 trackingCode) external {
        _submitNextPriceOrder(sizeDelta, trackingCode);
    }
</source>
</class>

<class classid="106" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="110" endline="115" pcid="822">
    function _futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return
            IFuturesMarketManager(
                resolverProxy.requireAndGetAddress("FuturesMarketManager", "Missing FuturesMarketManager Address")
            );
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="107" endline="112" pcid="1866">
    function _futuresMarketManager() internal view returns (IFuturesMarketManager) {
        return
            IFuturesMarketManager(
                resolverProxy.requireAndGetAddress("FuturesMarketManager", "Missing FuturesMarketManager Address")
            );
    }
</source>
</class>

<class classid="107" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="124" endline="133" pcid="824">
    function globals() external view returns (FuturesGlobals memory) {
        IFuturesMarketSettings settings = _futuresMarketSettings();
        return
            FuturesGlobals({
                minInitialMargin: settings.minInitialMargin(),
                liquidationFeeRatio: settings.liquidationFeeRatio(),
                liquidationBufferRatio: settings.liquidationBufferRatio(),
                minKeeperFee: settings.minKeeperFee()
            });
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="121" endline="130" pcid="1868">
    function globals() external view returns (FuturesGlobals memory) {
        IPerpsV2MarketSettings settings = _perpsV2MarketSettings();
        return
            FuturesGlobals({
                minInitialMargin: settings.minInitialMargin(),
                liquidationFeeRatio: settings.liquidationFeeRatio(),
                minKeeperFee: settings.minKeeperFee(),
                maxKeeperFee: settings.maxKeeperFee()
            });
    }
</source>
</class>

<class classid="108" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="135" endline="137" pcid="825">
    function parameters(bytes32 marketKey) external view returns (IFuturesMarketSettings.Parameters memory) {
        return _parameters(marketKey);
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="132" endline="134" pcid="1869">
    function parameters(bytes32 marketKey) external view returns (IPerpsV2MarketSettings.Parameters memory) {
        return _parameters(marketKey);
    }
</source>
</class>

<class classid="109" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="194" endline="196" pcid="828">
    function marketSummaries(address[] calldata markets) external view returns (MarketSummary[] memory) {
        return _marketSummaries(markets);
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="228" endline="230" pcid="860">
    function marketSummaries(address[] calldata addresses) external view returns (MarketSummary[] memory) {
        return _marketSummaries(addresses);
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="191" endline="193" pcid="1873">
    function marketSummaries(address[] calldata markets) external view returns (MarketSummary[] memory) {
        return _marketSummaries(markets);
    }
</source>
</class>

<class classid="110" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="198" endline="200" pcid="829">
    function marketSummariesForKeys(bytes32[] calldata marketKeys) external view returns (MarketSummary[] memory) {
        return _marketSummaries(_futuresMarketManager().marketsForKeys(marketKeys));
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="195" endline="197" pcid="1874">
    function marketSummariesForKeys(bytes32[] calldata marketKeys) external view returns (MarketSummary[] memory) {
        return _marketSummaries(_futuresMarketManager().marketsForKeys(marketKeys));
    }
</source>
</class>

<class classid="111" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="202" endline="204" pcid="830">
    function allMarketSummaries() external view returns (MarketSummary[] memory) {
        return _marketSummaries(_futuresMarketManager().allMarkets());
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="199" endline="201" pcid="1875">
    function allMarketSummaries() external view returns (MarketSummary[] memory) {
        return _marketSummaries(_futuresMarketManager().allMarkets());
    }
</source>
</class>

<class classid="112" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="206" endline="212" pcid="831">
    function _fundingParameters(IFuturesMarketSettings.Parameters memory params)
        internal
        pure
        returns (FundingParameters memory)
    {
        return FundingParameters(params.maxFundingRate, params.skewScaleUSD);
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="207" endline="213" pcid="1877">
    function _fundingParameters(IPerpsV2MarketSettings.Parameters memory params)
        internal
        pure
        returns (FundingParameters memory)
    {
        return FundingParameters(params.maxFundingVelocity, params.skewScale);
    }
</source>
</class>

<class classid="113" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="214" endline="217" pcid="832">
    function _marketSizes(IFuturesMarket market) internal view returns (Sides memory) {
        (uint long, uint short) = market.marketSizes();
        return Sides(long, short);
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="215" endline="218" pcid="1878">
    function _marketSizes(IPerpsV2MarketViews market) internal view returns (Sides memory) {
        (uint long, uint short) = market.marketSizes();
        return Sides(long, short);
    }
</source>
</class>

<class classid="114" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="240" endline="242" pcid="834">
    function marketDetails(IFuturesMarket market) external view returns (MarketData memory) {
        return _marketDetails(market);
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="248" endline="250" pcid="1880">
    function marketDetails(IPerpsV2MarketViews market) external view returns (MarketData memory) {
        return _marketDetails(market);
    }
</source>
</class>

<class classid="115" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="244" endline="246" pcid="835">
    function marketDetailsForKey(bytes32 marketKey) external view returns (MarketData memory) {
        return _marketDetails(IFuturesMarket(_futuresMarketManager().marketForKey(marketKey)));
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="252" endline="254" pcid="1881">
    function marketDetailsForKey(bytes32 marketKey) external view returns (MarketData memory) {
        return _marketDetails(IPerpsV2MarketViews(_futuresMarketManager().marketForKey(marketKey)));
    }
</source>
</class>

<class classid="116" nclones="6" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="270" endline="273" pcid="837">
    function _notionalValue(IFuturesMarket market, address account) internal view returns (int) {
        (int value, ) = market.notionalValue(account);
        return value;
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="274" endline="277" pcid="1885">
    function _accruedFunding(IPerpsV2MarketViews market, address account) internal view returns (int) {
        (int value, ) = market.accruedFunding(account);
        return value;
    }
</source>
<source file="systems/source-code/FuturesMarketData.sol" startline="275" endline="278" pcid="838">
    function _profitLoss(IFuturesMarket market, address account) internal view returns (int) {
        (int value, ) = market.profitLoss(account);
        return value;
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="269" endline="272" pcid="1884">
    function _profitLoss(IPerpsV2MarketViews market, address account) internal view returns (int) {
        (int value, ) = market.profitLoss(account);
        return value;
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="264" endline="267" pcid="1883">
    function _notionalValue(IPerpsV2MarketViews market, address account) internal view returns (int) {
        (int value, ) = market.notionalValue(account);
        return value;
    }
</source>
<source file="systems/source-code/FuturesMarketData.sol" startline="280" endline="283" pcid="839">
    function _accruedFunding(IFuturesMarket market, address account) internal view returns (int) {
        (int value, ) = market.accruedFunding(account);
        return value;
    }
</source>
</class>

<class classid="117" nclones="4" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="285" endline="288" pcid="840">
    function _remainingMargin(IFuturesMarket market, address account) internal view returns (uint) {
        (uint value, ) = market.remainingMargin(account);
        return value;
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="279" endline="282" pcid="1886">
    function _remainingMargin(IPerpsV2MarketViews market, address account) internal view returns (uint) {
        (uint value, ) = market.remainingMargin(account);
        return value;
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="284" endline="287" pcid="1887">
    function _accessibleMargin(IPerpsV2MarketViews market, address account) internal view returns (uint) {
        (uint value, ) = market.accessibleMargin(account);
        return value;
    }
</source>
<source file="systems/source-code/FuturesMarketData.sol" startline="290" endline="293" pcid="841">
    function _accessibleMargin(IFuturesMarket market, address account) internal view returns (uint) {
        (uint value, ) = market.accessibleMargin(account);
        return value;
    }
</source>
</class>

<class classid="118" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="295" endline="298" pcid="842">
    function _liquidationPrice(IFuturesMarket market, address account) internal view returns (uint) {
        (uint liquidationPrice, ) = market.liquidationPrice(account);
        return liquidationPrice;
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="289" endline="292" pcid="1888">
    function _liquidationPrice(IPerpsV2MarketViews market, address account) internal view returns (uint) {
        (uint liquidationPrice, ) = market.liquidationPrice(account);
        return liquidationPrice;
    }
</source>
</class>

<class classid="119" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="300" endline="312" pcid="843">
    function _positionDetails(IFuturesMarket market, address account) internal view returns (PositionData memory) {
        return
            PositionData(
                _position(market, account),
                _notionalValue(market, account),
                _profitLoss(market, account),
                _accruedFunding(market, account),
                _remainingMargin(market, account),
                _accessibleMargin(market, account),
                _liquidationPrice(market, account),
                market.canLiquidate(account)
            );
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="294" endline="306" pcid="1889">
    function _positionDetails(IPerpsV2MarketViews market, address account) internal view returns (PositionData memory) {
        return
            PositionData(
                _position(market, account),
                _notionalValue(market, account),
                _profitLoss(market, account),
                _accruedFunding(market, account),
                _remainingMargin(market, account),
                _accessibleMargin(market, account),
                _liquidationPrice(market, account),
                market.canLiquidate(account)
            );
    }
</source>
</class>

<class classid="120" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="314" endline="316" pcid="844">
    function positionDetails(IFuturesMarket market, address account) external view returns (PositionData memory) {
        return _positionDetails(market, account);
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="308" endline="310" pcid="1890">
    function positionDetails(IPerpsV2MarketViews market, address account) external view returns (PositionData memory) {
        return _positionDetails(market, account);
    }
</source>
</class>

<class classid="121" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketData.sol" startline="318" endline="320" pcid="845">
    function positionDetailsForMarketKey(bytes32 marketKey, address account) external view returns (PositionData memory) {
        return _positionDetails(IFuturesMarket(_futuresMarketManager().marketForKey(marketKey)), account);
    }
</source>
<source file="systems/source-code/PerpsV2MarketData.sol" startline="312" endline="314" pcid="1891">
    function positionDetailsForMarketKey(bytes32 marketKey, address account) external view returns (PositionData memory) {
        return _positionDetails(IPerpsV2MarketViews(_futuresMarketManager().marketForKey(marketKey)), account);
    }
</source>
</class>

<class classid="122" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketManager.sol" startline="98" endline="100" pcid="850">
    function markets(uint index, uint pageSize) external view returns (address[] memory) {
        return _allMarkets.getPage(index, pageSize);
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="230" endline="232" pcid="1999">
    function getDelayedOrderAddressesPage(uint index, uint pageSize) external view returns (address[] memory) {
        return _delayedOrderAddresses.getPage(index, pageSize);
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="237" endline="239" pcid="2000">
    function getFlaggedAddressesPage(uint index, uint pageSize) external view returns (address[] memory) {
        return _flaggedAddresses.getPage(index, pageSize);
    }
</source>
</class>

<class classid="123" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketManager.sol" startline="120" endline="122" pcid="852">
    function numMarkets() external view returns (uint) {
        return _allMarkets.elements.length;
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="244" endline="246" pcid="2001">
    function getPositionAddressesLength() external view returns (uint) {
        return _positionAddresses.elements.length;
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="251" endline="253" pcid="2002">
    function getDelayedOrderAddressesLength() external view returns (uint) {
        return _delayedOrderAddresses.elements.length;
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="258" endline="260" pcid="2003">
    function getFlaggedAddressesLength() external view returns (uint) {
        return _flaggedAddresses.elements.length;
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="26" endline="28" pcid="2551">
    function size() public view returns (uint) {
        return set.elements.length;
    }
</source>
<source file="systems/source-code/TestableBytes32Set.sol" startline="26" endline="28" pcid="2558">
    function size() public view returns (uint) {
        return set.elements.length;
    }
</source>
</class>

<class classid="124" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketManager.sol" startline="138" endline="140" pcid="854">
    function allMarkets() public view returns (address[] memory) {
        return _allMarkets.getPage(0, _allMarkets.elements.length);
    }
</source>
<source file="systems/source-code/FuturesMarketManager.sol" startline="240" endline="242" pcid="863">
    function allEndorsedAddresses() external view returns (address[] memory) {
        return _endorsedAddresses.getPage(0, _endorsedAddresses.elements.length);
    }
</source>
<source file="systems/source-code/PerpsV2ExchangeRate.sol" startline="67" endline="69" pcid="1803">
    function associatedContracts() external view returns (address[] memory) {
        return _associatedContracts.getPage(0, _associatedContracts.elements.length);
    }
</source>
<source file="systems/source-code/StateShared.sol" startline="57" endline="59" pcid="2235">
    function associatedContracts() external view returns (address[] memory) {
        return _associatedContracts.getPage(0, _associatedContracts.elements.length);
    }
</source>
</class>

<class classid="125" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="163" endline="170" pcid="898">
    function _setParameter(
        bytes32 _marketKey,
        bytes32 key,
        uint value
    ) internal {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, keccak256(abi.encodePacked(_marketKey, key)), value);
        emit ParameterUpdated(_marketKey, key, value);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="266" endline="273" pcid="1960">
    function _setParameter(
        bytes32 _marketKey,
        bytes32 key,
        uint value
    ) internal {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, keccak256(abi.encodePacked(_marketKey, key)), value);
        emit ParameterUpdated(_marketKey, key, value);
    }
</source>
</class>

<class classid="126" nclones="5" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="172" endline="175" pcid="899">
    function setTakerFee(bytes32 _marketKey, uint _takerFee) public onlyOwner {
        require(_takerFee <= 1e18, "taker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_TAKER_FEE, _takerFee);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="285" endline="288" pcid="1963">
    function setTakerFeeDelayedOrder(bytes32 _marketKey, uint _takerFeeDelayedOrder) public onlyOwner {
        require(_takerFeeDelayedOrder <= 1e18, "taker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_TAKER_FEE_DELAYED_ORDER, _takerFeeDelayedOrder);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="295" endline="298" pcid="1965">
    function setTakerFeeOffchainDelayedOrder(bytes32 _marketKey, uint _takerFeeOffchainDelayedOrder) public onlyOwner {
        require(_takerFeeOffchainDelayedOrder <= 1e18, "taker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_TAKER_FEE_OFFCHAIN_DELAYED_ORDER, _takerFeeOffchainDelayedOrder);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="182" endline="185" pcid="901">
    function setTakerFeeNextPrice(bytes32 _marketKey, uint _takerFeeNextPrice) public onlyOwner {
        require(_takerFeeNextPrice <= 1e18, "taker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_TAKER_FEE_NEXT_PRICE, _takerFeeNextPrice);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="275" endline="278" pcid="1961">
    function setTakerFee(bytes32 _marketKey, uint _takerFee) public onlyOwner {
        require(_takerFee <= 1e18, "taker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_TAKER_FEE, _takerFee);
    }
</source>
</class>

<class classid="127" nclones="5" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="177" endline="180" pcid="900">
    function setMakerFee(bytes32 _marketKey, uint _makerFee) public onlyOwner {
        require(_makerFee <= 1e18, "maker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_MAKER_FEE, _makerFee);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="300" endline="303" pcid="1966">
    function setMakerFeeOffchainDelayedOrder(bytes32 _marketKey, uint _makerFeeOffchainDelayedOrder) public onlyOwner {
        require(_makerFeeOffchainDelayedOrder <= 1e18, "maker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_MAKER_FEE_OFFCHAIN_DELAYED_ORDER, _makerFeeOffchainDelayedOrder);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="187" endline="190" pcid="902">
    function setMakerFeeNextPrice(bytes32 _marketKey, uint _makerFeeNextPrice) public onlyOwner {
        require(_makerFeeNextPrice <= 1e18, "maker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_MAKER_FEE_NEXT_PRICE, _makerFeeNextPrice);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="290" endline="293" pcid="1964">
    function setMakerFeeDelayedOrder(bytes32 _marketKey, uint _makerFeeDelayedOrder) public onlyOwner {
        require(_makerFeeDelayedOrder <= 1e18, "maker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_MAKER_FEE_DELAYED_ORDER, _makerFeeDelayedOrder);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="280" endline="283" pcid="1962">
    function setMakerFee(bytes32 _marketKey, uint _makerFee) public onlyOwner {
        require(_makerFee <= 1e18, "maker fee greater than 1");
        _setParameter(_marketKey, PARAMETER_MAKER_FEE, _makerFee);
    }
</source>
</class>

<class classid="128" nclones="15" nlines="3" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="192" endline="194" pcid="903">
    function setNextPriceConfirmWindow(bytes32 _marketKey, uint _nextPriceConfirmWindow) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_NEXT_PRICE_CONFIRM_WINDOW, _nextPriceConfirmWindow);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="325" endline="327" pcid="1972">
    function setMaxMarketValue(bytes32 _marketKey, uint _maxMarketValue) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_MARKET_VALUE, _maxMarketValue);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="358" endline="360" pcid="1977">
    function setMaxDelayTimeDelta(bytes32 _marketKey, uint _maxDelayTimeDelta) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_DELAY_TIME_DELTA, _maxDelayTimeDelta);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="309" endline="311" pcid="1968">
    function setDelayedOrderConfirmWindow(bytes32 _marketKey, uint _delayedOrderConfirmWindow) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_DELAYED_ORDER_CONFIRM_WINDOW, _delayedOrderConfirmWindow);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="374" endline="376" pcid="1979">
    function setOffchainPriceDivergence(bytes32 _marketKey, uint _offchainPriceDivergence) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_OFFCHAIN_PRICE_DIVERGENCE, _offchainPriceDivergence);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="321" endline="323" pcid="1971">
    function setMaxLeverage(bytes32 _marketKey, uint _maxLeverage) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_LEVERAGE, _maxLeverage);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="383" endline="385" pcid="1981">
    function setLiquidationBufferRatio(bytes32 _marketKey, uint _ratio) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_LIQUIDATION_BUFFER_RATIO, _ratio);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="354" endline="356" pcid="1976">
    function setMinDelayTimeDelta(bytes32 _marketKey, uint _minDelayTimeDelta) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MIN_DELAY_TIME_DELTA, _minDelayTimeDelta);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="313" endline="315" pcid="1969">
    function setOffchainDelayedOrderMinAge(bytes32 _marketKey, uint _offchainDelayedOrderMinAge) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_OFFCHAIN_DELAYED_ORDER_MIN_AGE, _offchainDelayedOrderMinAge);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="317" endline="319" pcid="1970">
    function setOffchainDelayedOrderMaxAge(bytes32 _marketKey, uint _offchainDelayedOrderMaxAge) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_OFFCHAIN_DELAYED_ORDER_MAX_AGE, _offchainDelayedOrderMaxAge);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="305" endline="307" pcid="1967">
    function setNextPriceConfirmWindow(bytes32 _marketKey, uint _nextPriceConfirmWindow) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_NEXT_PRICE_CONFIRM_WINDOW, _nextPriceConfirmWindow);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="387" endline="389" pcid="1982">
    function setMaxLiquidationDelta(bytes32 _marketKey, uint _maxLiquidationDelta) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_LIQUIDAION_DELTA, _maxLiquidationDelta);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="200" endline="202" pcid="905">
    function setMaxMarketValueUSD(bytes32 _marketKey, uint _maxMarketValueUSD) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_MARKET_VALUE, _maxMarketValueUSD);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="196" endline="198" pcid="904">
    function setMaxLeverage(bytes32 _marketKey, uint _maxLeverage) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_LEVERAGE, _maxLeverage);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="391" endline="393" pcid="1983">
    function setMaxPD(bytes32 _marketKey, uint _maxPD) public onlyOwner {
        _setParameter(_marketKey, PARAMETER_MAX_LIQUIDATION_PD, _maxPD);
    }
</source>
</class>

<class classid="129" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="215" endline="218" pcid="907">
    function setMaxFundingRate(bytes32 _marketKey, uint _maxFundingRate) public onlyOwner {
        _recomputeFunding(_marketKey);
        _setParameter(_marketKey, PARAMETER_MAX_FUNDING_RATE, _maxFundingRate);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="343" endline="346" pcid="1974">
    function setMaxFundingVelocity(bytes32 _marketKey, uint _maxFundingVelocity) public onlyOwner {
        _recomputeFunding(_marketKey);
        _setParameter(_marketKey, PARAMETER_MAX_FUNDING_VELOCITY, _maxFundingVelocity);
    }
</source>
</class>

<class classid="130" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="220" endline="224" pcid="908">
    function setSkewScaleUSD(bytes32 _marketKey, uint _skewScaleUSD) public onlyOwner {
        require(_skewScaleUSD > 0, "cannot set skew scale 0");
        _recomputeFunding(_marketKey);
        _setParameter(_marketKey, PARAMETER_MIN_SKEW_SCALE, _skewScaleUSD);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="348" endline="352" pcid="1975">
    function setSkewScale(bytes32 _marketKey, uint _skewScale) public onlyOwner {
        require(_skewScale > 0, "cannot set skew scale 0");
        _recomputeFunding(_marketKey);
        _setParameter(_marketKey, PARAMETER_MIN_SKEW_SCALE, _skewScale);
    }
</source>
</class>

<class classid="131" nclones="8" nlines="4" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="256" endline="259" pcid="911">
    function setLiquidationFeeRatio(uint _ratio) external onlyOwner {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_FEE_RATIO, _ratio);
        emit LiquidationFeeRatioUpdated(_ratio);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="448" endline="451" pcid="1989">
    function setKeeperLiquidationFee(uint _keeperFee) external onlyOwner {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_KEEPER_LIQUIRATION_FEE, _keeperFee);
        emit KeeperLiquidationFeeUpdated(_keeperFee);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="326" endline="329" pcid="2421">
    function setLiquidationEscrowDuration(uint duration) external onlyOwner {
        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_ESCROW_DURATION, duration);
        emit LiquidationEscrowDurationUpdated(duration);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="437" endline="440" pcid="1987">
    function setLiquidationFeeRatio(uint _ratio) external onlyOwner {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_FEE_RATIO, _ratio);
        emit LiquidationFeeRatioUpdated(_ratio);
    }
</source>
<source file="systems/source-code/FuturesMarketSettings.sol" startline="261" endline="264" pcid="912">
    function setLiquidationBufferRatio(uint _ratio) external onlyOwner {
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_BUFFER_RATIO, _ratio);
        emit LiquidationBufferRatioUpdated(_ratio);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="346" endline="349" pcid="2425">
    function setFlagReward(uint reward) external onlyOwner {
        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_FLAG_REWARD, reward);
        emit FlagRewardUpdated(reward);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="351" endline="354" pcid="2426">
    function setLiquidateReward(uint reward) external onlyOwner {
        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATE_REWARD, reward);
        emit LiquidateRewardUpdated(reward);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="397" endline="401" pcid="2431">
    function setExchangeDynamicFeeRounds(uint rounds) external onlyOwner {
        flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_DYNAMIC_FEE_ROUNDS, rounds);

        emit ExchangeDynamicFeeRoundsUpdated(rounds);
    }
</source>
</class>

<class classid="132" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/FuturesMarketSettings.sol" startline="266" endline="270" pcid="913">
    function setMinInitialMargin(uint _minMargin) external onlyOwner {
        require(_minKeeperFee() <= _minMargin, "min margin < liquidation fee");
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_INITIAL_MARGIN, _minMargin);
        emit MinInitialMarginUpdated(_minMargin);
    }
</source>
<source file="systems/source-code/PerpsV2MarketSettings.sol" startline="442" endline="446" pcid="1988">
    function setMinInitialMargin(uint _minMargin) external onlyOwner {
        require(_minKeeperFee() <= _minMargin, "min margin < liquidation fee");
        _flexibleStorage().setUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_INITIAL_MARGIN, _minMargin);
        emit MinInitialMarginUpdated(_minMargin);
    }
</source>
</class>

<class classid="133" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="228" endline="230" pcid="942">
    function _debtShareBalanceOf(address account) internal view returns (uint) {
        return synthetixDebtShare().balanceOf(account);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="236" endline="238" pcid="944">
    function _rewardEscrowBalanceOf(address account) internal view returns (uint) {
        return rewardEscrowV2().balanceOf(account);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="232" endline="234" pcid="943">
    function _snxBalanceOf(address account) internal view returns (uint) {
        return synthetixERC20().balanceOf(account);
    }
</source>
</class>

<class classid="134" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="308" endline="311" pcid="949">
    function _lastIssueEvent(address account) internal view returns (uint) {
        //  Get the timestamp of the last issue this account made
        return flexibleStorage().getUIntValue(CONTRACT_NAME, keccak256(abi.encodePacked(LAST_ISSUE_EVENT, account)));
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="231" endline="237" pcid="1644">
    function getWrapperBurnFeeRate(address wrapper) internal view returns (int) {
        return
            flexibleStorage().getIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_WRAPPER_BURN_FEE_RATE, wrapper))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="247" endline="253" pcid="1646">
    function getCollapseFeeRate(address collateral) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_COLLAPSE_FEE_RATE, collateral))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="223" endline="229" pcid="1643">
    function getWrapperMintFeeRate(address wrapper) internal view returns (int) {
        return
            flexibleStorage().getIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_WRAPPER_MINT_FEE_RATE, wrapper))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="215" endline="221" pcid="1642">
    function getWrapperMaxTokenAmount(address wrapper) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_WRAPPER_MAX_TOKEN_AMOUNT, wrapper))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="239" endline="245" pcid="1645">
    function getInteractionDelay(address collateral) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_INTERACTION_DELAY, collateral))
            );
    }
</source>
</class>

<class classid="135" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="335" endline="337" pcid="951">
    function _snxToUSD(uint amount, uint snxRate) internal pure returns (uint) {
        return amount.multiplyDecimalRound(snxRate);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="339" endline="341" pcid="952">
    function _usdToSnx(uint amount, uint snxRate) internal pure returns (uint) {
        return amount.divideDecimalRound(snxRate);
    }
</source>
<source file="systems/source-code/PublicMath.sol" startline="11" endline="13" pcid="2092">
    function powerDecimal(uint x, uint y) public pure returns (uint) {
        return x.powDecimal(y);
    }
</source>
</class>

<class classid="136" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="672" endline="674" pcid="983">
    function issueMaxSynths(address from) external onlySynthetix {
        _issueSynths(from, 0, true);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="703" endline="705" pcid="988">
    function burnSynthsToTarget(address from) external onlySynthetix {
        _voluntaryBurnSynths(from, 0, true);
    }
</source>
</class>

<class classid="137" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="676" endline="683" pcid="984">
    function issueSynthsOnBehalf(
        address issueForAddress,
        address from,
        uint amount
    ) external onlySynthetix {
        _requireCanIssueOnBehalf(issueForAddress, from);
        _issueSynths(issueForAddress, amount, false);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="694" endline="701" pcid="987">
    function burnSynthsOnBehalf(
        address burnForAddress,
        address from,
        uint amount
    ) external onlySynthetix {
        _requireCanBurnOnBehalf(burnForAddress, from);
        _voluntaryBurnSynths(burnForAddress, amount, false);
    }
</source>
</class>

<class classid="138" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="685" endline="688" pcid="985">
    function issueMaxSynthsOnBehalf(address issueForAddress, address from) external onlySynthetix {
        _requireCanIssueOnBehalf(issueForAddress, from);
        _issueSynths(issueForAddress, 0, true);
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="707" endline="710" pcid="989">
    function burnSynthsToTargetOnBehalf(address burnForAddress, address from) external onlySynthetix {
        _requireCanBurnOnBehalf(burnForAddress, from);
        _voluntaryBurnSynths(burnForAddress, 0, true);
    }
</source>
</class>

<class classid="139" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/Issuer.sol" startline="868" endline="870" pcid="997">
    function _requireCanIssueOnBehalf(address issueForAddress, address from) internal view {
        require(delegateApprovals().canIssueFor(issueForAddress, from), "Not approved to act on behalf");
    }
</source>
<source file="systems/source-code/Issuer.sol" startline="872" endline="874" pcid="998">
    function _requireCanBurnOnBehalf(address burnForAddress, address from) internal view {
        require(delegateApprovals().canBurnFor(burnForAddress, from), "Not approved to act on behalf");
    }
</source>
</class>

<class classid="140" nclones="5" nlines="4" similarity="100">
<source file="systems/source-code/LegacyOwned.sol" startline="11" endline="14" pcid="1007">
    function nominateOwner(address _owner) external onlyOwner {
        nominatedOwner = _owner;
        emit OwnerNominated(_owner);
    }
</source>
<source file="systems/source-code/TemporarilyOwned.sol" startline="21" endline="24" pcid="2544">
    function nominateNewOwner(address _owner) external onlyTemporaryOwner {
        nominatedOwner = _owner;
        emit OwnerNominated(_owner);
    }
</source>
<source file="systems/source-code/State.sol" startline="23" endline="26" pcid="2231">
    function setAssociatedContract(address _associatedContract) external onlyOwner {
        associatedContract = _associatedContract;
        emit AssociatedContractUpdated(_associatedContract);
    }
</source>
<source file="systems/source-code/LegacyTokenState.sol" startline="22" endline="25" pcid="1009">
    function setAssociatedContract(address _associatedContract) external onlyOwner {
        associatedContract = _associatedContract;
        emit AssociatedContractUpdated(_associatedContract);
    }
</source>
<source file="systems/source-code/Owned.sol" startline="14" endline="17" pcid="1781">
    function nominateNewOwner(address _owner) external onlyOwner {
        nominatedOwner = _owner;
        emit OwnerNominated(_owner);
    }
</source>
</class>

<class classid="141" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/LegacyTokenState.sol" startline="27" endline="33" pcid="1010">
    function setAllowance(
        address tokenOwner,
        address spender,
        uint value
    ) external onlyAssociatedContract {
        allowance[tokenOwner][spender] = value;
    }
</source>
<source file="systems/source-code/TokenState.sol" startline="25" endline="31" pcid="2637">
    function setAllowance(
        address tokenOwner,
        address spender,
        uint value
    ) external onlyAssociatedContract {
        allowance[tokenOwner][spender] = value;
    }
</source>
</class>

<class classid="142" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/LegacyTokenState.sol" startline="35" endline="37" pcid="1011">
    function setBalanceOf(address account, uint value) external onlyAssociatedContract {
        balanceOf[account] = value;
    }
</source>
<source file="systems/source-code/TokenState.sol" startline="39" endline="41" pcid="2638">
    function setBalanceOf(address account, uint value) external onlyAssociatedContract {
        balanceOf[account] = value;
    }
</source>
</class>

<class classid="143" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/Liquidator.sol" startline="116" endline="119" pcid="1026">
    function getLiquidationDeadlineForAccount(address account) external view returns (uint) {
        LiquidationEntry memory liquidation = _getLiquidationEntryForAccount(account);
        return liquidation.deadline;
    }
</source>
<source file="systems/source-code/Liquidator.sol" startline="121" endline="124" pcid="1027">
    function getLiquidationCallerForAccount(address account) external view returns (address) {
        LiquidationEntry memory liquidation = _getLiquidationEntryForAccount(account);
        return liquidation.caller;
    }
</source>
</class>

<class classid="144" nclones="9" nlines="12" similarity="100">
<source file="systems/source-code/Migration_AludraOptimismStep1.sol" startline="57" endline="68" pcid="1051">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstatetrbperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstatetiaperp_i);
        contracts[6] = address(perpsv2marketstateimxperp_i);
        contracts[7] = address(perpsv2marketstatememeperp_i);
        contracts[8] = address(exchangerates_i);
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep4.sol" startline="57" endline="68" pcid="1501">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstatexlmperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstate1inchperp_i);
        contracts[6] = address(perpsv2marketstateeosperp_i);
        contracts[7] = address(perpsv2marketstateceloperp_i);
        contracts[8] = address(perpsv2marketstatealgoperp_i);
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep1.sol" startline="57" endline="68" pcid="1461">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstatebalperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstatefxsperp_i);
        contracts[6] = address(perpsv2marketstatekncperp_i);
        contracts[7] = address(perpsv2marketstaterndrperp_i);
        contracts[8] = address(exchangerates_i);
    }
</source>
<source file="systems/source-code/Migration_LarawagOptimismStep2.sol" startline="57" endline="68" pcid="1412">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstatexrpperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(perpsv2marketstatedotperp_i);
        contracts[5] = address(perpsv2marketstatetrxperp_i);
        contracts[6] = address(perpsv2marketstateflokiperp_i);
        contracts[7] = address(perpsv2marketstateinjperp_i);
        contracts[8] = address(systemstatus_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep2.sol" startline="65" endline="76" pcid="1163">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(systemstatus_i);
        contracts[2] = address(perpsv2marketstatebnbperp_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxybnbperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstateaxsperp_i);
        contracts[8] = address(perpsv2proxyaxsperp_i);
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep3.sol" startline="57" endline="68" pcid="1487">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstatezecperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstatextzperp_i);
        contracts[6] = address(perpsv2marketstateumaperp_i);
        contracts[7] = address(perpsv2marketstateenjperp_i);
        contracts[8] = address(perpsv2marketstateicpperp_i);
    }
</source>
<source file="systems/source-code/Migration_AludraOptimismStep2.sol" startline="57" endline="68" pcid="1063">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstatefetperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstategrtperp_i);
        contracts[6] = address(perpsv2marketstatepythperp_i);
        contracts[7] = address(perpsv2marketstateankrperp_i);
        contracts[8] = address(perpsv2marketstatebonkperp_i);
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep2.sol" startline="57" endline="68" pcid="1473">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstateoneperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstateperpperp_i);
        contracts[6] = address(perpsv2marketstatezilperp_i);
        contracts[7] = address(perpsv2marketstateruneperp_i);
        contracts[8] = address(perpsv2marketstatesushiperp_i);
    }
</source>
<source file="systems/source-code/Migration_AnkaaOptimismStep1.sol" startline="57" endline="68" pcid="1077">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](9);
        contracts[0] = address(perpsv2marketstateethbtcperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstateetcperp_i);
        contracts[6] = address(perpsv2marketstatecompperp_i);
        contracts[7] = address(perpsv2marketstatexmrperp_i);
        contracts[8] = address(exchangerates_i);
    }
</source>
</class>

<class classid="145" nclones="40" nlines="6" similarity="100">
<source file="systems/source-code/Migration_AludraOptimismStep1.sol" startline="262" endline="267" pcid="1053">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep3.sol" startline="176" endline="181" pcid="1266">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep2.sol" startline="176" endline="181" pcid="1254">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_MarkebOptimismStep1.sol" startline="146" endline="151" pcid="1428">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_LarawagOptimismStep1.sol" startline="237" endline="242" pcid="1404">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="284" endline="289" pcid="1374">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_EnifOptimismStep1.sol" startline="108" endline="113" pcid="1278">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_LarawagOptimismStep2.sol" startline="209" endline="214" pcid="1414">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep5.sol" startline="161" endline="166" pcid="1517">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="284" endline="289" pcid="1344">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep2.sol" startline="229" endline="234" pcid="1475">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep3.sol" startline="228" endline="233" pcid="1489">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep1.sol" startline="354" endline="359" pcid="1463">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep3.sol" startline="205" endline="210" pcid="1178">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep4.sol" startline="205" endline="210" pcid="1188">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep2.sol" startline="226" endline="231" pcid="1165">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep14.sol" startline="46" endline="51" pcid="1160">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep13.sol" startline="205" endline="210" pcid="1150">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Phecda.sol" startline="60" endline="65" pcid="1457">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_ScheatOptimismStep1.sol" startline="107" endline="112" pcid="1527">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep5.sol" startline="205" endline="210" pcid="1198">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep12.sol" startline="205" endline="210" pcid="1140">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep11.sol" startline="205" endline="210" pcid="1130">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep4.sol" startline="228" endline="233" pcid="1503">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="284" endline="289" pcid="1314">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep10.sol" startline="205" endline="210" pcid="1120">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep6.sol" startline="205" endline="210" pcid="1208">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep1.sol" startline="68" endline="73" pcid="1109">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep7.sol" startline="205" endline="210" pcid="1218">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Caph.sol" startline="51" endline="56" pcid="1103">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_NaosOptimism.sol" startline="84" endline="89" pcid="1450">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_AnkaaOptimismStep2.sol" startline="197" endline="202" pcid="1091">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_MerakOptimismStep1.sol" startline="110" endline="115" pcid="1436">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep8.sol" startline="205" endline="210" pcid="1228">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_AnkaaOptimismStep1.sol" startline="255" endline="260" pcid="1079">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="284" endline="289" pcid="1284">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep9.sol" startline="205" endline="210" pcid="1238">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_AludraOptimismStep2.sol" startline="228" endline="233" pcid="1065">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep1.sol" startline="184" endline="189" pcid="1248">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
<source file="systems/source-code/Migration_Naos.sol" startline="92" endline="97" pcid="1442">
    function acceptAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            Owned(contracts[i]).acceptOwnership();
        }
    }
</source>
</class>

<class classid="146" nclones="40" nlines="6" similarity="100">
<source file="systems/source-code/Migration_AludraOptimismStep1.sol" startline="269" endline="274" pcid="1054">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep5.sol" startline="212" endline="217" pcid="1199">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_AnkaaOptimismStep2.sol" startline="204" endline="209" pcid="1092">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep2.sol" startline="183" endline="188" pcid="1255">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep10.sol" startline="212" endline="217" pcid="1121">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep3.sol" startline="183" endline="188" pcid="1267">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep7.sol" startline="212" endline="217" pcid="1219">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep14.sol" startline="53" endline="58" pcid="1161">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_Caph.sol" startline="58" endline="63" pcid="1104">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="291" endline="296" pcid="1375">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep3.sol" startline="235" endline="240" pcid="1490">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep1.sol" startline="75" endline="80" pcid="1110">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep4.sol" startline="235" endline="240" pcid="1504">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_ScheatOptimismStep1.sol" startline="114" endline="119" pcid="1528">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep4.sol" startline="212" endline="217" pcid="1189">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_AnkaaOptimismStep1.sol" startline="262" endline="267" pcid="1080">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep5.sol" startline="168" endline="173" pcid="1518">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep2.sol" startline="236" endline="241" pcid="1476">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="291" endline="296" pcid="1285">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_LarawagOptimismStep2.sol" startline="216" endline="221" pcid="1415">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep12.sol" startline="212" endline="217" pcid="1141">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_LarawagOptimismStep1.sol" startline="244" endline="249" pcid="1405">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_NaosOptimism.sol" startline="91" endline="96" pcid="1451">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_MarkebOptimismStep1.sol" startline="153" endline="158" pcid="1429">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep3.sol" startline="212" endline="217" pcid="1179">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_Naos.sol" startline="99" endline="104" pcid="1443">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep1.sol" startline="361" endline="366" pcid="1464">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep11.sol" startline="212" endline="217" pcid="1131">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_MerakOptimismStep1.sol" startline="117" endline="122" pcid="1437">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep2.sol" startline="233" endline="238" pcid="1166">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep9.sol" startline="212" endline="217" pcid="1239">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="291" endline="296" pcid="1345">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep13.sol" startline="212" endline="217" pcid="1151">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_EnifOptimismStep1.sol" startline="115" endline="120" pcid="1279">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_Phecda.sol" startline="67" endline="72" pcid="1458">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep8.sol" startline="212" endline="217" pcid="1229">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="291" endline="296" pcid="1315">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep1.sol" startline="191" endline="196" pcid="1249">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep6.sol" startline="212" endline="217" pcid="1209">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
<source file="systems/source-code/Migration_AludraOptimismStep2.sol" startline="235" endline="240" pcid="1066">
    function nominateAll() internal {
        address[] memory contracts = contractsRequiringOwnership();
        for (uint i = 0; i < contracts.length; i++) {
            returnOwnership(contracts[i]);
        }
    }
</source>
</class>

<class classid="147" nclones="4" nlines="11" similarity="100">
<source file="systems/source-code/Migration_AnkaaOptimismStep2.sol" startline="54" endline="64" pcid="1089">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](8);
        contracts[0] = address(perpsv2marketstatemkrperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstateyfiperp_i);
        contracts[6] = address(perpsv2marketstatemavperp_i);
        contracts[7] = address(perpsv2marketstaterplperp_i);
    }
</source>
<source file="systems/source-code/Migration_LarawagOptimismStep1.sol" startline="54" endline="64" pcid="1402">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](8);
        contracts[0] = address(perpsv2marketstatepepeperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstatesuiperp_i);
        contracts[6] = address(perpsv2marketstateblurperp_i);
        contracts[7] = address(exchangerates_i);
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep3.sol" startline="54" endline="64" pcid="1264">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](8);
        contracts[0] = address(perpsv2marketstateaptperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(perpsv2marketstateshibperp_i);
        contracts[5] = address(perpsv2marketstatebchperp_i);
        contracts[6] = address(perpsv2marketstatecrvperp_i);
        contracts[7] = address(systemstatus_i);
    }
</source>
<source file="systems/source-code/Migration_DschubbaOptimismStep2.sol" startline="54" endline="64" pcid="1252">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](8);
        contracts[0] = address(perpsv2marketstateltcperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(perpsv2marketstateadaperp_i);
        contracts[5] = address(perpsv2marketstatefilperp_i);
        contracts[6] = address(perpsv2marketstategmxperp_i);
        contracts[7] = address(systemstatus_i);
    }
</source>
</class>

<class classid="148" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/Migration_Caph.sol" startline="32" endline="35" pcid="1101">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](1);
        contracts[0] = address(addressresolver_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep14.sol" startline="30" endline="33" pcid="1158">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](1);
        contracts[0] = address(perpsv2exchangerate_i);
    }
</source>
</class>

<class classid="149" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep1.sol" startline="42" endline="46" pcid="1107">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](2);
        contracts[0] = address(futuresmarketmanager_i);
        contracts[1] = address(addressresolver_i);
    }
</source>
<source file="systems/source-code/Migration_Phecda.sol" startline="36" endline="40" pcid="1455">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](2);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(rewardsdistribution_i);
    }
</source>
</class>

<class classid="150" nclones="2" nlines="13" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep1.sol" startline="161" endline="176" pcid="1116">
    function addressresolver_importAddresses_5() internal {
        bytes32[] memory addressresolver_importAddresses_names_5_0 = new bytes32[](4);
        addressresolver_importAddresses_names_5_0[0] = bytes32("FuturesMarketManager");
        addressresolver_importAddresses_names_5_0[1] = bytes32("PerpsV2MarketData");
        addressresolver_importAddresses_names_5_0[2] = bytes32("PerpsV2ExchangeRate");
        addressresolver_importAddresses_names_5_0[3] = bytes32("PerpsV2MarketSettings");
        address[] memory addressresolver_importAddresses_destinations_5_1 = new address[](4);
        addressresolver_importAddresses_destinations_5_1[0] = address(new_FuturesMarketManager_contract);
        addressresolver_importAddresses_destinations_5_1[1] = address(new_PerpsV2MarketData_contract);
        addressresolver_importAddresses_destinations_5_1[2] = address(new_PerpsV2ExchangeRate_contract);
        addressresolver_importAddresses_destinations_5_1[3] = address(new_PerpsV2MarketSettings_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_5_0,
            addressresolver_importAddresses_destinations_5_1
        );
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep2.sol" startline="308" endline="323" pcid="1173">
    function addressresolver_importAddresses_121() internal {
        bytes32[] memory addressresolver_importAddresses_names_121_0 = new bytes32[](4);
        addressresolver_importAddresses_names_121_0[0] = bytes32("FuturesMarketManager");
        addressresolver_importAddresses_names_121_0[1] = bytes32("PerpsV2MarketData");
        addressresolver_importAddresses_names_121_0[2] = bytes32("PerpsV2ExchangeRate");
        addressresolver_importAddresses_names_121_0[3] = bytes32("PerpsV2MarketSettings");
        address[] memory addressresolver_importAddresses_destinations_121_1 = new address[](4);
        addressresolver_importAddresses_destinations_121_1[0] = address(new_FuturesMarketManager_contract);
        addressresolver_importAddresses_destinations_121_1[1] = address(new_PerpsV2MarketData_contract);
        addressresolver_importAddresses_destinations_121_1[2] = address(new_PerpsV2ExchangeRate_contract);
        addressresolver_importAddresses_destinations_121_1[3] = address(new_PerpsV2MarketSettings_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_121_0,
            addressresolver_importAddresses_destinations_121_1
        );
    }
</source>
</class>

<class classid="151" nclones="11" nlines="13" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep10.sol" startline="59" endline="71" pcid="1118">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstatelinkperp_i);
        contracts[2] = address(perpsv2marketstatelinkperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxylinkperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstateopperp_i);
        contracts[8] = address(perpsv2marketstateopperplegacy_i);
        contracts[9] = address(perpsv2proxyopperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep11.sol" startline="59" endline="71" pcid="1128">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstatesolperp_i);
        contracts[2] = address(perpsv2marketstatesolperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxysolperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstatexauperp_i);
        contracts[8] = address(perpsv2marketstatexauperplegacy_i);
        contracts[9] = address(perpsv2proxyxauperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep9.sol" startline="59" endline="71" pcid="1236">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstatematicperp_i);
        contracts[2] = address(perpsv2marketstatematicperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxymaticperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstatedogeperp_i);
        contracts[8] = address(perpsv2marketstatedogeperplegacy_i);
        contracts[9] = address(perpsv2proxydogeperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep7.sol" startline="59" endline="71" pcid="1216">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstateuniperp_i);
        contracts[2] = address(perpsv2marketstateuniperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxyuniperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstateatomperp_i);
        contracts[8] = address(perpsv2marketstateatomperplegacy_i);
        contracts[9] = address(perpsv2proxyatomperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep13.sol" startline="59" endline="71" pcid="1148">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstateethperp_i);
        contracts[2] = address(perpsv2marketstateethperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxyethperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstatebtcperp_i);
        contracts[8] = address(perpsv2marketstatebtcperplegacy_i);
        contracts[9] = address(perpsv2proxybtcperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep3.sol" startline="59" endline="71" pcid="1176">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstateaaveperp_i);
        contracts[2] = address(perpsv2marketstateaaveperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxyaaveperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstateflowperp_i);
        contracts[8] = address(perpsv2marketstateflowperplegacy_i);
        contracts[9] = address(perpsv2proxyflowperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep12.sol" startline="59" endline="71" pcid="1138">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstateavaxperp_i);
        contracts[2] = address(perpsv2marketstateavaxperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxyavaxperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstatearbperp_i);
        contracts[8] = address(perpsv2marketstatearbperplegacy_i);
        contracts[9] = address(perpsv2proxyarbperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep4.sol" startline="59" endline="71" pcid="1186">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstatenearperp_i);
        contracts[2] = address(perpsv2marketstatenearperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxynearperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstateaudperp_i);
        contracts[8] = address(perpsv2marketstateaudperplegacy_i);
        contracts[9] = address(perpsv2proxyaudperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep5.sol" startline="59" endline="71" pcid="1196">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstatedydxperp_i);
        contracts[2] = address(perpsv2marketstatedydxperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxydydxperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstategbpperp_i);
        contracts[8] = address(perpsv2marketstategbpperplegacy_i);
        contracts[9] = address(perpsv2proxygbpperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep8.sol" startline="59" endline="71" pcid="1226">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstatexagperp_i);
        contracts[2] = address(perpsv2marketstatexagperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxyxagperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstateeurperp_i);
        contracts[8] = address(perpsv2marketstateeurperplegacy_i);
        contracts[9] = address(perpsv2proxyeurperp_i);
    }
</source>
<source file="systems/source-code/Migration_CaphOptimismStep6.sol" startline="59" endline="71" pcid="1206">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](10);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstateapeperp_i);
        contracts[2] = address(perpsv2marketstateapeperplegacy_i);
        contracts[3] = address(perpsv2exchangerate_i);
        contracts[4] = address(perpsv2proxyapeperp_i);
        contracts[5] = address(futuresmarketmanager_i);
        contracts[6] = address(perpsv2marketsettings_i);
        contracts[7] = address(perpsv2marketstateftmperp_i);
        contracts[8] = address(perpsv2marketstateftmperplegacy_i);
        contracts[9] = address(perpsv2proxyftmperp_i);
    }
</source>
</class>

<class classid="152" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep10.sol" startline="240" endline="248" pcid="1124">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x31A1659Ca00F617E86Dc765B6494Afe70a5A9c1A
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="429" endline="437" pcid="1387">
    function futuresmarketmanager_updateMarketsImplementations_56() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0[0] = address(
            0x31A1659Ca00F617E86Dc765B6494Afe70a5A9c1A
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0
        );
    }
</source>
</class>

<class classid="153" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep10.sol" startline="271" endline="279" pcid="1127">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x442b69937a0daf9D46439a71567fABE6Cb69FBaf
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="476" endline="484" pcid="1361">
    function futuresmarketmanager_updateMarketsImplementations_75() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0[0] = address(
            0x442b69937a0daf9D46439a71567fABE6Cb69FBaf
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0
        );
    }
</source>
</class>

<class classid="154" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep11.sol" startline="240" endline="248" pcid="1134">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x0EA09D97b4084d859328ec4bF8eBCF9ecCA26F1D
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="476" endline="484" pcid="1391">
    function futuresmarketmanager_updateMarketsImplementations_75() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0[0] = address(
            0x0EA09D97b4084d859328ec4bF8eBCF9ecCA26F1D
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0
        );
    }
</source>
</class>

<class classid="155" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep11.sol" startline="271" endline="279" pcid="1137">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x549dbDFfbd47bD5639f9348eBE82E63e2f9F777A
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="523" endline="531" pcid="1365">
    function futuresmarketmanager_updateMarketsImplementations_94() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0[0] = address(
            0x549dbDFfbd47bD5639f9348eBE82E63e2f9F777A
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0
        );
    }
</source>
</class>

<class classid="156" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep12.sol" startline="240" endline="248" pcid="1144">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0xc203A12F298CE73E44F7d45A4f59a43DBfFe204D
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="523" endline="531" pcid="1395">
    function futuresmarketmanager_updateMarketsImplementations_94() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0[0] = address(
            0xc203A12F298CE73E44F7d45A4f59a43DBfFe204D
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0
        );
    }
</source>
</class>

<class classid="157" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep12.sol" startline="271" endline="279" pcid="1147">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x509072A5aE4a87AC89Fc8D64D94aDCb44Bd4b88e
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="570" endline="578" pcid="1399">
    function futuresmarketmanager_updateMarketsImplementations_113() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0[0] = address(
            0x509072A5aE4a87AC89Fc8D64D94aDCb44Bd4b88e
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0
        );
    }
</source>
</class>

<class classid="158" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep13.sol" startline="240" endline="248" pcid="1154">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x2B3bb4c683BFc5239B029131EEf3B1d214478d93
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="335" endline="343" pcid="1379">
    function futuresmarketmanager_updateMarketsImplementations_18() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0[0] = address(
            0x2B3bb4c683BFc5239B029131EEf3B1d214478d93
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0
        );
    }
</source>
</class>

<class classid="159" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep13.sol" startline="271" endline="279" pcid="1157">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x59b007E9ea8F89b069c43F8f45834d30853e3699
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="382" endline="390" pcid="1383">
    function futuresmarketmanager_updateMarketsImplementations_37() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0[0] = address(
            0x59b007E9ea8F89b069c43F8f45834d30853e3699
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0
        );
    }
</source>
</class>

<class classid="160" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep14.sol" startline="35" endline="44" pcid="1159">
    function migrate() external onlyOwner {
        // ACCEPT OWNERSHIP for all contracts that require ownership to make changes
        acceptAll();

        // MIGRATION
        perpsv2exchangerate_removeAssociatedContracts_0();

        // NOMINATE OWNERSHIP back to owner for aforementioned contracts
        nominateAll();
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="69" endline="73" pcid="2495">
    function requireFuturesActive() external view {
        _internalRequireSystemActive();
        _internalRequireExchangeActive();
        _internalRequireFuturesActive();
    }
</source>
</class>

<class classid="161" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep2.sol" startline="268" endline="272" pcid="1169">
    function futuresmarketmanager_addProxiedMarkets_58() internal {
        address[] memory futuresmarketmanager_addProxiedMarkets_marketsToAdd_58_0 = new address[](1);
        futuresmarketmanager_addProxiedMarkets_marketsToAdd_58_0[0] = address(0x0940B0A96C5e1ba33AEE331a9f950Bb2a6F2Fb25);
        futuresmarketmanager_i.addProxiedMarkets(futuresmarketmanager_addProxiedMarkets_marketsToAdd_58_0);
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="429" endline="437" pcid="1357">
    function futuresmarketmanager_updateMarketsImplementations_56() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0[0] = address(
            0x0940B0A96C5e1ba33AEE331a9f950Bb2a6F2Fb25
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0
        );
    }
</source>
</class>

<class classid="162" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep2.sol" startline="302" endline="306" pcid="1172">
    function futuresmarketmanager_addProxiedMarkets_120() internal {
        address[] memory futuresmarketmanager_addProxiedMarkets_marketsToAdd_120_0 = new address[](1);
        futuresmarketmanager_addProxiedMarkets_marketsToAdd_120_0[0] = address(0x3a52b21816168dfe35bE99b7C5fc209f17a0aDb1);
        futuresmarketmanager_i.addProxiedMarkets(futuresmarketmanager_addProxiedMarkets_marketsToAdd_120_0);
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="570" endline="578" pcid="1339">
    function futuresmarketmanager_updateMarketsImplementations_113() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0[0] = address(
            0x3a52b21816168dfe35bE99b7C5fc209f17a0aDb1
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0
        );
    }
</source>
</class>

<class classid="163" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep3.sol" startline="240" endline="248" pcid="1182">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x5374761526175B59f1E583246E20639909E189cE
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="335" endline="343" pcid="1289">
    function futuresmarketmanager_updateMarketsImplementations_18() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0[0] = address(
            0x5374761526175B59f1E583246E20639909E189cE
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0
        );
    }
</source>
</class>

<class classid="164" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep3.sol" startline="271" endline="279" pcid="1185">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x27665271210aCff4Fab08AD9Bb657E91866471F0
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="429" endline="437" pcid="1297">
    function futuresmarketmanager_updateMarketsImplementations_56() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0[0] = address(
            0x27665271210aCff4Fab08AD9Bb657E91866471F0
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0
        );
    }
</source>
</class>

<class classid="165" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep4.sol" startline="240" endline="248" pcid="1192">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0xC8fCd6fB4D15dD7C455373297dEF375a08942eCe
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="476" endline="484" pcid="1301">
    function futuresmarketmanager_updateMarketsImplementations_75() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0[0] = address(
            0xC8fCd6fB4D15dD7C455373297dEF375a08942eCe
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0
        );
    }
</source>
</class>

<class classid="166" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep4.sol" startline="271" endline="279" pcid="1195">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x9De146b5663b82F44E5052dEDe2aA3Fd4CBcDC99
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="523" endline="531" pcid="1305">
    function futuresmarketmanager_updateMarketsImplementations_94() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0[0] = address(
            0x9De146b5663b82F44E5052dEDe2aA3Fd4CBcDC99
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0
        );
    }
</source>
</class>

<class classid="167" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep5.sol" startline="240" endline="248" pcid="1202">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x139F94E4f0e1101c1464a321CBA815c34d58B5D9
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="382" endline="390" pcid="1353">
    function futuresmarketmanager_updateMarketsImplementations_37() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0[0] = address(
            0x139F94E4f0e1101c1464a321CBA815c34d58B5D9
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0
        );
    }
</source>
</class>

<class classid="168" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep5.sol" startline="271" endline="279" pcid="1205">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x1dAd8808D8aC58a0df912aDC4b215ca3B93D6C49
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="570" endline="578" pcid="1309">
    function futuresmarketmanager_updateMarketsImplementations_113() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0[0] = address(
            0x1dAd8808D8aC58a0df912aDC4b215ca3B93D6C49
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0
        );
    }
</source>
</class>

<class classid="169" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep6.sol" startline="240" endline="248" pcid="1212">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x5B6BeB79E959Aac2659bEE60fE0D0885468BF886
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="382" endline="390" pcid="1323">
    function futuresmarketmanager_updateMarketsImplementations_37() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0[0] = address(
            0x5B6BeB79E959Aac2659bEE60fE0D0885468BF886
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0
        );
    }
</source>
</class>

<class classid="170" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep6.sol" startline="271" endline="279" pcid="1215">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0xC18f85A6DD3Bcd0516a1CA08d3B1f0A4E191A2C4
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="570" endline="578" pcid="1369">
    function futuresmarketmanager_updateMarketsImplementations_113() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0[0] = address(
            0xC18f85A6DD3Bcd0516a1CA08d3B1f0A4E191A2C4
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_113_0
        );
    }
</source>
</class>

<class classid="171" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep7.sol" startline="240" endline="248" pcid="1222">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x4308427C463CAEAaB50FFf98a9deC569C31E4E87
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="335" endline="343" pcid="1319">
    function futuresmarketmanager_updateMarketsImplementations_18() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0[0] = address(
            0x4308427C463CAEAaB50FFf98a9deC569C31E4E87
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0
        );
    }
</source>
</class>

<class classid="172" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep7.sol" startline="271" endline="279" pcid="1225">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0xbB16C7B3244DFA1a6BF83Fcce3EE4560837763CD
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="523" endline="531" pcid="1335">
    function futuresmarketmanager_updateMarketsImplementations_94() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0[0] = address(
            0xbB16C7B3244DFA1a6BF83Fcce3EE4560837763CD
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_94_0
        );
    }
</source>
</class>

<class classid="173" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep8.sol" startline="240" endline="248" pcid="1232">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0xdcB8438c979fA030581314e5A5Df42bbFEd744a0
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="382" endline="390" pcid="1293">
    function futuresmarketmanager_updateMarketsImplementations_37() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0[0] = address(
            0xdcB8438c979fA030581314e5A5Df42bbFEd744a0
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_37_0
        );
    }
</source>
</class>

<class classid="174" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep8.sol" startline="271" endline="279" pcid="1235">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x87AE62c5720DAB812BDacba66cc24839440048d1
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="476" endline="484" pcid="1331">
    function futuresmarketmanager_updateMarketsImplementations_75() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0[0] = address(
            0x87AE62c5720DAB812BDacba66cc24839440048d1
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_75_0
        );
    }
</source>
</class>

<class classid="175" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep9.sol" startline="240" endline="248" pcid="1242">
    function futuresmarketmanager_updateMarketsImplementations_57() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0[0] = address(
            0x074B8F19fc91d6B2eb51143E1f186Ca0DDB88042
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_57_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="335" endline="343" pcid="1349">
    function futuresmarketmanager_updateMarketsImplementations_18() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0[0] = address(
            0x074B8F19fc91d6B2eb51143E1f186Ca0DDB88042
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_18_0
        );
    }
</source>
</class>

<class classid="176" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/Migration_CaphOptimismStep9.sol" startline="271" endline="279" pcid="1245">
    function futuresmarketmanager_updateMarketsImplementations_117() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0[0] = address(
            0x98cCbC721cc05E28a125943D69039B39BE6A21e9
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_117_0
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="429" endline="437" pcid="1327">
    function futuresmarketmanager_updateMarketsImplementations_56() internal {
        address[] memory futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0 = new address[](1);
        futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0[0] = address(
            0x98cCbC721cc05E28a125943D69039B39BE6A21e9
        );
        futuresmarketmanager_i.updateMarketsImplementations(
            futuresmarketmanager_updateMarketsImplementations_marketsToUpdate_56_0
        );
    }
</source>
</class>

<class classid="177" nclones="5" nlines="9" similarity="100">
<source file="systems/source-code/Migration_DschubbaOptimismStep1.sol" startline="48" endline="56" pcid="1246">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](6);
        contracts[0] = address(perpsv2marketstateldoperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(exchangerates_i);
    }
</source>
<source file="systems/source-code/Migration_NaosOptimism.sol" startline="50" endline="58" pcid="1448">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](6);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(proxysynthetix_i);
        contracts[2] = address(systemstatus_i);
        contracts[3] = address(tokenstatesynthetix_i);
        contracts[4] = address(rewardsdistribution_i);
        contracts[5] = address(issuer_i);
    }
</source>
<source file="systems/source-code/Migration_MerakOptimismStep1.sol" startline="48" endline="56" pcid="1434">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](6);
        contracts[0] = address(systemstatus_i);
        contracts[1] = address(perpsv2marketstatestethperp_i);
        contracts[2] = address(perpsv2exchangerate_i);
        contracts[3] = address(futuresmarketmanager_i);
        contracts[4] = address(perpsv2marketsettings_i);
        contracts[5] = address(exchangerates_i);
    }
</source>
<source file="systems/source-code/Migration_EnifOptimismStep1.sol" startline="48" endline="56" pcid="1276">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](6);
        contracts[0] = address(perpsv2marketstatewldperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(exchangerates_i);
    }
</source>
<source file="systems/source-code/Migration_ScheatOptimismStep1.sol" startline="48" endline="56" pcid="1525">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](6);
        contracts[0] = address(perpsv2marketstateusdtperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(exchangerates_i);
    }
</source>
</class>

<class classid="178" nclones="4" nlines="18" similarity="100">
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="71" endline="88" pcid="1282">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](15);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(perpsv2marketstateaaveperp_i);
        contracts[2] = address(perpsv2proxyaaveperp_i);
        contracts[3] = address(futuresmarketmanager_i);
        contracts[4] = address(perpsv2marketstatexagperp_i);
        contracts[5] = address(perpsv2proxyxagperp_i);
        contracts[6] = address(perpsv2marketstateflowperp_i);
        contracts[7] = address(perpsv2proxyflowperp_i);
        contracts[8] = address(perpsv2marketstatenearperp_i);
        contracts[9] = address(perpsv2proxynearperp_i);
        contracts[10] = address(perpsv2marketstateaudperp_i);
        contracts[11] = address(perpsv2proxyaudperp_i);
        contracts[12] = address(perpsv2marketstategbpperp_i);
        contracts[13] = address(perpsv2proxygbpperp_i);
        contracts[14] = address(systemstatus_i);
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="71" endline="88" pcid="1372">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](15);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(perpsv2marketstateethperp_i);
        contracts[2] = address(perpsv2proxyethperp_i);
        contracts[3] = address(futuresmarketmanager_i);
        contracts[4] = address(perpsv2marketstatebtcperp_i);
        contracts[5] = address(perpsv2proxybtcperp_i);
        contracts[6] = address(perpsv2marketstatelinkperp_i);
        contracts[7] = address(perpsv2proxylinkperp_i);
        contracts[8] = address(perpsv2marketstatesolperp_i);
        contracts[9] = address(perpsv2proxysolperp_i);
        contracts[10] = address(perpsv2marketstateavaxperp_i);
        contracts[11] = address(perpsv2proxyavaxperp_i);
        contracts[12] = address(perpsv2marketstatearbperp_i);
        contracts[13] = address(perpsv2proxyarbperp_i);
        contracts[14] = address(systemstatus_i);
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="71" endline="88" pcid="1342">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](15);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(perpsv2marketstatematicperp_i);
        contracts[2] = address(perpsv2proxymaticperp_i);
        contracts[3] = address(futuresmarketmanager_i);
        contracts[4] = address(perpsv2marketstatedydxperp_i);
        contracts[5] = address(perpsv2proxydydxperp_i);
        contracts[6] = address(perpsv2marketstatebnbperp_i);
        contracts[7] = address(perpsv2proxybnbperp_i);
        contracts[8] = address(perpsv2marketstateopperp_i);
        contracts[9] = address(perpsv2proxyopperp_i);
        contracts[10] = address(perpsv2marketstatexauperp_i);
        contracts[11] = address(perpsv2proxyxauperp_i);
        contracts[12] = address(perpsv2marketstateftmperp_i);
        contracts[13] = address(perpsv2proxyftmperp_i);
        contracts[14] = address(systemstatus_i);
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="71" endline="88" pcid="1312">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](15);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(perpsv2marketstateuniperp_i);
        contracts[2] = address(perpsv2proxyuniperp_i);
        contracts[3] = address(futuresmarketmanager_i);
        contracts[4] = address(perpsv2marketstateapeperp_i);
        contracts[5] = address(perpsv2proxyapeperp_i);
        contracts[6] = address(perpsv2marketstatedogeperp_i);
        contracts[7] = address(perpsv2proxydogeperp_i);
        contracts[8] = address(perpsv2marketstateeurperp_i);
        contracts[9] = address(perpsv2proxyeurperp_i);
        contracts[10] = address(perpsv2marketstateatomperp_i);
        contracts[11] = address(perpsv2proxyatomperp_i);
        contracts[12] = address(perpsv2marketstateaxsperp_i);
        contracts[13] = address(perpsv2proxyaxsperp_i);
        contracts[14] = address(systemstatus_i);
    }
</source>
</class>

<class classid="179" nclones="32" nlines="7" similarity="100">
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="298" endline="307" pcid="1286">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="439" endline="448" pcid="1388">
    function addressresolver_importAddresses_57() internal {
        bytes32[] memory addressresolver_importAddresses_names_57_0 = new bytes32[](1);
        addressresolver_importAddresses_names_57_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_57_1 = new address[](1);
        addressresolver_importAddresses_destinations_57_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_57_0,
            addressresolver_importAddresses_destinations_57_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="392" endline="401" pcid="1294">
    function addressresolver_importAddresses_38() internal {
        bytes32[] memory addressresolver_importAddresses_names_38_0 = new bytes32[](1);
        addressresolver_importAddresses_names_38_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_38_1 = new address[](1);
        addressresolver_importAddresses_destinations_38_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_38_0,
            addressresolver_importAddresses_destinations_38_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="298" endline="307" pcid="1376">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="533" endline="542" pcid="1396">
    function addressresolver_importAddresses_95() internal {
        bytes32[] memory addressresolver_importAddresses_names_95_0 = new bytes32[](1);
        addressresolver_importAddresses_names_95_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_95_1 = new address[](1);
        addressresolver_importAddresses_destinations_95_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_95_0,
            addressresolver_importAddresses_destinations_95_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="580" endline="589" pcid="1310">
    function addressresolver_importAddresses_114() internal {
        bytes32[] memory addressresolver_importAddresses_names_114_0 = new bytes32[](1);
        addressresolver_importAddresses_names_114_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_114_1 = new address[](1);
        addressresolver_importAddresses_destinations_114_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_114_0,
            addressresolver_importAddresses_destinations_114_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="591" endline="600" pcid="1311">
    function addressresolver_importAddresses_116() internal {
        bytes32[] memory addressresolver_importAddresses_names_116_0 = new bytes32[](1);
        addressresolver_importAddresses_names_116_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_116_1 = new address[](1);
        addressresolver_importAddresses_destinations_116_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_116_0,
            addressresolver_importAddresses_destinations_116_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="439" endline="448" pcid="1298">
    function addressresolver_importAddresses_57() internal {
        bytes32[] memory addressresolver_importAddresses_names_57_0 = new bytes32[](1);
        addressresolver_importAddresses_names_57_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_57_1 = new address[](1);
        addressresolver_importAddresses_destinations_57_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_57_0,
            addressresolver_importAddresses_destinations_57_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="533" endline="542" pcid="1306">
    function addressresolver_importAddresses_95() internal {
        bytes32[] memory addressresolver_importAddresses_names_95_0 = new bytes32[](1);
        addressresolver_importAddresses_names_95_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_95_1 = new address[](1);
        addressresolver_importAddresses_destinations_95_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_95_0,
            addressresolver_importAddresses_destinations_95_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="345" endline="354" pcid="1290">
    function addressresolver_importAddresses_19() internal {
        bytes32[] memory addressresolver_importAddresses_names_19_0 = new bytes32[](1);
        addressresolver_importAddresses_names_19_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_19_1 = new address[](1);
        addressresolver_importAddresses_destinations_19_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_19_0,
            addressresolver_importAddresses_destinations_19_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="580" endline="589" pcid="1400">
    function addressresolver_importAddresses_114() internal {
        bytes32[] memory addressresolver_importAddresses_names_114_0 = new bytes32[](1);
        addressresolver_importAddresses_names_114_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_114_1 = new address[](1);
        addressresolver_importAddresses_destinations_114_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_114_0,
            addressresolver_importAddresses_destinations_114_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="298" endline="307" pcid="1346">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="345" endline="354" pcid="1380">
    function addressresolver_importAddresses_19() internal {
        bytes32[] memory addressresolver_importAddresses_names_19_0 = new bytes32[](1);
        addressresolver_importAddresses_names_19_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_19_1 = new address[](1);
        addressresolver_importAddresses_destinations_19_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_19_0,
            addressresolver_importAddresses_destinations_19_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="580" endline="589" pcid="1340">
    function addressresolver_importAddresses_114() internal {
        bytes32[] memory addressresolver_importAddresses_names_114_0 = new bytes32[](1);
        addressresolver_importAddresses_names_114_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_114_1 = new address[](1);
        addressresolver_importAddresses_destinations_114_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_114_0,
            addressresolver_importAddresses_destinations_114_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep1.sol" startline="486" endline="495" pcid="1302">
    function addressresolver_importAddresses_76() internal {
        bytes32[] memory addressresolver_importAddresses_names_76_0 = new bytes32[](1);
        addressresolver_importAddresses_names_76_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_76_1 = new address[](1);
        addressresolver_importAddresses_destinations_76_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_76_0,
            addressresolver_importAddresses_destinations_76_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="439" endline="448" pcid="1358">
    function addressresolver_importAddresses_57() internal {
        bytes32[] memory addressresolver_importAddresses_names_57_0 = new bytes32[](1);
        addressresolver_importAddresses_names_57_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_57_1 = new address[](1);
        addressresolver_importAddresses_destinations_57_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_57_0,
            addressresolver_importAddresses_destinations_57_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="345" endline="354" pcid="1350">
    function addressresolver_importAddresses_19() internal {
        bytes32[] memory addressresolver_importAddresses_names_19_0 = new bytes32[](1);
        addressresolver_importAddresses_names_19_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_19_1 = new address[](1);
        addressresolver_importAddresses_destinations_19_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_19_0,
            addressresolver_importAddresses_destinations_19_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="486" endline="495" pcid="1332">
    function addressresolver_importAddresses_76() internal {
        bytes32[] memory addressresolver_importAddresses_names_76_0 = new bytes32[](1);
        addressresolver_importAddresses_names_76_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_76_1 = new address[](1);
        addressresolver_importAddresses_destinations_76_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_76_0,
            addressresolver_importAddresses_destinations_76_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="591" endline="600" pcid="1341">
    function addressresolver_importAddresses_116() internal {
        bytes32[] memory addressresolver_importAddresses_names_116_0 = new bytes32[](1);
        addressresolver_importAddresses_names_116_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_116_1 = new address[](1);
        addressresolver_importAddresses_destinations_116_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_116_0,
            addressresolver_importAddresses_destinations_116_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="486" endline="495" pcid="1392">
    function addressresolver_importAddresses_76() internal {
        bytes32[] memory addressresolver_importAddresses_names_76_0 = new bytes32[](1);
        addressresolver_importAddresses_names_76_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_76_1 = new address[](1);
        addressresolver_importAddresses_destinations_76_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_76_0,
            addressresolver_importAddresses_destinations_76_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="298" endline="307" pcid="1316">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](1);
        addressresolver_importAddresses_names_0_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](1);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="533" endline="542" pcid="1366">
    function addressresolver_importAddresses_95() internal {
        bytes32[] memory addressresolver_importAddresses_names_95_0 = new bytes32[](1);
        addressresolver_importAddresses_names_95_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_95_1 = new address[](1);
        addressresolver_importAddresses_destinations_95_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_95_0,
            addressresolver_importAddresses_destinations_95_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="580" endline="589" pcid="1370">
    function addressresolver_importAddresses_114() internal {
        bytes32[] memory addressresolver_importAddresses_names_114_0 = new bytes32[](1);
        addressresolver_importAddresses_names_114_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_114_1 = new address[](1);
        addressresolver_importAddresses_destinations_114_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_114_0,
            addressresolver_importAddresses_destinations_114_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="591" endline="600" pcid="1371">
    function addressresolver_importAddresses_116() internal {
        bytes32[] memory addressresolver_importAddresses_names_116_0 = new bytes32[](1);
        addressresolver_importAddresses_names_116_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_116_1 = new address[](1);
        addressresolver_importAddresses_destinations_116_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_116_0,
            addressresolver_importAddresses_destinations_116_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="533" endline="542" pcid="1336">
    function addressresolver_importAddresses_95() internal {
        bytes32[] memory addressresolver_importAddresses_names_95_0 = new bytes32[](1);
        addressresolver_importAddresses_names_95_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_95_1 = new address[](1);
        addressresolver_importAddresses_destinations_95_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_95_0,
            addressresolver_importAddresses_destinations_95_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="345" endline="354" pcid="1320">
    function addressresolver_importAddresses_19() internal {
        bytes32[] memory addressresolver_importAddresses_names_19_0 = new bytes32[](1);
        addressresolver_importAddresses_names_19_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_19_1 = new address[](1);
        addressresolver_importAddresses_destinations_19_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_19_0,
            addressresolver_importAddresses_destinations_19_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="439" endline="448" pcid="1328">
    function addressresolver_importAddresses_57() internal {
        bytes32[] memory addressresolver_importAddresses_names_57_0 = new bytes32[](1);
        addressresolver_importAddresses_names_57_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_57_1 = new address[](1);
        addressresolver_importAddresses_destinations_57_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_57_0,
            addressresolver_importAddresses_destinations_57_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="591" endline="600" pcid="1401">
    function addressresolver_importAddresses_116() internal {
        bytes32[] memory addressresolver_importAddresses_names_116_0 = new bytes32[](1);
        addressresolver_importAddresses_names_116_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_116_1 = new address[](1);
        addressresolver_importAddresses_destinations_116_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_116_0,
            addressresolver_importAddresses_destinations_116_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep2.sol" startline="392" endline="401" pcid="1324">
    function addressresolver_importAddresses_38() internal {
        bytes32[] memory addressresolver_importAddresses_names_38_0 = new bytes32[](1);
        addressresolver_importAddresses_names_38_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_38_1 = new address[](1);
        addressresolver_importAddresses_destinations_38_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_38_0,
            addressresolver_importAddresses_destinations_38_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="392" endline="401" pcid="1354">
    function addressresolver_importAddresses_38() internal {
        bytes32[] memory addressresolver_importAddresses_names_38_0 = new bytes32[](1);
        addressresolver_importAddresses_names_38_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_38_1 = new address[](1);
        addressresolver_importAddresses_destinations_38_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_38_0,
            addressresolver_importAddresses_destinations_38_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep4.sol" startline="392" endline="401" pcid="1384">
    function addressresolver_importAddresses_38() internal {
        bytes32[] memory addressresolver_importAddresses_names_38_0 = new bytes32[](1);
        addressresolver_importAddresses_names_38_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_38_1 = new address[](1);
        addressresolver_importAddresses_destinations_38_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_38_0,
            addressresolver_importAddresses_destinations_38_1
        );
    }
</source>
<source file="systems/source-code/Migration_IzarOptimismStep3.sol" startline="486" endline="495" pcid="1362">
    function addressresolver_importAddresses_76() internal {
        bytes32[] memory addressresolver_importAddresses_names_76_0 = new bytes32[](1);
        addressresolver_importAddresses_names_76_0[0] = bytes32("PerpsV2MarketData");
        address[] memory addressresolver_importAddresses_destinations_76_1 = new address[](1);
        addressresolver_importAddresses_destinations_76_1[0] = address(new_PerpsV2MarketData_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_76_0,
            addressresolver_importAddresses_destinations_76_1
        );
    }
</source>
</class>

<class classid="180" nclones="3" nlines="10" similarity="100">
<source file="systems/source-code/Migration_MarkebOptimismStep1.sol" startline="51" endline="60" pcid="1426">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](7);
        contracts[0] = address(perpsv2marketstatejtoperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstateordiperp_i);
        contracts[6] = address(exchangerates_i);
    }
</source>
<source file="systems/source-code/Migration_SabikOptimismStep5.sol" startline="51" endline="60" pcid="1515">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](7);
        contracts[0] = address(perpsv2marketstatezrxperp_i);
        contracts[1] = address(perpsv2exchangerate_i);
        contracts[2] = address(futuresmarketmanager_i);
        contracts[3] = address(perpsv2marketsettings_i);
        contracts[4] = address(systemstatus_i);
        contracts[5] = address(perpsv2marketstateseiperp_i);
        contracts[6] = address(perpsv2marketstatestethethperp_i);
    }
</source>
<source file="systems/source-code/Migration_Naos.sol" startline="53" endline="62" pcid="1440">
    function contractsRequiringOwnership() public pure returns (address[] memory contracts) {
        contracts = new address[](7);
        contracts[0] = address(addressresolver_i);
        contracts[1] = address(proxysynthetix_i);
        contracts[2] = address(systemstatus_i);
        contracts[3] = address(tokenstatesynthetix_i);
        contracts[4] = address(rewardescrow_i);
        contracts[5] = address(rewardsdistribution_i);
        contracts[6] = address(issuer_i);
    }
</source>
</class>

<class classid="181" nclones="2" nlines="9" similarity="100">
<source file="systems/source-code/Migration_Naos.sol" startline="106" endline="117" pcid="1444">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](2);
        addressresolver_importAddresses_names_0_0[0] = bytes32("Synthetix");
        addressresolver_importAddresses_names_0_0[1] = bytes32("Issuer");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](2);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_Synthetix_contract);
        addressresolver_importAddresses_destinations_0_1[1] = address(new_Issuer_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
<source file="systems/source-code/Migration_NaosOptimism.sol" startline="98" endline="109" pcid="1452">
    function addressresolver_importAddresses_0() internal {
        bytes32[] memory addressresolver_importAddresses_names_0_0 = new bytes32[](2);
        addressresolver_importAddresses_names_0_0[0] = bytes32("Synthetix");
        addressresolver_importAddresses_names_0_0[1] = bytes32("Issuer");
        address[] memory addressresolver_importAddresses_destinations_0_1 = new address[](2);
        addressresolver_importAddresses_destinations_0_1[0] = address(new_Synthetix_contract);
        addressresolver_importAddresses_destinations_0_1[1] = address(new_Issuer_contract);
        addressresolver_i.importAddresses(
            addressresolver_importAddresses_names_0_0,
            addressresolver_importAddresses_destinations_0_1
        );
    }
</source>
</class>

<class classid="182" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/MintableSynthetix.sol" startline="51" endline="53" pcid="1537">
    function mintSecondary(address account, uint amount) external onlyBridge {
        _mintSecondary(account, amount);
    }
</source>
<source file="systems/source-code/SynthetixBridgeToBase.sol" startline="50" endline="52" pcid="2284">
    function withdrawTo(address to, uint amount) external requireInitiationActive {
        _initiateWithdraw(to, amount);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="163" endline="165" pcid="2250">
    function burn(address account, uint amount) external onlyInternalContracts {
        _internalBurn(account, amount);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="159" endline="161" pcid="2249">
    function issue(address account, uint amount) external onlyInternalContracts {
        _internalIssue(account, amount);
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="217" endline="219" pcid="2121">
    function appendVestingEntry(address account, uint quantity) external onlyFeePool {
        _appendVestingEntry(account, quantity);
    }
</source>
</class>

<class classid="183" nclones="5" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="46" endline="49" pcid="1540">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_FLEXIBLESTORAGE;
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="81" endline="84" pcid="2311">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_ISSUER;
    }
</source>
<source file="systems/source-code/ShortingRewards.sol" startline="54" endline="57" pcid="2186">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_SHORT;
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="74" endline="77" pcid="1615">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_FLEXIBLESTORAGE;
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="64" endline="67" pcid="1580">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](1);
        addresses[0] = CONTRACT_FLEXIBLESTORAGE;
    }
</source>
</class>

<class classid="184" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="57" endline="59" pcid="1542">
    function _parameter(bytes32 _marketKey, bytes32 key) internal view returns (uint value) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, keccak256(abi.encodePacked(_marketKey, key)));
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="75" endline="77" pcid="1582">
    function _parameter(bytes32 _marketKey, bytes32 key) internal view returns (uint value) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, keccak256(abi.encodePacked(_marketKey, key)));
    }
</source>
</class>

<class classid="185" nclones="30" nlines="3" similarity="100">
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="61" endline="63" pcid="1543">
    function _takerFee(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_TAKER_FEE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="65" endline="67" pcid="1544">
    function _makerFee(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAKER_FEE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="69" endline="71" pcid="1545">
    function _takerFeeNextPrice(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_TAKER_FEE_NEXT_PRICE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="73" endline="75" pcid="1546">
    function _makerFeeNextPrice(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAKER_FEE_NEXT_PRICE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="77" endline="79" pcid="1547">
    function _nextPriceConfirmWindow(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_NEXT_PRICE_CONFIRM_WINDOW);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="81" endline="83" pcid="1548">
    function _maxLeverage(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_LEVERAGE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="85" endline="87" pcid="1549">
    function _maxMarketValueUSD(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_MARKET_VALUE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="89" endline="91" pcid="1550">
    function _skewScaleUSD(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MIN_SKEW_SCALE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="93" endline="95" pcid="1551">
    function _maxFundingRate(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_FUNDING_RATE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="79" endline="81" pcid="1583">
    function _takerFee(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_TAKER_FEE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="83" endline="85" pcid="1584">
    function _makerFee(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAKER_FEE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="87" endline="89" pcid="1585">
    function _takerFeeDelayedOrder(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_TAKER_FEE_DELAYED_ORDER);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="91" endline="93" pcid="1586">
    function _makerFeeDelayedOrder(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAKER_FEE_DELAYED_ORDER);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="95" endline="97" pcid="1587">
    function _takerFeeOffchainDelayedOrder(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_TAKER_FEE_OFFCHAIN_DELAYED_ORDER);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="99" endline="101" pcid="1588">
    function _makerFeeOffchainDelayedOrder(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAKER_FEE_OFFCHAIN_DELAYED_ORDER);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="103" endline="105" pcid="1589">
    function _nextPriceConfirmWindow(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_NEXT_PRICE_CONFIRM_WINDOW);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="107" endline="109" pcid="1590">
    function _delayedOrderConfirmWindow(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_DELAYED_ORDER_CONFIRM_WINDOW);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="111" endline="113" pcid="1591">
    function _offchainDelayedOrderMinAge(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_OFFCHAIN_DELAYED_ORDER_MIN_AGE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="115" endline="117" pcid="1592">
    function _offchainDelayedOrderMaxAge(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_OFFCHAIN_DELAYED_ORDER_MAX_AGE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="119" endline="121" pcid="1593">
    function _maxLeverage(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_LEVERAGE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="123" endline="125" pcid="1594">
    function _maxMarketValue(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_MARKET_VALUE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="127" endline="129" pcid="1595">
    function _skewScale(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MIN_SKEW_SCALE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="131" endline="133" pcid="1596">
    function _maxFundingVelocity(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_FUNDING_VELOCITY);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="135" endline="137" pcid="1597">
    function _minDelayTimeDelta(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MIN_DELAY_TIME_DELTA);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="139" endline="141" pcid="1598">
    function _maxDelayTimeDelta(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_DELAY_TIME_DELTA);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="151" endline="153" pcid="1600">
    function _offchainPriceDivergence(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_OFFCHAIN_PRICE_DIVERGENCE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="155" endline="157" pcid="1601">
    function _liquidationPremiumMultiplier(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_LIQUIDATION_PREMIUM_MULTIPLIER);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="159" endline="161" pcid="1602">
    function _maxLiquidationDelta(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_LIQUIDAION_DELTA);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="163" endline="165" pcid="1603">
    function _maxPD(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_MAX_LIQUIDATION_PD);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="167" endline="169" pcid="1604">
    function _liquidationBufferRatio(bytes32 _marketKey) internal view returns (uint) {
        return _parameter(_marketKey, PARAMETER_LIQUIDATION_BUFFER_RATIO);
    }
</source>
</class>

<class classid="186" nclones="36" nlines="3" similarity="100">
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="97" endline="99" pcid="1552">
    function _minKeeperFee() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_KEEPER_FEE);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="156" endline="158" pcid="1631">
    function getFlagReward() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FLAG_REWARD);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="160" endline="162" pcid="1632">
    function getLiquidateReward() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATE_REWARD);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="164" endline="166" pcid="1633">
    function getRateStalePeriod() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_RATE_STALE_PERIOD);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="191" endline="193" pcid="1636">
    function getMinimumStakeTime() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MINIMUM_STAKE_TIME);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="195" endline="197" pcid="1637">
    function getAggregatorWarningFlags() internal view returns (address) {
        return flexibleStorage().getAddressValue(SETTING_CONTRACT_NAME, SETTING_AGGREGATOR_WARNING_FLAGS);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="199" endline="201" pcid="1638">
    function getDebtSnapshotStaleTime() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_DEBT_SNAPSHOT_STALE_TIME);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="203" endline="205" pcid="1639">
    function getEtherWrapperMaxETH() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MAX_ETH);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="207" endline="209" pcid="1640">
    function getEtherWrapperMintFeeRate() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_MINT_FEE_RATE);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="211" endline="213" pcid="1641">
    function getEtherWrapperBurnFeeRate() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ETHER_WRAPPER_BURN_FEE_RATE);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="255" endline="257" pcid="1647">
    function getAtomicMaxVolumePerBlock() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="259" endline="261" pcid="1648">
    function getAtomicTwapWindow() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ATOMIC_TWAP_WINDOW);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="311" endline="313" pcid="1655">
    function getExchangeMaxDynamicFee() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_MAX_DYNAMIC_FEE);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="315" endline="317" pcid="1656">
    function getExchangeDynamicFeeRounds() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_DYNAMIC_FEE_ROUNDS);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="319" endline="321" pcid="1657">
    function getExchangeDynamicFeeThreshold() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_DYNAMIC_FEE_THRESHOLD);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="323" endline="325" pcid="1658">
    function getExchangeDynamicFeeWeightDecay() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_EXCHANGE_DYNAMIC_FEE_WEIGHT_DECAY);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="152" endline="154" pcid="1630">
    function getSelfLiquidationPenalty() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_SELF_LIQUIDATION_PENALTY);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="148" endline="150" pcid="1629">
    function getSnxLiquidationPenalty() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_SNX_LIQUIDATION_PENALTY);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="144" endline="146" pcid="1628">
    function getLiquidationPenalty() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_PENALTY);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="140" endline="142" pcid="1627">
    function getLiquidationEscrowDuration() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_ESCROW_DURATION);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="136" endline="138" pcid="1626">
    function getLiquidationRatio() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_RATIO);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="132" endline="134" pcid="1625">
    function getLiquidationDelay() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_DELAY);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="127" endline="130" pcid="1624">
    function getTargetThreshold() internal view returns (uint) {
        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_TARGET_THRESHOLD);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="122" endline="125" pcid="1623">
    function getFeePeriodDuration() internal view returns (uint) {
        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_FEE_PERIOD_DURATION);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="117" endline="120" pcid="1622">
    function getIssuanceRatio() internal view returns (uint) {
        // lookup on flexible storage directly for gas savings (rather than via SystemSettings)
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_ISSUANCE_RATIO);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="113" endline="115" pcid="1621">
    function getPriceDeviationThresholdFactor() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="109" endline="111" pcid="1620">
    function getWaitingPeriodSecs() internal view returns (uint) {
        return flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_WAITING_PERIOD_SECS);
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="105" endline="107" pcid="1619">
    function getTradingRewardsEnabled() internal view returns (bool) {
        return flexibleStorage().getBoolValue(SETTING_CONTRACT_NAME, SETTING_TRADING_REWARDS_ENABLED);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="187" endline="189" pcid="1609">
    function _keeperLiquidationFee() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_KEEPER_LIQUIRATION_FEE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="183" endline="185" pcid="1608">
    function _minInitialMargin() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_INITIAL_MARGIN);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="179" endline="181" pcid="1607">
    function _liquidationFeeRatio() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_FEE_RATIO);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="175" endline="177" pcid="1606">
    function _maxKeeperFee() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MAX_KEEPER_FEE);
    }
</source>
<source file="systems/source-code/MixinPerpsV2MarketSettings.sol" startline="171" endline="173" pcid="1605">
    function _minKeeperFee() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_KEEPER_FEE);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="109" endline="111" pcid="1555">
    function _minInitialMargin() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_MIN_INITIAL_MARGIN);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="105" endline="107" pcid="1554">
    function _liquidationBufferRatio() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_BUFFER_RATIO);
    }
</source>
<source file="systems/source-code/MixinFuturesMarketSettings.sol" startline="101" endline="103" pcid="1553">
    function _liquidationFeeRatio() internal view returns (uint) {
        return _flexibleStorage().getUIntValue(SETTING_CONTRACT_NAME, SETTING_LIQUIDATION_FEE_RATIO);
    }
</source>
</class>

<class classid="187" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="24" endline="27" pcid="1565">
    function marketDebt() external view returns (uint debt, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_marketDebt(price), isInvalid);
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="105" endline="108" pcid="2051">
    function marketDebt() external view returns (uint debt, bool invalid) {
        (uint price, bool isInvalid) = _assetPrice();
        return (_marketDebt(price), isInvalid);
    }
</source>
</class>

<class classid="188" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="33" endline="36" pcid="1566">
    function currentFundingRate() external view returns (int) {
        (uint price, ) = assetPrice();
        return _currentFundingRate(price);
    }
</source>
<source file="systems/source-code/TestableFuturesMarket.sol" startline="16" endline="19" pcid="2565">
    function proportionalSkew() external view returns (int) {
        (uint price, ) = assetPrice();
        return _proportionalSkew(price);
    }
</source>
</class>

<class classid="189" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="42" endline="45" pcid="1567">
    function unrecordedFunding() external view returns (int funding, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_unrecordedFunding(price), isInvalid);
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="130" endline="133" pcid="2054">
    function unrecordedFunding() external view returns (int funding, bool invalid) {
        (uint price, bool isInvalid) = _assetPrice();
        return (_unrecordedFunding(price), isInvalid);
    }
</source>
</class>

<class classid="190" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="65" endline="68" pcid="1570">
    function profitLoss(address account) external view returns (int pnl, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_profitLoss(positions[account], price), isInvalid);
    }
</source>
<source file="systems/source-code/MixinFuturesViews.sol" startline="73" endline="76" pcid="1571">
    function accruedFunding(address account) external view returns (int funding, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_accruedFunding(positions[account], price), isInvalid);
    }
</source>
</class>

<class classid="191" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MixinFuturesViews.sol" startline="81" endline="84" pcid="1572">
    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_remainingMargin(positions[account], price), isInvalid);
    }
</source>
<source file="systems/source-code/MixinFuturesViews.sol" startline="90" endline="93" pcid="1573">
    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid) {
        (uint price, bool isInvalid) = assetPrice();
        return (_accessibleMargin(positions[account], price), isInvalid);
    }
</source>
</class>

<class classid="192" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/MixinSystemSettings.sol" startline="169" endline="175" pcid="1634">
    function getExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_EXCHANGE_FEE_RATE, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="271" endline="277" pcid="1650">
    function getAtomicExchangeFeeRate(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_EXCHANGE_FEE_RATE, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="263" endline="269" pcid="1649">
    function getAtomicEquivalentForDexPricing(bytes32 currencyKey) internal view returns (address) {
        return
            flexibleStorage().getAddressValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_EQUIVALENT_FOR_DEX_PRICING, currencyKey))
            );
    }
</source>
<source file="systems/source-code/PerpsV2ExchangeRate.sol" startline="77" endline="83" pcid="1805">
    function offchainPriceFeedId(bytes32 assetId) public view returns (bytes32) {
        return
            flexibleStorage().getBytes32Value(
                CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_OFFCHAIN_PRICE_FEED_ID, assetId))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="303" endline="309" pcid="1654">
    function getCrossChainSynthTransferEnabled(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_CROSS_SYNTH_TRANSFER_ENABLED, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="295" endline="301" pcid="1653">
    function getPureChainlinkPriceForAtomicSwapsEnabled(bytes32 currencyKey) internal view returns (bool) {
        return
            flexibleStorage().getBoolValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_PURE_CHAINLINK_PRICE_FOR_ATOMIC_SWAPS_ENABLED, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="287" endline="293" pcid="1652">
    function getAtomicVolatilityUpdateThreshold(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD, currencyKey))
            );
    }
</source>
<source file="systems/source-code/MixinSystemSettings.sol" startline="279" endline="285" pcid="1651">
    function getAtomicVolatilityConsiderationWindow(bytes32 currencyKey) internal view returns (uint) {
        return
            flexibleStorage().getUIntValue(
                SETTING_CONTRACT_NAME,
                keccak256(abi.encodePacked(SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW, currencyKey))
            );
    }
</source>
</class>

<class classid="193" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="81" endline="83" pcid="1661">
    function setAllRoundDataShouldRevert(bool _shouldRevert) external {
        allRoundDataShouldRevert = _shouldRevert;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="85" endline="87" pcid="1662">
    function setLatestRoundDataShouldRevert(bool _shouldRevert) external {
        latestRoundDataShouldRevert = _shouldRevert;
    }
</source>
<source file="systems/source-code/MockDexPriceAggregator.sol" startline="36" endline="38" pcid="1674">
    function setAssetToAssetShouldRevert(bool _shouldRevert) external {
        assetToAssetShouldRevert = _shouldRevert;
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="46" endline="48" pcid="1692">
    function setInvalid(bool _invalid) external {
        invalid = _invalid;
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="51" endline="53" pcid="1706">
    function setInvalid(bool _invalid) external {
        invalid = _invalid;
    }
</source>
</class>

<class classid="194" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="118" endline="121" pcid="1667">
    function getAnswer(uint256 _roundId) external view returns (int256) {
        Entry memory entry = entries[_roundId];
        return entry.answer;
    }
</source>
<source file="systems/source-code/MockAggregatorV2V3.sol" startline="123" endline="126" pcid="1668">
    function getTimestamp(uint256 _roundId) external view returns (uint256) {
        Entry memory entry = entries[_roundId];
        return entry.updatedAt;
    }
</source>
</class>

<class classid="195" nclones="7" nlines="3" similarity="100">
<source file="systems/source-code/MockEtherWrapper.sol" startline="13" endline="15" pcid="1675">
    function setTotalIssuedSynths(uint value) external {
        totalIssuedSynths = value;
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="42" endline="44" pcid="1691">
    function setMarketDebt(uint _debt) external {
        debt = _debt;
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="47" endline="49" pcid="1705">
    function setMarketDebt(uint _debt) external {
        debt = _debt;
    }
</source>
<source file="systems/source-code/MockExchanger.sol" startline="91" endline="93" pcid="1683">
    function setMaxSecsLeft(uint _maxSecsLeft) external {
        _mockMaxSecsLeft = _maxSecsLeft;
    }
</source>
<source file="systems/source-code/MockPyth.sol" startline="37" endline="39" pcid="1730">
    function mockUpdateFee(uint newSingleUpdateFeeInWei) external {
        singleUpdateFeeInWei = newSingleUpdateFeeInWei;
    }
</source>
<source file="systems/source-code/MockPyth.sol" startline="41" endline="43" pcid="1731">
    function mockUpdateValidTimePeriod(uint newValidTimePeriod) external {
        validTimePeriod = newValidTimePeriod;
    }
</source>
<source file="systems/source-code/MockWrapperFactory.sol" startline="13" endline="15" pcid="1760">
    function setTotalIssuedSynths(uint value) external {
        totalIssuedSynths = value;
    }
</source>
</class>

<class classid="196" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockExchanger.sol" startline="79" endline="81" pcid="1680">
    function setReclaim(uint256 _reclaimAmount) external {
        _mockReclaimAmount = _reclaimAmount;
    }
</source>
<source file="systems/source-code/MockSynth.sol" startline="34" endline="36" pcid="1750">
    function setTotalSupply(uint256 _totalSupply) external {
        totalSupply = _totalSupply;
    }
</source>
<source file="systems/source-code/MockExchanger.sol" startline="83" endline="85" pcid="1681">
    function setRefund(uint256 _refundAmount) external {
        _mockRefundAmount = _refundAmount;
    }
</source>
<source file="systems/source-code/MockExchanger.sol" startline="87" endline="89" pcid="1682">
    function setNumEntries(uint256 _numEntries) external {
        _mockNumEntries = _numEntries;
    }
</source>
</class>

<class classid="197" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/MockFuturesMarket.sol" startline="30" endline="32" pcid="1688">
    function setManager(IFuturesMarketManagerInternal _manager) external {
        manager = _manager;
    }
</source>
<source file="systems/source-code/MockSynth.sol" startline="29" endline="31" pcid="1749">
    function setAddressResolver(IAddressResolver _resolver) external {
        addressResolver = _resolver;
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="35" endline="37" pcid="1702">
    function setManager(IPerpsV2MarketManagerInternal _manager) external {
        manager = _manager;
    }
</source>
</class>

<class classid="198" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockFuturesMarket.sol" startline="34" endline="36" pcid="1689">
    function setBaseAsset(bytes32 _baseAsset) external {
        baseAsset = _baseAsset;
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="39" endline="41" pcid="1703">
    function setBaseAsset(bytes32 _baseAsset) external {
        baseAsset = _baseAsset;
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="43" endline="45" pcid="1704">
    function setMarketKey(bytes32 _marketKey) external {
        marketKey = _marketKey;
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="38" endline="40" pcid="1690">
    function setMarketKey(bytes32 _marketKey) external {
        marketKey = _marketKey;
    }
</source>
</class>

<class classid="199" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MockFuturesMarket.sol" startline="50" endline="52" pcid="1693">
    function marketDebt() external view returns (uint _debt, bool _invalid) {
        return (debt, invalid);
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="55" endline="57" pcid="1707">
    function marketDebt() external view returns (uint _debt, bool _invalid) {
        return (debt, invalid);
    }
</source>
</class>

<class classid="200" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockFuturesMarket.sol" startline="54" endline="56" pcid="1694">
    function issueSUSD(address account, uint amount) external {
        manager.issueSUSD(account, amount);
    }
</source>
<source file="systems/source-code/MockFuturesMarket.sol" startline="58" endline="60" pcid="1695">
    function burnSUSD(address account, uint amount) external {
        manager.burnSUSD(account, amount);
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="63" endline="65" pcid="1709">
    function burnSUSD(address account, uint amount) external {
        manager.burnSUSD(account, amount);
    }
</source>
<source file="systems/source-code/MockPerpsV2Market.sol" startline="59" endline="61" pcid="1708">
    function issueSUSD(address account, uint amount) external {
        manager.issueSUSD(account, amount);
    }
</source>
</class>

<class classid="201" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/MockMintableSynthetix.sol" startline="10" endline="13" pcid="1697">
    function mintSecondary(address account, uint amount) external {
        mintSecondaryCallAccount = account;
        mintSecondaryCallAmount = amount;
    }
</source>
<source file="systems/source-code/MockMintableSynthetix.sol" startline="15" endline="18" pcid="1698">
    function burnSecondary(address account, uint amount) external {
        burnSecondaryCallAccount = account;
        burnSecondaryCallAmount = amount;
    }
</source>
</class>

<class classid="202" nclones="11" nlines="3" similarity="100">
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="12" endline="14" pcid="1712">
    function nextPositionId() external view returns (uint64) {
        return marketState.nextPositionId();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="67" endline="69" pcid="2046">
    function fundingRateLastRecomputed() external view returns (int128) {
        return marketState.fundingRateLastRecomputed();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="60" endline="62" pcid="2045">
    function fundingLastRecomputed() external view returns (uint32) {
        return marketState.fundingLastRecomputed();
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="109" endline="111" pcid="1729">
    function getDelayedOrderAddressesLength() external view returns (uint) {
        return marketState.getDelayedOrderAddressesLength();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="34" endline="36" pcid="2041">
    function marketSize() external view returns (uint128) {
        return marketState.marketSize();
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="105" endline="107" pcid="1728">
    function getPositionAddressesLength() external view returns (uint) {
        return marketState.getPositionAddressesLength();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="41" endline="43" pcid="2042">
    function marketSkew() external view returns (int128) {
        return marketState.marketSkew();
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="15" endline="17" pcid="2094">
    function preciseUnit() public pure returns (uint) {
        return SafeDecimalMath.preciseUnit();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="138" endline="140" pcid="2055">
    function fundingSequenceLength() external view returns (uint) {
        return marketState.fundingSequenceLength();
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="11" endline="13" pcid="2093">
    function unit() public pure returns (uint) {
        return SafeDecimalMath.unit();
    }
</source>
<source file="systems/source-code/TestablePerpsV2Market.sol" startline="17" endline="19" pcid="2574">
    function entryDebtCorrection() external view returns (int) {
        return marketState.entryDebtCorrection();
    }
</source>
</class>

<class classid="203" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="16" endline="18" pcid="1713">
    function setMarketKey(bytes32 _marketKey) external {
        marketState.setMarketKey(_marketKey);
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="20" endline="22" pcid="1714">
    function setBaseAsset(bytes32 _baseAsset) external {
        marketState.setBaseAsset(_baseAsset);
    }
</source>
<source file="systems/source-code/TestableBytes32Set.sol" startline="18" endline="20" pcid="2556">
    function add(bytes32 element) public {
        set.add(element);
    }
</source>
<source file="systems/source-code/TestableBytes32Set.sol" startline="22" endline="24" pcid="2557">
    function remove(bytes32 element) public {
        set.remove(element);
    }
</source>
</class>

<class classid="204" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="28" endline="30" pcid="1716">
    function setEntryDebtCorrection(int128 entryDebtCorrection) external {
        marketState.setEntryDebtCorrection(entryDebtCorrection);
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="48" endline="50" pcid="1721">
    function setFundingRateLastRecomputed(int128 _fundingRateLastRecomputed) external {
        marketState.setFundingRateLastRecomputed(_fundingRateLastRecomputed);
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="44" endline="46" pcid="1720">
    function pushFundingSequence(int128 _fundingSequence) external {
        marketState.pushFundingSequence(_fundingSequence);
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="36" endline="38" pcid="1718">
    function setMarketSkew(int128 _marketSkew) external {
        marketState.setMarketSkew(_marketSkew);
    }
</source>
</class>

<class classid="205" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="89" endline="91" pcid="1724">
    function deletePosition(address account) external {
        marketState.deletePosition(account);
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="18" endline="20" pcid="2549">
    function add(address element) public {
        set.add(element);
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="22" endline="24" pcid="2550">
    function remove(address element) public {
        set.remove(element);
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="93" endline="95" pcid="1725">
    function deleteDelayedOrder(address account) external {
        marketState.deleteDelayedOrder(account);
    }
</source>
</class>

<class classid="206" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="97" endline="99" pcid="1726">
    function getPositionAddressesPage(uint index, uint pageSize) external view returns (address[] memory) {
        return marketState.getPositionAddressesPage(index, pageSize);
    }
</source>
<source file="systems/source-code/TestableAddressSet.sol" startline="14" endline="16" pcid="2548">
    function getPage(uint index, uint pageSize) public view returns (address[] memory) {
        return set.getPage(index, pageSize);
    }
</source>
<source file="systems/source-code/MockPerpsV2StateConsumer.sol" startline="101" endline="103" pcid="1727">
    function getDelayedOrderAddressesPage(uint index, uint pageSize) external view returns (address[] memory) {
        return marketState.getDelayedOrderAddressesPage(index, pageSize);
    }
</source>
</class>

<class classid="207" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MockPyth.sol" startline="45" endline="47" pcid="1732">
    function getPrice(bytes32 id) external view returns (PythStructs.Price memory price) {
        return getPriceNoOlderThan(id, getValidTimePeriod());
    }
</source>
<source file="systems/source-code/MockPyth.sol" startline="49" endline="51" pcid="1733">
    function getEmaPrice(bytes32 id) external view returns (PythStructs.Price memory price) {
        return getEmaPriceNoOlderThan(id, getValidTimePeriod());
    }
</source>
</class>

<class classid="208" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/MockSynth.sol" startline="91" endline="95" pcid="1754">
    function issue(address account, uint amount) external {
        tokenState.setBalanceOf(account, tokenState.balanceOf(account).add(amount));
        totalSupply = totalSupply.add(amount);
        emit Issued(account, amount);
    }
</source>
<source file="systems/source-code/MockSynth.sol" startline="97" endline="101" pcid="1755">
    function burn(address account, uint amount) external {
        tokenState.setBalanceOf(account, tokenState.balanceOf(account).sub(amount));
        totalSupply = totalSupply.sub(amount);
        emit Burned(account, amount);
    }
</source>
</class>

<class classid="209" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/MultiCollateralSynth.sol" startline="64" endline="66" pcid="1765">
    function issue(address account, uint amount) external onlyInternalContracts {
        super._internalIssue(account, amount);
    }
</source>
<source file="systems/source-code/MultiCollateralSynth.sol" startline="73" endline="75" pcid="1766">
    function burn(address account, uint amount) external onlyInternalContracts {
        super._internalBurn(account, amount);
    }
</source>
</class>

<class classid="210" nclones="3" nlines="5" similarity="100">
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="57" endline="61" pcid="1794">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](2);
        addresses[0] = CONTRACT_EXT_MESSENGER;
        addresses[1] = CONTRACT_BASE_OWNER_RELAY_ON_ETHEREUM;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="61" endline="65" pcid="2639">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](2);
        addresses[0] = CONTRACT_EXCHANGER;
        addresses[1] = CONTRACT_SYNTHETIX;
    }
</source>
<source file="systems/source-code/SynthRedeemer.sol" startline="26" endline="30" pcid="2354">
    function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
        addresses = new bytes32[](2);
        addresses[0] = CONTRACT_ISSUER;
        addresses[1] = CONTRACT_SYNTHSUSD;
    }
</source>
</class>

<class classid="211" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="65" endline="69" pcid="1795">
    function directRelay(address target, bytes calldata payload) external onlyTemporaryOwner {
        _relayCall(target, payload);

        emit DirectRelay(target, payload);
    }
</source>
<source file="systems/source-code/OwnerRelayOnOptimism.sol" startline="71" endline="75" pcid="1796">
    function finalizeRelay(address target, bytes calldata payload) external onlyMessengerAndL1Relayer {
        _relayCall(target, payload);

        emit RelayFinalized(target, payload);
    }
</source>
</class>

<class classid="212" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="144" endline="146" pcid="1829">
    function _baseAsset() internal view returns (bytes32) {
        return marketState.baseAsset();
    }
</source>
<source file="systems/source-code/PerpsV2MarketBase.sol" startline="148" endline="150" pcid="1830">
    function _marketKey() internal view returns (bytes32) {
        return marketState.marketKey();
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="25" endline="27" pcid="2371">
    function CONTRACT_NAME() external view returns (bytes32) {
        return SystemSettingsLib.contractName();
    }
</source>
</class>

<class classid="213" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/PerpsV2MarketState.sol" startline="218" endline="225" pcid="1998">
    function getPositionAddressesPage(uint index, uint pageSize)
        external
        view
        onlyAssociatedContracts
        returns (address[] memory)
    {
        return _positionAddresses.getPage(index, pageSize);
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="112" endline="119" pcid="2022">
    function getPositionAddressesPage(uint index, uint pageSize)
        external
        view
        onlyAssociatedContracts
        returns (address[] memory)
    {
        return _positionAddresses.getPage(index, pageSize);
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="121" endline="128" pcid="2023">
    function getDelayedOrderAddressesPage(uint index, uint pageSize)
        external
        view
        onlyAssociatedContracts
        returns (address[] memory)
    {
        return _delayedOrderAddresses.getPage(index, pageSize);
    }
</source>
</class>

<class classid="214" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/PerpsV2MarketState.sol" startline="276" endline="278" pcid="2007">
    function setEntryDebtCorrection(int128 entryDebtCorrection) external onlyIfInitialized onlyAssociatedContracts {
        _entryDebtCorrection = entryDebtCorrection;
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="297" endline="303" pcid="2012">
    function setFundingRateLastRecomputed(int128 _fundingRateLastRecomputed)
        external
        onlyIfInitialized
        onlyAssociatedContracts
    {
        fundingRateLastRecomputed = _fundingRateLastRecomputed;
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="284" endline="286" pcid="2009">
    function setMarketSkew(int128 _marketSkew) external onlyIfInitialized onlyAssociatedContracts {
        marketSkew = _marketSkew;
    }
</source>
</class>

<class classid="215" nclones="2" nlines="10" similarity="100">
<source file="systems/source-code/PerpsV2MarketState.sol" startline="387" endline="399" pcid="2015">
    function deletePosition(address account) external onlyIfInitialized onlyAssociatedContracts {
        delete _positions[account];
        if (_positionAddresses.contains(account)) {
            _positionAddresses.remove(account);
        }

        if (_legacyContractExists && !_positionMigrated[account]) {
            legacyState.deletePosition(account);

            // flag as already migrated
            _positionMigrated[account] = true;
        }
    }
</source>
<source file="systems/source-code/PerpsV2MarketState.sol" startline="401" endline="414" pcid="2016">
    function deleteDelayedOrder(address account) external onlyIfInitialized onlyAssociatedContracts {
        delete _delayedOrders[account];
        if (_delayedOrderAddresses.contains(account)) {
            _delayedOrderAddresses.remove(account);
        }

        // attempt to delete on legacy
        if (_legacyContractExists && !_delayedOrderMigrated[account]) {
            legacyState.deleteDelayedOrder(account);

            // flag as already migrated
            _delayedOrderMigrated[account] = true;
        }
    }
</source>
</class>

<class classid="216" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="130" endline="132" pcid="2024">
    function getPositionAddressesLength() external view onlyAssociatedContracts returns (uint) {
        return _positionAddresses.elements.length;
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="134" endline="136" pcid="2025">
    function getDelayedOrderAddressesLength() external view onlyAssociatedContracts returns (uint) {
        return _delayedOrderAddresses.elements.length;
    }
</source>
</class>

<class classid="217" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="152" endline="154" pcid="2029">
    function setEntryDebtCorrection(int128 entryDebtCorrection) external onlyAssociatedContracts {
        _entryDebtCorrection = entryDebtCorrection;
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="160" endline="162" pcid="2031">
    function setMarketSkew(int128 _marketSkew) external onlyAssociatedContracts {
        marketSkew = _marketSkew;
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="173" endline="175" pcid="2034">
    function setFundingRateLastRecomputed(int128 _fundingRateLastRecomputed) external onlyAssociatedContracts {
        fundingRateLastRecomputed = _fundingRateLastRecomputed;
    }
</source>
</class>

<class classid="218" nclones="2" nlines="6" similarity="100">
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="243" endline="248" pcid="2037">
    function deletePosition(address account) external onlyAssociatedContracts {
        delete positions[account];
        if (_positionAddresses.contains(account)) {
            _positionAddresses.remove(account);
        }
    }
</source>
<source file="systems/source-code/PerpsV2MarketStateLegacyR1.sol" startline="250" endline="255" pcid="2038">
    function deleteDelayedOrder(address account) external onlyAssociatedContracts {
        delete delayedOrders[account];
        if (_delayedOrderAddresses.contains(account)) {
            _delayedOrderAddresses.remove(account);
        }
    }
</source>
</class>

<class classid="219" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="22" endline="24" pcid="2039">
    function marketKey() external view returns (bytes32 key) {
        return _marketKey();
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="27" endline="29" pcid="2040">
    function baseAsset() external view returns (bytes32 key) {
        return _baseAsset();
    }
</source>
</class>

<class classid="220" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="81" endline="83" pcid="2048">
    function positions(address account) external view returns (Position memory) {
        return marketState.positions(account);
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="88" endline="90" pcid="2049">
    function delayedOrders(address account) external view returns (DelayedOrder memory) {
        return marketState.delayedOrders(account);
    }
</source>
</class>

<class classid="221" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="155" endline="158" pcid="2057">
    function profitLoss(address account) external view returns (int pnl, bool invalid) {
        (uint price, bool isInvalid) = _assetPrice();
        return (_profitLoss(marketState.positions(account), price), isInvalid);
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="163" endline="166" pcid="2058">
    function accruedFunding(address account) external view returns (int funding, bool invalid) {
        (uint price, bool isInvalid) = _assetPrice();
        return (_accruedFunding(marketState.positions(account), price), isInvalid);
    }
</source>
</class>

<class classid="222" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="171" endline="174" pcid="2059">
    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid) {
        (uint price, bool isInvalid) = _assetPrice();
        return (_remainingMargin(marketState.positions(account), price), isInvalid);
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="180" endline="183" pcid="2060">
    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid) {
        (uint price, bool isInvalid) = _assetPrice();
        return (_accessibleMargin(marketState.positions(account), price), isInvalid);
    }
</source>
<source file="systems/source-code/PerpsV2MarketViews.sol" startline="192" endline="195" pcid="2061">
    function liquidationPrice(address account) external view returns (uint price, bool invalid) {
        (uint aPrice, bool isInvalid) = _assetPrice();
        return (_approxLiquidationPrice(marketState.positions(account), aPrice), isInvalid);
    }
</source>
</class>

<class classid="223" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/Proxyable.sol" startline="34" endline="36" pcid="2072">
    function setMessageSender(address sender) external onlyProxy {
        messageSender = sender;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="64" endline="66" pcid="2154">
    function setSynthetixProxy(address _synthetixProxy) external onlyOwner {
        synthetixProxy = _synthetixProxy;
    }
</source>
<source file="systems/source-code/TokenExchanger.sol" startline="23" endline="25" pcid="2631">
    function setSynthetix(address _synthetix) external onlyOwner {
        synthetix = _synthetix;
    }
</source>
<source file="systems/source-code/TokenExchanger.sol" startline="19" endline="21" pcid="2630">
    function setSynthetixProxy(address _integrationProxy) external onlyOwner {
        integrationProxy = _integrationProxy;
    }
</source>
<source file="systems/source-code/RewardsDistributionRecipient.sol" startline="17" endline="19" pcid="2163">
    function setRewardsDistribution(address _rewardsDistribution) external onlyOwner {
        rewardsDistribution = _rewardsDistribution;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="80" endline="82" pcid="2157">
    function setAuthority(address _authority) external onlyOwner {
        authority = _authority;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="72" endline="74" pcid="2156">
    function setFeePoolProxy(address _feePoolProxy) external onlyOwner {
        feePoolProxy = _feePoolProxy;
    }
</source>
<source file="systems/source-code/RewardsDistribution.sol" startline="68" endline="70" pcid="2155">
    function setRewardEscrow(address _rewardEscrow) external onlyOwner {
        rewardEscrow = _rewardEscrow;
    }
</source>
</class>

<class classid="224" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ProxyERC20.sol" startline="13" endline="16" pcid="2076">
    function name() public view returns (string memory) {
        // Immutable static call from target contract
        return IERC20(address(target)).name();
    }
</source>
<source file="systems/source-code/ProxyERC20.sol" startline="18" endline="21" pcid="2077">
    function symbol() public view returns (string memory) {
        // Immutable static call from target contract
        return IERC20(address(target)).symbol();
    }
</source>
</class>

<class classid="225" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ProxyERC20.sol" startline="23" endline="26" pcid="2078">
    function decimals() public view returns (uint8) {
        // Immutable static call from target contract
        return IERC20(address(target)).decimals();
    }
</source>
<source file="systems/source-code/ProxyERC20.sol" startline="33" endline="36" pcid="2079">
    function totalSupply() public view returns (uint256) {
        // Immutable static call from target contract
        return IERC20(address(target)).totalSupply();
    }
</source>
</class>

<class classid="226" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/ProxyERC20.sol" startline="64" endline="73" pcid="2082">
    function transfer(address to, uint256 value) public returns (bool) {
        // Mutable state call requires the proxy to tell the target who the msg.sender is.
        target.setMessageSender(msg.sender);

        // Forward the ERC20 call to the target contract
        IERC20(address(target)).transfer(to, value);

        // Event emitting will occur via Synthetix.Proxy._emit()
        return true;
    }
</source>
<source file="systems/source-code/ProxyERC20.sol" startline="84" endline="93" pcid="2083">
    function approve(address spender, uint256 value) public returns (bool) {
        // Mutable state call requires the proxy to tell the target who the msg.sender is.
        target.setMessageSender(msg.sender);

        // Forward the ERC20 call to the target contract
        IERC20(address(target)).approve(spender, value);

        // Event emitting will occur via Synthetix.Proxy._emit()
        return true;
    }
</source>
</class>

<class classid="227" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicEST.sol" startline="18" endline="20" pcid="2085">
    function transfer(address to, uint value) external optionalProxy returns (bool) {
        return _transferByProxy(messageSender, to, value);
    }
</source>
<source file="systems/source-code/PublicEST8Decimals.sol" startline="17" endline="19" pcid="2089">
    function transfer(address to, uint value) external optionalProxy returns (bool) {
        return _transferByProxy(messageSender, to, value);
    }
</source>
</class>

<class classid="228" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicEST.sol" startline="22" endline="28" pcid="2086">
    function transferFrom(
        address from,
        address to,
        uint value
    ) external optionalProxy returns (bool) {
        return _transferFromByProxy(messageSender, from, to, value);
    }
</source>
<source file="systems/source-code/PublicEST8Decimals.sol" startline="21" endline="27" pcid="2090">
    function transferFrom(
        address from,
        address to,
        uint value
    ) external optionalProxy returns (bool) {
        return _transferFromByProxy(messageSender, from, to, value);
    }
</source>
</class>

<class classid="229" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicEST.sol" startline="33" endline="35" pcid="2087">
    function somethingToBeProxied(uint256 inputA, bytes32 inputB) external {
        emit Received(messageSender, inputA, inputB);
    }
</source>
<source file="systems/source-code/PublicEST8Decimals.sol" startline="32" endline="34" pcid="2091">
    function somethingToBeProxied(uint256 inputA, bytes32 inputB) external {
        emit Received(messageSender, inputA, inputB);
    }
</source>
</class>

<class classid="230" nclones="6" nlines="3" similarity="100">
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="19" endline="21" pcid="2095">
    function multiplyDecimal(uint x, uint y) public pure returns (uint) {
        return x.multiplyDecimal(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="31" endline="33" pcid="2098">
    function divideDecimal(uint x, uint y) public pure returns (uint) {
        return x.divideDecimal(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="35" endline="37" pcid="2099">
    function divideDecimalRound(uint x, uint y) public pure returns (uint) {
        return x.divideDecimalRound(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="39" endline="41" pcid="2100">
    function divideDecimalRoundPrecise(uint x, uint y) public pure returns (uint) {
        return x.divideDecimalRoundPrecise(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="23" endline="25" pcid="2096">
    function multiplyDecimalRound(uint x, uint y) public pure returns (uint) {
        return x.multiplyDecimalRound(y);
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="27" endline="29" pcid="2097">
    function multiplyDecimalRoundPrecise(uint x, uint y) public pure returns (uint) {
        return x.multiplyDecimalRoundPrecise(y);
    }
</source>
</class>

<class classid="231" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="43" endline="45" pcid="2101">
    function decimalToPreciseDecimal(uint i) public pure returns (uint) {
        return i.decimalToPreciseDecimal();
    }
</source>
<source file="systems/source-code/PublicSafeDecimalMath.sol" startline="47" endline="49" pcid="2102">
    function preciseDecimalToDecimal(uint i) public pure returns (uint) {
        return i.preciseDecimalToDecimal();
    }
</source>
</class>

<class classid="232" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/PurgeableSynth.sol" startline="72" endline="74" pcid="2106">
    function emitPurged(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, PURGED_SIG, addressToBytes32(account), 0, 0);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="319" endline="321" pcid="2267">
    function emitBurned(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, BURNED_SIG, addressToBytes32(account), 0, 0);
    }
</source>
<source file="systems/source-code/Synth.sol" startline="311" endline="313" pcid="2266">
    function emitIssued(address account, uint value) internal {
        proxy._emit(abi.encode(value), 2, ISSUED_SIG, addressToBytes32(account), 0, 0);
    }
</source>
</class>

<class classid="233" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="60" endline="63" pcid="2107">
    function setSynthetix(ISynthetix _synthetix) external onlyOwner {
        synthetix = _synthetix;
        emit SynthetixUpdated(address(_synthetix));
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="69" endline="72" pcid="2108">
    function setFeePool(IFeePool _feePool) external onlyOwner {
        feePool = _feePool;
        emit FeePoolUpdated(address(_feePool));
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="46" endline="49" pcid="2332">
    function setSynthetix(ISynthetix _synthetix) external onlyOwner {
        synthetix = _synthetix;
        emit SynthetixUpdated(address(_synthetix));
    }
</source>
</class>

<class classid="234" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="98" endline="100" pcid="2112">
    function getVestingScheduleEntry(address account, uint index) public view returns (uint[2] memory) {
        return vestingSchedules[account][index];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="71" endline="73" pcid="2335">
    function getVestingScheduleEntry(address account, uint index) public view returns (uint[2] memory) {
        return vestingSchedules[account][index];
    }
</source>
</class>

<class classid="235" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="105" endline="107" pcid="2113">
    function getVestingTime(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[TIME_INDEX];
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="112" endline="114" pcid="2114">
    function getVestingQuantity(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[QUANTITY_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="78" endline="80" pcid="2336">
    function getVestingTime(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[TIME_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="85" endline="87" pcid="2337">
    function getVestingQuantity(address account, uint index) public view returns (uint) {
        return getVestingScheduleEntry(account, index)[QUANTITY_INDEX];
    }
</source>
</class>

<class classid="236" nclones="2" nlines="9" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="119" endline="127" pcid="2115">
    function getNextVestingIndex(address account) public view returns (uint) {
        uint len = _numVestingEntries(account);
        for (uint i = 0; i < len; i++) {
            if (getVestingTime(account, i) != 0) {
                return i;
            }
        }
        return len;
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="92" endline="100" pcid="2338">
    function getNextVestingIndex(address account) public view returns (uint) {
        uint len = numVestingEntries(account);
        for (uint i = 0; i < len; i++) {
            if (getVestingTime(account, i) != 0) {
                return i;
            }
        }
        return len;
    }
</source>
</class>

<class classid="237" nclones="2" nlines="7" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="132" endline="138" pcid="2116">
    function getNextVestingEntry(address account) public view returns (uint[2] memory) {
        uint index = getNextVestingIndex(account);
        if (index == _numVestingEntries(account)) {
            return [uint(0), 0];
        }
        return getVestingScheduleEntry(account, index);
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="105" endline="111" pcid="2339">
    function getNextVestingEntry(address account) public view returns (uint[2] memory) {
        uint index = getNextVestingIndex(account);
        if (index == numVestingEntries(account)) {
            return [uint(0), 0];
        }
        return getVestingScheduleEntry(account, index);
    }
</source>
</class>

<class classid="238" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/RewardEscrow.sol" startline="143" endline="145" pcid="2117">
    function getNextVestingTime(address account) external view returns (uint) {
        return getNextVestingEntry(account)[TIME_INDEX];
    }
</source>
<source file="systems/source-code/RewardEscrow.sol" startline="150" endline="152" pcid="2118">
    function getNextVestingQuantity(address account) external view returns (uint) {
        return getNextVestingEntry(account)[QUANTITY_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="123" endline="125" pcid="2341">
    function getNextVestingQuantity(address account) external view returns (uint) {
        return getNextVestingEntry(account)[QUANTITY_INDEX];
    }
</source>
<source file="systems/source-code/SynthetixEscrow.sol" startline="116" endline="118" pcid="2340">
    function getNextVestingTime(address account) external view returns (uint) {
        return getNextVestingEntry(account)[TIME_INDEX];
    }
</source>
</class>

<class classid="239" nclones="2" nlines="9" similarity="100">
<source file="systems/source-code/RewardEscrowV2Storage.sol" startline="129" endline="139" pcid="2140">
    function totalEscrowedAccountBalance(address account) public view withFallback returns (uint) {
        // this as an int in order to be able to store ZERO_PLACEHOLDER which is -1
        int v = _totalEscrowedAccountBalance[account];

        // 0 should never be stored to prevent reading stale value from fallback
        if (v == 0) {
            return fallbackRewardEscrow.totalEscrowedAccountBalance(account);
        } else {
            return _readWithZeroPlaceholder(v);
        }
    }
</source>
<source file="systems/source-code/RewardEscrowV2Storage.sol" startline="141" endline="151" pcid="2141">
    function totalVestedAccountBalance(address account) public view withFallback returns (uint) {
        // this as an int in order to be able to store ZERO_PLACEHOLDER which is -1
        int v = _totalVestedAccountBalance[account];

        // 0 should never be stored to prevent reading stale value from fallback
        if (v == 0) {
            return fallbackRewardEscrow.totalVestedAccountBalance(account);
        } else {
            return _readWithZeroPlaceholder(v);
        }
    }
</source>
</class>

<class classid="240" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/SafeDecimalMath.sol" startline="88" endline="90" pcid="2175">
    function multiplyDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {
        return _multiplyDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="164" endline="166" pcid="2180">
    function divideDecimalRoundPrecise(uint x, uint y) internal pure returns (uint) {
        return _divideDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="152" endline="154" pcid="2179">
    function divideDecimalRound(uint x, uint y) internal pure returns (uint) {
        return _divideDecimalRound(x, y, UNIT);
    }
</source>
<source file="systems/source-code/SafeDecimalMath.sol" startline="104" endline="106" pcid="2176">
    function multiplyDecimalRound(uint x, uint y) internal pure returns (uint) {
        return _multiplyDecimalRound(x, y, UNIT);
    }
</source>
</class>

<class classid="241" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="73" endline="75" pcid="2190">
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp < periodFinish ? block.timestamp : periodFinish;
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="57" endline="59" pcid="2218">
    function lastTimeRewardApplicable() public view returns (uint256) {
        return block.timestamp < periodFinish ? block.timestamp : periodFinish;
    }
</source>
</class>

<class classid="242" nclones="2" nlines="6" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="77" endline="85" pcid="2191">
    function rewardPerToken() public view returns (uint256) {
        if (_totalSupply == 0) {
            return rewardPerTokenStored;
        }
        return
            rewardPerTokenStored.add(
                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)
            );
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="61" endline="69" pcid="2219">
    function rewardPerToken() public view returns (uint256) {
        if (_totalSupply == 0) {
            return rewardPerTokenStored;
        }
        return
            rewardPerTokenStored.add(
                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)
            );
    }
</source>
</class>

<class classid="243" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="87" endline="89" pcid="2192">
    function earned(address account) public view returns (uint256) {
        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="71" endline="73" pcid="2220">
    function earned(address account) public view returns (uint256) {
        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);
    }
</source>
</class>

<class classid="244" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="91" endline="93" pcid="2193">
    function getRewardForDuration() external view returns (uint256) {
        return rewardRate.mul(rewardsDuration);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="75" endline="77" pcid="2221">
    function getRewardForDuration() external view returns (uint256) {
        return rewardRate.mul(rewardsDuration);
    }
</source>
</class>

<class classid="245" nclones="2" nlines="15" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="125" endline="144" pcid="2197">
    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
        if (block.timestamp >= periodFinish) {
            rewardRate = reward.div(rewardsDuration);
        } else {
            uint256 remaining = periodFinish.sub(block.timestamp);
            uint256 leftover = remaining.mul(rewardRate);
            rewardRate = reward.add(leftover).div(rewardsDuration);
        }

        // Ensure the provided reward amount is not more than the balance in the contract.
        // This keeps the reward rate in the right range, preventing overflows due to
        // very high values of rewardRate in the earned and rewardsPerToken functions;
        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.
        uint balance = rewardsToken.balanceOf(address(this));
        require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");

        lastUpdateTime = block.timestamp;
        periodFinish = block.timestamp.add(rewardsDuration);
        emit RewardAdded(reward);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="113" endline="132" pcid="2226">
    function notifyRewardAmount(uint256 reward) external onlyRewardsDistribution updateReward(address(0)) {
        if (block.timestamp >= periodFinish) {
            rewardRate = reward.div(rewardsDuration);
        } else {
            uint256 remaining = periodFinish.sub(block.timestamp);
            uint256 leftover = remaining.mul(rewardRate);
            rewardRate = reward.add(leftover).div(rewardsDuration);
        }

        // Ensure the provided reward amount is not more than the balance in the contract.
        // This keeps the reward rate in the right range, preventing overflows due to
        // very high values of rewardRate in the earned and rewardsPerToken functions;
        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.
        uint balance = rewardsToken.balanceOf(address(this));
        require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");

        lastUpdateTime = block.timestamp;
        periodFinish = block.timestamp.add(rewardsDuration);
        emit RewardAdded(reward);
    }
</source>
</class>

<class classid="246" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/ShortingRewards.sol" startline="146" endline="153" pcid="2198">
    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
        require(
            block.timestamp > periodFinish,
            "Previous rewards period must be complete before changing the duration for the new period"
        );
        rewardsDuration = _rewardsDuration;
        emit RewardsDurationUpdated(rewardsDuration);
    }
</source>
<source file="systems/source-code/StakingRewards.sol" startline="141" endline="148" pcid="2228">
    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {
        require(
            block.timestamp > periodFinish,
            "Previous rewards period must be complete before changing the duration for the new period"
        );
        rewardsDuration = _rewardsDuration;
        emit RewardsDurationUpdated(rewardsDuration);
    }
</source>
</class>

<class classid="247" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="100" endline="102" pcid="2204">
    function multiplyDecimalRoundPrecise(int x, int y) internal pure returns (int) {
        return _multiplyDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="171" endline="173" pcid="2209">
    function divideDecimalRoundPrecise(int x, int y) internal pure returns (int) {
        return _divideDecimalRound(x, y, PRECISE_UNIT);
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="116" endline="118" pcid="2205">
    function multiplyDecimalRound(int x, int y) internal pure returns (int) {
        return _multiplyDecimalRound(x, y, UNIT);
    }
</source>
<source file="systems/source-code/SignedSafeDecimalMath.sol" startline="159" endline="161" pcid="2208">
    function divideDecimalRound(int x, int y) internal pure returns (int) {
        return _divideDecimalRound(x, y, UNIT);
    }
</source>
</class>

<class classid="248" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SynthetixDebtShare.sol" startline="142" endline="145" pcid="2318">
    function addAuthorizedBroker(address target) external onlyOwner {
        authorizedBrokers[target] = true;
        emit ChangeAuthorizedBroker(target, true);
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="152" endline="155" pcid="2320">
    function addAuthorizedToSnapshot(address target) external onlyOwner {
        authorizedToSnapshot[target] = true;
        emit ChangeAuthorizedToSnapshot(target, true);
    }
</source>
</class>

<class classid="249" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SynthetixDebtShare.sol" startline="147" endline="150" pcid="2319">
    function removeAuthorizedBroker(address target) external onlyOwner {
        authorizedBrokers[target] = false;
        emit ChangeAuthorizedBroker(target, false);
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="157" endline="160" pcid="2321">
    function removeAuthorizedToSnapshot(address target) external onlyOwner {
        authorizedToSnapshot[target] = false;
        emit ChangeAuthorizedToSnapshot(target, false);
    }
</source>
</class>

<class classid="250" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SynthetixDebtShare.sol" startline="189" endline="191" pcid="2325">
    function approve(address, uint256) external pure returns (bool) {
        revert("debt shares are not transferrable");
    }
</source>
<source file="systems/source-code/SynthetixDebtShare.sol" startline="193" endline="195" pcid="2326">
    function transfer(address, uint256) external pure returns (bool) {
        revert("debt shares are not transferrable");
    }
</source>
</class>

<class classid="251" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SynthetixState.sol" startline="67" endline="69" pcid="2348">
    function incrementTotalIssuerCount() external onlyAssociatedContract {
        totalIssuerCount = totalIssuerCount.add(1);
    }
</source>
<source file="systems/source-code/SynthetixState.sol" startline="75" endline="77" pcid="2349">
    function decrementTotalIssuerCount() external onlyAssociatedContract {
        totalIssuerCount = totalIssuerCount.sub(1);
    }
</source>
</class>

<class classid="252" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="128" endline="130" pcid="2387">
    function exchangeDynamicFeeThreshold() external view returns (uint) {
        return getExchangeDynamicFeeConfig().threshold;
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="146" endline="148" pcid="2390">
    function exchangeMaxDynamicFee() external view returns (uint) {
        return getExchangeDynamicFeeConfig().maxFee;
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="134" endline="136" pcid="2388">
    function exchangeDynamicFeeWeightDecay() external view returns (uint) {
        return getExchangeDynamicFeeConfig().weightDecay;
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="140" endline="142" pcid="2389">
    function exchangeDynamicFeeRounds() external view returns (uint) {
        return getExchangeDynamicFeeConfig().rounds;
    }
</source>
</class>

<class classid="253" nclones="17" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="276" endline="279" pcid="2413">
    function setIssuanceRatio(uint ratio) external onlyOwner {
        flexibleStorage().setIssuanceRatio(SETTING_ISSUANCE_RATIO, ratio);
        emit IssuanceRatioUpdated(ratio);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="331" endline="334" pcid="2422">
    function setSnxLiquidationPenalty(uint penalty) external onlyOwner {
        flexibleStorage().setSnxLiquidationPenalty(SETTING_SNX_LIQUIDATION_PENALTY, penalty);
        emit SnxLiquidationPenaltyUpdated(penalty);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="416" endline="419" pcid="2434">
    function setDebtSnapshotStaleTime(uint _seconds) external onlyOwner {
        flexibleStorage().setDebtSnapshotStaleTime(SETTING_DEBT_SNAPSHOT_STALE_TIME, _seconds);
        emit DebtSnapshotStaleTimeUpdated(_seconds);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="411" endline="414" pcid="2433">
    function setMinimumStakeTime(uint _seconds) external onlyOwner {
        flexibleStorage().setMinimumStakeTime(SETTING_MINIMUM_STAKE_TIME, _seconds);
        emit MinimumStakeTimeUpdated(_seconds);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="431" endline="434" pcid="2437">
    function setEtherWrapperMintFeeRate(uint _rate) external onlyOwner {
        flexibleStorage().setEtherWrapperMintFeeRate(SETTING_ETHER_WRAPPER_MINT_FEE_RATE, _rate);
        emit EtherWrapperMintFeeRateUpdated(_rate);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="426" endline="429" pcid="2436">
    function setEtherWrapperMaxETH(uint _maxETH) external onlyOwner {
        flexibleStorage().setEtherWrapperMaxETH(SETTING_ETHER_WRAPPER_MAX_ETH, _maxETH);
        emit EtherWrapperMaxETHUpdated(_maxETH);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="299" endline="302" pcid="2417">
    function setFeePeriodDuration(uint _feePeriodDuration) external onlyOwner {
        flexibleStorage().setFeePeriodDuration(SETTING_FEE_PERIOD_DURATION, _feePeriodDuration);
        emit FeePeriodDurationUpdated(_feePeriodDuration);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="291" endline="297" pcid="2416">
    function setPriceDeviationThresholdFactor(uint _priceDeviationThresholdFactor) external onlyOwner {
        flexibleStorage().setPriceDeviationThresholdFactor(
            SETTING_PRICE_DEVIATION_THRESHOLD_FACTOR,
            _priceDeviationThresholdFactor
        );
        emit PriceDeviationThresholdUpdated(_priceDeviationThresholdFactor);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="336" endline="339" pcid="2423">
    function setLiquidationPenalty(uint penalty) external onlyOwner {
        flexibleStorage().setLiquidationPenalty(SETTING_LIQUIDATION_PENALTY, penalty);
        emit LiquidationPenaltyUpdated(penalty);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="286" endline="289" pcid="2415">
    function setWaitingPeriodSecs(uint _waitingPeriodSecs) external onlyOwner {
        flexibleStorage().setWaitingPeriodSecs(SETTING_WAITING_PERIOD_SECS, _waitingPeriodSecs);
        emit WaitingPeriodSecsUpdated(_waitingPeriodSecs);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="309" endline="312" pcid="2419">
    function setLiquidationDelay(uint time) external onlyOwner {
        flexibleStorage().setLiquidationDelay(SETTING_LIQUIDATION_DELAY, time);
        emit LiquidationDelayUpdated(time);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="406" endline="409" pcid="2432">
    function setExchangeMaxDynamicFee(uint maxFee) external onlyOwner {
        flexibleStorage().setExchangeMaxDynamicFee(SETTING_EXCHANGE_MAX_DYNAMIC_FEE, maxFee);
        emit ExchangeMaxDynamicFeeUpdated(maxFee);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="481" endline="484" pcid="2445">
    function setAtomicTwapWindow(uint _window) external onlyOwner {
        flexibleStorage().setAtomicTwapWindow(SETTING_ATOMIC_TWAP_WINDOW, _window);
        emit AtomicTwapWindowUpdated(_window);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="341" endline="344" pcid="2424">
    function setSelfLiquidationPenalty(uint penalty) external onlyOwner {
        flexibleStorage().setSelfLiquidationPenalty(SETTING_SELF_LIQUIDATION_PENALTY, penalty);
        emit SelfLiquidationPenaltyUpdated(penalty);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="436" endline="439" pcid="2438">
    function setEtherWrapperBurnFeeRate(uint _rate) external onlyOwner {
        flexibleStorage().setEtherWrapperBurnFeeRate(SETTING_ETHER_WRAPPER_BURN_FEE_RATE, _rate);
        emit EtherWrapperBurnFeeRateUpdated(_rate);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="476" endline="479" pcid="2444">
    function setAtomicMaxVolumePerBlock(uint _maxVolume) external onlyOwner {
        flexibleStorage().setAtomicMaxVolumePerBlock(SETTING_ATOMIC_MAX_VOLUME_PER_BLOCK, _maxVolume);
        emit AtomicMaxVolumePerBlockUpdated(_maxVolume);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="356" endline="359" pcid="2427">
    function setRateStalePeriod(uint period) external onlyOwner {
        flexibleStorage().setRateStalePeriod(SETTING_RATE_STALE_PERIOD, period);
        emit RateStalePeriodUpdated(period);
    }
</source>
</class>

<class classid="254" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="446" endline="454" pcid="2440">
    function setWrapperMintFeeRate(address _wrapper, int _rate) external onlyOwner {
        flexibleStorage().setWrapperMintFeeRate(
            SETTING_WRAPPER_MINT_FEE_RATE,
            _wrapper,
            _rate,
            getWrapperBurnFeeRate(_wrapper)
        );
        emit WrapperMintFeeRateUpdated(_wrapper, _rate);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="456" endline="464" pcid="2441">
    function setWrapperBurnFeeRate(address _wrapper, int _rate) external onlyOwner {
        flexibleStorage().setWrapperBurnFeeRate(
            SETTING_WRAPPER_BURN_FEE_RATE,
            _wrapper,
            _rate,
            getWrapperMintFeeRate(_wrapper)
        );
        emit WrapperBurnFeeRateUpdated(_wrapper, _rate);
    }
</source>
</class>

<class classid="255" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="466" endline="469" pcid="2442">
    function setInteractionDelay(address _collateral, uint _interactionDelay) external onlyOwner {
        flexibleStorage().setInteractionDelay(SETTING_INTERACTION_DELAY, _collateral, _interactionDelay);
        emit InteractionDelayUpdated(_interactionDelay);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="471" endline="474" pcid="2443">
    function setCollapseFeeRate(address _collateral, uint _collapseFeeRate) external onlyOwner {
        flexibleStorage().setCollapseFeeRate(SETTING_COLLAPSE_FEE_RATE, _collateral, _collapseFeeRate);
        emit CollapseFeeRateUpdated(_collapseFeeRate);
    }
</source>
</class>

<class classid="256" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettings.sol" startline="500" endline="507" pcid="2448">
    function setAtomicVolatilityConsiderationWindow(bytes32 _currencyKey, uint _window) external onlyOwner {
        flexibleStorage().setAtomicVolatilityConsiderationWindow(
            SETTING_ATOMIC_VOLATILITY_CONSIDERATION_WINDOW,
            _currencyKey,
            _window
        );
        emit AtomicVolatilityConsiderationWindowUpdated(_currencyKey, _window);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="509" endline="516" pcid="2449">
    function setAtomicVolatilityUpdateThreshold(bytes32 _currencyKey, uint _threshold) external onlyOwner {
        flexibleStorage().setAtomicVolatilityUpdateThreshold(
            SETTING_ATOMIC_VOLATILITY_UPDATE_THRESHOLD,
            _currencyKey,
            _threshold
        );
        emit AtomicVolatilityUpdateThresholdUpdated(_currencyKey, _threshold);
    }
</source>
<source file="systems/source-code/SystemSettings.sol" startline="527" endline="530" pcid="2451">
    function setCrossChainSynthTransferEnabled(bytes32 _currencyKey, uint _value) external onlyOwner {
        flexibleStorage().setCrossChainSynthTransferEnabled(SETTING_CROSS_SYNTH_TRANSFER_ENABLED, _currencyKey, _value);
        emit CrossChainSynthTransferEnabledUpdated(_currencyKey, _value);
    }
</source>
</class>

<class classid="257" nclones="8" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettingsLib.sol" startline="95" endline="101" pcid="2456">
    function setWaitingPeriodSecs(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _waitingPeriodSecs
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _waitingPeriodSecs);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="219" endline="225" pcid="2468">
    function setRateStalePeriod(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint period
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, period);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="211" endline="217" pcid="2467">
    function setLiquidateReward(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint reward
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, reward);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="203" endline="209" pcid="2466">
    function setFlagReward(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint reward
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, reward);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="253" endline="259" pcid="2471">
    function setDebtSnapshotStaleTime(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _seconds
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _seconds);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="270" endline="276" pcid="2473">
    function setEtherWrapperMaxETH(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _maxETH
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _maxETH);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="103" endline="109" pcid="2457">
    function setPriceDeviationThresholdFactor(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint _priceDeviationThresholdFactor
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, _priceDeviationThresholdFactor);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="164" endline="170" pcid="2462">
    function setLiquidationEscrowDuration(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint duration
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, duration);
    }
</source>
</class>

<class classid="258" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/SystemSettingsLib.sol" startline="172" endline="181" pcid="2463">
    function setSnxLiquidationPenalty(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint penalty
    ) external {
        // MAX_LIQUIDATION_PENALTY is enforced on both Collateral and SNX liquidations
        require(penalty <= MAX_LIQUIDATION_PENALTY, "penalty > MAX_LIQUIDATION_PENALTY");

        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, penalty);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="183" endline="191" pcid="2464">
    function setSelfLiquidationPenalty(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint penalty
    ) external {
        require(penalty <= MAX_LIQUIDATION_PENALTY, "penalty > MAX_LIQUIDATION_PENALTY");

        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, penalty);
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="193" endline="201" pcid="2465">
    function setLiquidationPenalty(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        uint penalty
    ) external {
        require(penalty <= MAX_LIQUIDATION_PENALTY, "penalty > MAX_LIQUIDATION_PENALTY");

        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, settingName, penalty);
    }
</source>
</class>

<class classid="259" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettingsLib.sol" startline="296" endline="307" pcid="2476">
    function setWrapperMaxTokenAmount(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        address _wrapper,
        uint _maxTokenAmount
    ) external {
        flexibleStorage.setUIntValue(
            SETTINGS_CONTRACT_NAME,
            keccak256(abi.encodePacked(settingName, _wrapper)),
            _maxTokenAmount
        );
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="361" endline="372" pcid="2480">
    function setCollapseFeeRate(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        address _collateral,
        uint _collapseFeeRate
    ) external {
        flexibleStorage.setUIntValue(
            SETTINGS_CONTRACT_NAME,
            keccak256(abi.encodePacked(settingName, _collateral)),
            _collapseFeeRate
        );
    }
</source>
</class>

<class classid="260" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SystemSettingsLib.sol" startline="444" endline="455" pcid="2486">
    function setAtomicVolatilityUpdateThreshold(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        bytes32 _currencyKey,
        uint _threshold
    ) external {
        flexibleStorage.setUIntValue(
            SETTINGS_CONTRACT_NAME,
            keccak256(abi.encodePacked(settingName, _currencyKey)),
            _threshold
        );
    }
</source>
<source file="systems/source-code/SystemSettingsLib.sol" startline="470" endline="477" pcid="2488">
    function setCrossChainSynthTransferEnabled(
        IFlexibleStorage flexibleStorage,
        bytes32 settingName,
        bytes32 _currencyKey,
        uint _value
    ) external {
        flexibleStorage.setUIntValue(SETTINGS_CONTRACT_NAME, keccak256(abi.encodePacked(settingName, _currencyKey)), _value);
    }
</source>
</class>

<class classid="261" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="47" endline="53" pcid="2492">
    function requireIssuanceActive() external view {
        // Issuance requires the system be active
        _internalRequireSystemActive();

        // and issuance itself of course
        _internalRequireIssuanceActive();
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="55" endline="61" pcid="2493">
    function requireExchangeActive() external view {
        // Exchanging requires the system be active
        _internalRequireSystemActive();

        // and exchanging itself of course
        _internalRequireExchangeActive();
    }
</source>
</class>

<class classid="262" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="63" endline="67" pcid="2494">
    function requireSynthExchangeActive(bytes32 currencyKey) external view {
        // Synth exchange and transfer requires the system be active
        _internalRequireSystemActive();
        _internalRequireSynthExchangeActive(currencyKey);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="87" endline="91" pcid="2498">
    function requireSynthActive(bytes32 currencyKey) external view {
        // Synth exchange and transfer requires the system be active
        _internalRequireSystemActive();
        _internalRequireSynthActive(currencyKey);
    }
</source>
</class>

<class classid="263" nclones="3" nlines="8" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="120" endline="132" pcid="2502">
    function getSynthExchangeSuspensions(bytes32[] calldata synths)
        external
        view
        returns (bool[] memory exchangeSuspensions, uint256[] memory reasons)
    {
        exchangeSuspensions = new bool[](synths.length);
        reasons = new uint256[](synths.length);

        for (uint i = 0; i < synths.length; i++) {
            exchangeSuspensions[i] = synthExchangeSuspension[synths[i]].suspended;
            reasons[i] = synthExchangeSuspension[synths[i]].reason;
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="149" endline="161" pcid="2504">
    function getFuturesMarketSuspensions(bytes32[] calldata marketKeys)
        external
        view
        returns (bool[] memory suspensions, uint256[] memory reasons)
    {
        suspensions = new bool[](marketKeys.length);
        reasons = new uint256[](marketKeys.length);

        for (uint i = 0; i < marketKeys.length; i++) {
            suspensions[i] = futuresMarketSuspension[marketKeys[i]].suspended;
            reasons[i] = futuresMarketSuspension[marketKeys[i]].reason;
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="134" endline="146" pcid="2503">
    function getSynthSuspensions(bytes32[] calldata synths)
        external
        view
        returns (bool[] memory suspensions, uint256[] memory reasons)
    {
        suspensions = new bool[](synths.length);
        reasons = new uint256[](synths.length);

        for (uint i = 0; i < synths.length; i++) {
            suspensions[i] = synthSuspension[synths[i]].suspended;
            reasons[i] = synthSuspension[synths[i]].reason;
        }
    }
</source>
</class>

<class classid="264" nclones="4" nlines="6" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="197" endline="202" pcid="2508">
    function resumeSystem() external {
        _requireAccessToResume(SECTION_SYSTEM);
        systemSuspension.suspended = false;
        emit SystemResumed(uint256(systemSuspension.reason));
        systemSuspension.reason = 0;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="239" endline="244" pcid="2514">
    function resumeFutures() external {
        _requireAccessToResume(SECTION_FUTURES);
        futuresSuspension.suspended = false;
        emit FuturesResumed(uint256(futuresSuspension.reason));
        futuresSuspension.reason = 0;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="225" endline="230" pcid="2512">
    function resumeExchange() external {
        _requireAccessToResume(SECTION_EXCHANGE);
        exchangeSuspension.suspended = false;
        emit ExchangeResumed(uint256(exchangeSuspension.reason));
        exchangeSuspension.reason = 0;
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="211" endline="216" pcid="2510">
    function resumeIssuance() external {
        _requireAccessToResume(SECTION_ISSUANCE);
        issuanceSuspension.suspended = false;
        emit IssuanceResumed(uint256(issuanceSuspension.reason));
        issuanceSuspension.reason = 0;
    }
</source>
</class>

<class classid="265" nclones="3" nlines="6" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="204" endline="209" pcid="2509">
    function suspendIssuance(uint256 reason) external {
        _requireAccessToSuspend(SECTION_ISSUANCE);
        issuanceSuspension.suspended = true;
        issuanceSuspension.reason = uint248(reason);
        emit IssuanceSuspended(reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="218" endline="223" pcid="2511">
    function suspendExchange(uint256 reason) external {
        _requireAccessToSuspend(SECTION_EXCHANGE);
        exchangeSuspension.suspended = true;
        exchangeSuspension.reason = uint248(reason);
        emit ExchangeSuspended(reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="232" endline="237" pcid="2513">
    function suspendFutures(uint256 reason) external {
        _requireAccessToSuspend(SECTION_FUTURES);
        futuresSuspension.suspended = true;
        futuresSuspension.reason = uint248(reason);
        emit FuturesSuspended(reason);
    }
</source>
</class>

<class classid="266" nclones="3" nlines="5" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="247" endline="251" pcid="2515">
    function suspendFuturesMarket(bytes32 marketKey, uint256 reason) external {
        bytes32[] memory marketKeys = new bytes32[](1);
        marketKeys[0] = marketKey;
        _internalSuspendFuturesMarkets(marketKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="270" endline="274" pcid="2519">
    function suspendSynthExchange(bytes32 currencyKey, uint256 reason) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalSuspendSynthExchange(currencyKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="290" endline="294" pcid="2523">
    function suspendSynth(bytes32 currencyKey, uint256 reason) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalSuspendSynths(currencyKeys, reason);
    }
</source>
</class>

<class classid="267" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="254" endline="256" pcid="2516">
    function suspendFuturesMarkets(bytes32[] calldata marketKeys, uint256 reason) external {
        _internalSuspendFuturesMarkets(marketKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="296" endline="298" pcid="2524">
    function suspendSynths(bytes32[] calldata currencyKeys, uint256 reason) external {
        _internalSuspendSynths(currencyKeys, reason);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="276" endline="278" pcid="2520">
    function suspendSynthsExchange(bytes32[] calldata currencyKeys, uint256 reason) external {
        _internalSuspendSynthExchange(currencyKeys, reason);
    }
</source>
</class>

<class classid="268" nclones="3" nlines="5" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="259" endline="263" pcid="2517">
    function resumeFuturesMarket(bytes32 marketKey) external {
        bytes32[] memory marketKeys = new bytes32[](1);
        marketKeys[0] = marketKey;
        _internalResumeFuturesMarkets(marketKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="300" endline="304" pcid="2525">
    function resumeSynth(bytes32 currencyKey) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalResumeSynths(currencyKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="280" endline="284" pcid="2521">
    function resumeSynthExchange(bytes32 currencyKey) external {
        bytes32[] memory currencyKeys = new bytes32[](1);
        currencyKeys[0] = currencyKey;
        _internalResumeSynthsExchange(currencyKeys);
    }
</source>
</class>

<class classid="269" nclones="3" nlines="3" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="266" endline="268" pcid="2518">
    function resumeFuturesMarkets(bytes32[] calldata marketKeys) external {
        _internalResumeFuturesMarkets(marketKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="306" endline="308" pcid="2526">
    function resumeSynths(bytes32[] calldata currencyKeys) external {
        _internalResumeSynths(currencyKeys);
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="286" endline="288" pcid="2522">
    function resumeSynthsExchange(bytes32[] calldata currencyKeys) external {
        _internalResumeSynthsExchange(currencyKeys);
    }
</source>
</class>

<class classid="270" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="312" endline="314" pcid="2527">
    function _requireAccessToSuspend(bytes32 section) internal view {
        require(accessControl[section][msg.sender].canSuspend, "Restricted to access control list");
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="316" endline="318" pcid="2528">
    function _requireAccessToResume(bytes32 section) internal view {
        require(accessControl[section][msg.sender].canResume, "Restricted to access control list");
    }
</source>
</class>

<class classid="271" nclones="3" nlines="9" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="353" endline="361" pcid="2536">
    function _internalSuspendSynths(bytes32[] memory currencyKeys, uint256 reason) internal {
        _requireAccessToSuspend(SECTION_SYNTH);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            synthSuspension[currencyKey].suspended = true;
            synthSuspension[currencyKey].reason = uint248(reason);
            emit SynthSuspended(currencyKey, reason);
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="391" endline="399" pcid="2540">
    function _internalSuspendFuturesMarkets(bytes32[] memory marketKeys, uint256 reason) internal {
        _requireAccessToSuspend(SECTION_FUTURES);
        for (uint i = 0; i < marketKeys.length; i++) {
            bytes32 marketKey = marketKeys[i];
            futuresMarketSuspension[marketKey].suspended = true;
            futuresMarketSuspension[marketKey].reason = uint248(reason);
            emit FuturesMarketSuspended(marketKey, reason);
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="372" endline="380" pcid="2538">
    function _internalSuspendSynthExchange(bytes32[] memory currencyKeys, uint256 reason) internal {
        _requireAccessToSuspend(SECTION_SYNTH_EXCHANGE);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            synthExchangeSuspension[currencyKey].suspended = true;
            synthExchangeSuspension[currencyKey].reason = uint248(reason);
            emit SynthExchangeSuspended(currencyKey, reason);
        }
    }
</source>
</class>

<class classid="272" nclones="3" nlines="8" similarity="100">
<source file="systems/source-code/SystemStatus.sol" startline="363" endline="370" pcid="2537">
    function _internalResumeSynths(bytes32[] memory currencyKeys) internal {
        _requireAccessToResume(SECTION_SYNTH);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            emit SynthResumed(currencyKey, uint256(synthSuspension[currencyKey].reason));
            delete synthSuspension[currencyKey];
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="401" endline="408" pcid="2541">
    function _internalResumeFuturesMarkets(bytes32[] memory marketKeys) internal {
        _requireAccessToResume(SECTION_FUTURES);
        for (uint i = 0; i < marketKeys.length; i++) {
            bytes32 marketKey = marketKeys[i];
            emit FuturesMarketResumed(marketKey, uint256(futuresMarketSuspension[marketKey].reason));
            delete futuresMarketSuspension[marketKey];
        }
    }
</source>
<source file="systems/source-code/SystemStatus.sol" startline="382" endline="389" pcid="2539">
    function _internalResumeSynthsExchange(bytes32[] memory currencyKeys) internal {
        _requireAccessToResume(SECTION_SYNTH_EXCHANGE);
        for (uint i = 0; i < currencyKeys.length; i++) {
            bytes32 currencyKey = currencyKeys[i];
            emit SynthExchangeResumed(currencyKey, uint256(synthExchangeSuspension[currencyKey].reason));
            delete synthExchangeSuspension[currencyKey];
        }
    }
</source>
</class>

<class classid="273" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TestableAddressSet.sol" startline="30" endline="32" pcid="2552">
    function element(uint index) public view returns (address) {
        return set.elements[index];
    }
</source>
<source file="systems/source-code/TestableBytes32Set.sol" startline="30" endline="32" pcid="2559">
    function element(uint index) public view returns (bytes32) {
        return set.elements[index];
    }
</source>
</class>

<class classid="274" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="9" endline="11" pcid="2581">
    function marketKey() external view returns (bytes32 key) {
        return "";
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="13" endline="15" pcid="2582">
    function baseAsset() external view returns (bytes32 key) {
        return "";
    }
</source>
</class>

<class classid="275" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="56" endline="58" pcid="2592">
    function currentFundingRate() external view returns (int fundingRate) {
        return 0;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="60" endline="62" pcid="2593">
    function currentFundingVelocity() external view returns (int fundingVelocity) {
        return 0;
    }
</source>
</class>

<class classid="276" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="74" endline="77" pcid="2596">
    function notionalValue(address account) external view returns (int value, bool invalid) {
        account;
        return (0, false);
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="79" endline="82" pcid="2597">
    function profitLoss(address account) external view returns (int pnl, bool invalid) {
        account;
        return (0, false);
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="84" endline="87" pcid="2598">
    function accruedFunding(address account) external view returns (int funding, bool invalid) {
        account;
        return (0, false);
    }
</source>
</class>

<class classid="277" nclones="3" nlines="4" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="89" endline="92" pcid="2599">
    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid) {
        account;
        return (0, false);
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="94" endline="97" pcid="2600">
    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid) {
        account;
        return (0, false);
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="99" endline="102" pcid="2601">
    function liquidationPrice(address account) external view returns (uint price, bool invalid) {
        account;
        return (0, false);
    }
</source>
</class>

<class classid="278" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="159" endline="162" pcid="2609">
    function modifyPosition(int sizeDelta, uint desiredFillPrice) external {
        sizeDelta;
        desiredFillPrice;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="220" endline="223" pcid="2618">
    function submitOffchainDelayedOrder(int sizeDelta, uint desiredFillPrice) external {
        sizeDelta;
        desiredFillPrice;
    }
</source>
</class>

<class classid="279" nclones="2" nlines="5" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="164" endline="172" pcid="2610">
    function modifyPositionWithTracking(
        int sizeDelta,
        uint desiredFillPrice,
        bytes32 trackingCode
    ) external {
        sizeDelta;
        desiredFillPrice;
        trackingCode;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="225" endline="233" pcid="2619">
    function submitOffchainDelayedOrderWithTracking(
        int sizeDelta,
        uint desiredFillPrice,
        bytes32 trackingCode
    ) external {
        sizeDelta;
        desiredFillPrice;
        trackingCode;
    }
</source>
</class>

<class classid="280" nclones="2" nlines="4" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="236" endline="239" pcid="2620">
    function executeOrder(address account, bytes[] calldata priceUpdateData) external payable {
        account;
        priceUpdateData;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="249" endline="252" pcid="2623">
    function executeOffchainDelayedOrder(address account, bytes[] calldata priceUpdateData) external payable {
        account;
        priceUpdateData;
    }
</source>
</class>

<class classid="281" nclones="4" nlines="3" similarity="100">
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="241" endline="243" pcid="2621">
    function cancelOrder(address account) external {
        account;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="245" endline="247" pcid="2622">
    function executeDelayedOrder(address account) external {
        account;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="258" endline="260" pcid="2625">
    function cancelOffchainDelayedOrder(address account) external {
        account;
    }
</source>
<source file="systems/source-code/TestablePerpsV2MarketEmpty.sol" startline="254" endline="256" pcid="2624">
    function cancelDelayedOrder(address account) external {
        account;
    }
</source>
</class>

<class classid="282" nclones="2" nlines="3" similarity="100">
<source file="systems/source-code/TokenExchanger.sol" startline="27" endline="29" pcid="2632">
    function checkBalance(address account) public view synthetixProxyIsSet returns (uint) {
        return IERC20(integrationProxy).balanceOf(account);
    }
</source>
<source file="systems/source-code/TokenExchanger.sol" startline="35" endline="37" pcid="2634">
    function checkBalanceSNXDirect(address account) public view synthetixProxyIsSet returns (uint) {
        return IERC20(synthetix).balanceOf(account);
    }
</source>
</class>

<class classid="283" nclones="5" nlines="3" similarity="100">
<source file="systems/source-code/TradingRewards.sol" startline="95" endline="97" pcid="2647">
    function getPeriodIsClaimable(uint periodID) external view returns (bool) {
        return _periods[periodID].isFinalized;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="99" endline="101" pcid="2648">
    function getPeriodIsFinalized(uint periodID) external view returns (bool) {
        return _periods[periodID].isFinalized;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="111" endline="113" pcid="2651">
    function getPeriodAvailableRewards(uint periodID) external view returns (uint) {
        return _periods[periodID].availableRewards;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="103" endline="105" pcid="2649">
    function getPeriodRecordedFees(uint periodID) external view returns (uint) {
        return _periods[periodID].recordedFees;
    }
</source>
<source file="systems/source-code/TradingRewards.sol" startline="107" endline="109" pcid="2650">
    function getPeriodTotalRewards(uint periodID) external view returns (uint) {
        return _periods[periodID].totalRewards;
    }
</source>
</class>

</clones>
