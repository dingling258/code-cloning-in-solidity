{{
  "language": "Solidity",
  "sources": {
    "project:/contracts/manage/ManagementV2.sol": {
      "content": "// SPDX-License-Identifier: PROPRIERTARY\r\n\r\npragma solidity 0.8.17;\r\n\r\nimport \"./interfaces/IManagementV2.sol\";\r\n\r\ncontract ManagementV2 is IManagementV2 {\r\n    error ManagementRequired();\r\n    error AdminNotExist(address admin);\r\n    error AdminAlreadyExists(address admin);\r\n    error TransactionNotExist(uint256 transactionId);\r\n    error ConfirmRequired(uint256 transactionId, address admin);\r\n    error AlreadyConfirmed(uint256 transactionId, address admin);\r\n    error AlreadyExecuted(uint256 transactionId);\r\n    error AddressRequired();\r\n    error InvalidRequirements(uint256 adminCount, uint256 required);\r\n    error TransactionExpired(uint256 transactionId, uint256 expiredAt);\r\n\r\n    uint256 public constant MAX_ADMIN_COUNT = 10;\r\n    uint256 public constant TRANSACTION_TTL = 7 days;\r\n\r\n    mapping(uint256 => Transaction) private _transactions;\r\n    mapping(uint256 => mapping(address => bool)) private _confirmations;\r\n    mapping(address => bool) private _isAdmin;\r\n    address[] private _admins;\r\n    uint256 private _required;\r\n    uint256 private _transactionCount;\r\n\r\n    modifier onlyManagement() {\r\n        if (msg.sender != address(this)) {\r\n            revert ManagementRequired();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier adminDoesNotExist(address admin_) {\r\n        if (_isAdmin[admin_]) {\r\n            revert AdminAlreadyExists(admin_);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier adminExists(address admin_) {\r\n        if (!_isAdmin[admin_]) {\r\n            revert AdminNotExist(admin_);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier transactionExists(uint256 transactionId_) {\r\n        if (_transactions[transactionId_].destination == address(0)) {\r\n            revert TransactionNotExist(transactionId_);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier confirmed(uint256 transactionId_, address admin_) {\r\n        if (!_confirmations[transactionId_][admin_]) {\r\n            revert ConfirmRequired(transactionId_, admin_);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notConfirmed(uint256 transactionId_, address admin_) {\r\n        if (_confirmations[transactionId_][admin_]) {\r\n            revert AlreadyConfirmed(transactionId_, admin_);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notExecuted(uint256 transactionId_) {\r\n        if (_transactions[transactionId_].executed) {\r\n            revert AlreadyExecuted(transactionId_);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notExpired(uint256 transactionId_) {\r\n        uint256 expiredAt = _transactions[transactionId_].createdAt +\r\n            TRANSACTION_TTL;\r\n        if (block.timestamp >= expiredAt) {\r\n            revert TransactionExpired(transactionId_, expiredAt);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notNull(address address_) {\r\n        if (address_ == address(0)) {\r\n            revert AddressRequired();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier validRequirement(uint256 adminCount_, uint256 required_) {\r\n        if (\r\n            adminCount_ > MAX_ADMIN_COUNT ||\r\n            required_ > adminCount_ ||\r\n            adminCount_ < 2 ||\r\n            required_ < adminCount_ / 2 + 1\r\n        ) {\r\n            revert InvalidRequirements(adminCount_, required_);\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor sets initial admins and required number of confirmations.\r\n     * @param admins_ List of initial admins.\r\n     * @param required_ Number of required confirmations.\r\n     */\r\n    constructor(\r\n        address[] memory admins_,\r\n        uint256 required_\r\n    ) validRequirement(admins_.length, required_) {\r\n        for (uint256 i; i < admins_.length; ++i) {\r\n            if (admins_[i] == address(0)) {\r\n                revert AddressRequired();\r\n            }\r\n            if (_isAdmin[admins_[i]]) {\r\n                revert AdminAlreadyExists(admins_[i]);\r\n            }\r\n            _isAdmin[admins_[i]] = true;\r\n        }\r\n        _admins = admins_;\r\n        _required = required_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the confirmation status of a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     * @return Confirmation status.\r\n     */\r\n    function isConfirmed(\r\n        uint256 transactionId_\r\n    ) external view override returns (bool) {\r\n        return _isConfirmed(transactionId_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin status of a address.\r\n     * @param admin_ Admin address.\r\n     * @return Admin status.\r\n     */\r\n    function isAdmin(address admin_) external view override returns (bool) {\r\n        return _isAdmin[admin_];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns number of confirmations of a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     * @return count Number of confirmations.\r\n     */\r\n    function getConfirmationCount(\r\n        uint256 transactionId_\r\n    ) external view override returns (uint256 count) {\r\n        for (uint256 i; i < _admins.length; ++i) {\r\n            if (_confirmations[transactionId_][_admins[i]]) {\r\n                ++count;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns total number of transactions after filers are applied.\r\n     * @param pending_ Include pending transactions.\r\n     * @param executed_ Include executed transactions.\r\n     * @param expired_ Include expired transactions.\r\n     * @return count Total number of transactions after filters are applied.\r\n     */\r\n    function getTransactionCount(\r\n        bool pending_,\r\n        bool executed_,\r\n        bool expired_\r\n    ) external view override returns (uint256 count) {\r\n        for (uint256 i; i < _transactionCount; ++i) {\r\n            bool isExpired = _transactions[i].createdAt + TRANSACTION_TTL <\r\n                block.timestamp;\r\n            bool isExecuted = _transactions[i].executed;\r\n            if (\r\n                (expired_ && isExpired && !isExecuted) ||\r\n                (pending_ && !isExpired && !isExecuted) ||\r\n                (executed_ && isExecuted)\r\n            ) {\r\n                ++count;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns list of admins.\r\n     * @return List of admin addresses.\r\n     */\r\n    function getAdmins() external view override returns (address[] memory) {\r\n        return _admins;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns array with admin addresses, which confirmed transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     * @return confirms Returns array of admin addresses.\r\n     */\r\n    function getConfirmations(\r\n        uint256 transactionId_\r\n    ) external view override returns (address[] memory confirms) {\r\n        address[] memory confirmationsTemp = new address[](_admins.length);\r\n        uint256 count;\r\n        for (uint256 i; i < _admins.length; ++i) {\r\n            if (_confirmations[transactionId_][_admins[i]]) {\r\n                confirmationsTemp[count] = _admins[i];\r\n                ++count;\r\n            }\r\n        }\r\n        confirms = new address[](count);\r\n        for (uint256 i; i < count; ++i) {\r\n            confirms[i] = confirmationsTemp[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns list of transaction IDs in defined range.\r\n     * @param from_ Index start position of transaction array.\r\n     * @param to_ Index end position of transaction array.\r\n     * @param pending_ Include pending transactions.\r\n     * @param executed_ Include executed transactions.\r\n     * @param expired_ Include expired transactions.\r\n     * @return _transactionIds Returns array of transaction IDs.\r\n     */\r\n    function getTransactionIds(\r\n        uint256 from_,\r\n        uint256 to_,\r\n        bool pending_,\r\n        bool executed_,\r\n        bool expired_\r\n    ) external view override returns (uint256[] memory _transactionIds) {\r\n        uint256[] memory transactionIdsTemp = new uint256[](_transactionCount);\r\n        uint256 count;\r\n        uint256 i;\r\n        for (i; i < _transactionCount; ++i) {\r\n            bool isExpired = _transactions[i].createdAt + TRANSACTION_TTL <\r\n                block.timestamp;\r\n            bool isExecuted = _transactions[i].executed;\r\n            if (\r\n                (expired_ && isExpired && !isExecuted) ||\r\n                (pending_ && !isExecuted) ||\r\n                (executed_ && isExecuted)\r\n            ) {\r\n                transactionIdsTemp[count] = i;\r\n                ++count;\r\n            }\r\n        }\r\n        _transactionIds = new uint256[](to_ - from_);\r\n        for (i = from_; i < to_; ++i) {\r\n            _transactionIds[i - from_] = transactionIdsTemp[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns transaction details by id.\r\n     * @param transactionId_ The transaction id.\r\n     * @return Returns transaction details.\r\n     */\r\n    function getTransaction(\r\n        uint256 transactionId_\r\n    ) external view override returns (Transaction memory) {\r\n        return _transactions[transactionId_];\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to add a new admin. Transaction has to be sent by this contract.\r\n     * @param admin_ Address of new admin.\r\n     */\r\n    function addAdmin(\r\n        address admin_\r\n    )\r\n        external\r\n        override\r\n        onlyManagement\r\n        adminDoesNotExist(admin_)\r\n        notNull(admin_)\r\n        validRequirement(_admins.length + 1, _required + 1)\r\n    {\r\n        _required = _required + 1;\r\n        _isAdmin[admin_] = true;\r\n        _admins.push(admin_);\r\n        emit AdminAdded(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to remove an admin. Transaction has to be sent by this contract.\r\n     * @param admin_ Address of admin.\r\n     */\r\n    function removeAdmin(\r\n        address admin_\r\n    )\r\n        external\r\n        override\r\n        onlyManagement\r\n        adminExists(admin_)\r\n        validRequirement(_admins.length - 1, _required)\r\n    {\r\n        _isAdmin[admin_] = false;\r\n        uint256 adminLength = _admins.length;\r\n        for (uint256 i; i < adminLength; ++i) {\r\n            if (_admins[i] == admin_) {\r\n                _admins[i] = _admins[adminLength - 1];\r\n                _admins.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        // To avoid the use of the veto\r\n        if (_required == _admins.length) {\r\n            _changeRequirement(_admins.length - 1);\r\n        }\r\n        emit AdminRemoved(admin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to replace an admin with a new admin. Transaction has to be sent by this contract.\r\n     * @param admin_ Address of admin to be replaced.\r\n     * @param newAdmin_ Address of new admin.\r\n     */\r\n    function replaceAdmin(\r\n        address admin_,\r\n        address newAdmin_\r\n    )\r\n        external\r\n        override\r\n        onlyManagement\r\n        notNull(newAdmin_)\r\n        adminExists(admin_)\r\n        adminDoesNotExist(newAdmin_)\r\n    {\r\n        for (uint256 i; i < _admins.length; i++) {\r\n            if (_admins[i] == admin_) {\r\n                _admins[i] = newAdmin_;\r\n                break;\r\n            }\r\n        }\r\n        _isAdmin[admin_] = false;\r\n        _isAdmin[newAdmin_] = true;\r\n        emit AdminRemoved(admin_);\r\n        emit AdminAdded(newAdmin_);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n     * @param required_ Number of required confirmations.\r\n     */\r\n    function changeRequirement(\r\n        uint256 required_\r\n    ) external override onlyManagement {\r\n        _changeRequirement(required_);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an admin to submit and confirm a transaction.\r\n     * @param destination_ Transaction target address.\r\n     * @param data_ Transaction data payload.\r\n     * @return transactionId Returns transaction ID.\r\n     */\r\n    function submitTransaction(\r\n        address destination_,\r\n        bytes calldata data_\r\n    )\r\n        external\r\n        override\r\n        adminExists(msg.sender)\r\n        returns (uint256 transactionId)\r\n    {\r\n        transactionId = _addTransaction(destination_, data_);\r\n        _confirmTransaction(transactionId);\r\n        _executeTransaction(transactionId);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an admin to confirm a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     */\r\n    function confirmTransaction(\r\n        uint256 transactionId_\r\n    )\r\n        external\r\n        adminExists(msg.sender)\r\n        transactionExists(transactionId_)\r\n        notConfirmed(transactionId_, msg.sender)\r\n        notExpired(transactionId_)\r\n    {\r\n        _confirmTransaction(transactionId_);\r\n        _executeTransaction(transactionId_);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows an admin to revoke a confirmation for a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     */\r\n    function revokeConfirmation(\r\n        uint256 transactionId_\r\n    )\r\n        external\r\n        override\r\n        adminExists(msg.sender)\r\n        confirmed(transactionId_, msg.sender)\r\n        notExecuted(transactionId_)\r\n    {\r\n        _confirmations[transactionId_][msg.sender] = false;\r\n        emit Revoked(msg.sender, transactionId_);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows anyone to execute a confirmed transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     */\r\n    function executeTransaction(\r\n        uint256 transactionId_\r\n    )\r\n        external\r\n        override\r\n        adminExists(msg.sender)\r\n        confirmed(transactionId_, msg.sender)\r\n        notExecuted(transactionId_)\r\n        notExpired(transactionId_)\r\n    {\r\n        _executeTransaction(transactionId_);\r\n    }\r\n\r\n    function _addTransaction(\r\n        address destination_,\r\n        bytes calldata data_\r\n    ) internal notNull(destination_) returns (uint256 transactionId) {\r\n        transactionId = _transactionCount;\r\n        _transactions[transactionId] = Transaction({\r\n            destination: destination_,\r\n            createdAt: block.timestamp,\r\n            data: data_,\r\n            executed: false\r\n        });\r\n        ++_transactionCount;\r\n        emit Submitted(transactionId);\r\n    }\r\n\r\n    function _isConfirmed(uint256 transactionId_) internal view returns (bool) {\r\n        uint256 count;\r\n        for (uint256 i; i < _admins.length; ++i) {\r\n            if (_confirmations[transactionId_][_admins[i]]) {\r\n                ++count;\r\n            }\r\n\r\n            if (count == _required) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _confirmTransaction(uint256 transactionId_) internal {\r\n        _confirmations[transactionId_][msg.sender] = true;\r\n        emit Confirmed(msg.sender, transactionId_);\r\n    }\r\n\r\n    function _executeTransaction(uint256 transactionId_) internal {\r\n        if (_isConfirmed(transactionId_)) {\r\n            Transaction storage txn = _transactions[transactionId_];\r\n            txn.executed = true;\r\n            (bool success, bytes memory data) = txn.destination.call(txn.data);\r\n            if (success) {\r\n                emit Executed(transactionId_);\r\n            } else {\r\n                emit ExecutionFailed(transactionId_, data);\r\n                txn.executed = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _changeRequirement(\r\n        uint256 required_\r\n    ) internal validRequirement(_admins.length, required_) {\r\n        _required = required_;\r\n        emit RequirementChanged(required_);\r\n    }\r\n}\r\n"
    },
    "project:/contracts/manage/interfaces/IManagementV2.sol": {
      "content": "// SPDX-License-Identifier: PROPRIERTARY\r\n\r\npragma solidity 0.8.17;\r\n\r\ninterface IManagementV2 {\r\n    event Confirmed(address indexed sender, uint256 indexed transactionId);\r\n    event Revoked(address indexed sender, uint256 indexed transactionId);\r\n    event Submitted(uint256 indexed transactionId);\r\n    event Executed(uint256 indexed transactionId);\r\n    event ExecutionFailed(uint256 indexed transactionId, bytes reason);\r\n    event AdminAdded(address indexed admin);\r\n    event AdminRemoved(address indexed admin);\r\n    event RequirementChanged(uint256 required);\r\n\r\n    struct Transaction {\r\n        address destination;\r\n        uint256 createdAt;\r\n        bool executed;\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the confirmation status of a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     * @return Confirmation status.\r\n     */\r\n    function isConfirmed(uint256 transactionId_) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin status of a address.\r\n     * @param admin_ Admin address.\r\n     * @return Admin status.\r\n     */\r\n    function isAdmin(address admin_) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns number of confirmations of a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     * @return count Number of confirmations.\r\n     */\r\n    function getConfirmationCount(\r\n        uint256 transactionId_\r\n    ) external view returns (uint256 count);\r\n\r\n    /**\r\n     * @dev Returns total number of transactions after filers are applied.\r\n     * @param pending_ Include pending transactions.\r\n     * @param executed_ Include executed transactions.\r\n     * @param executed_ Include expired transactions.\r\n     * @return count Total number of transactions after filters are applied.\r\n     */\r\n    function getTransactionCount(\r\n        bool pending_,\r\n        bool executed_,\r\n        bool expired_\r\n    ) external view returns (uint256 count);\r\n\r\n    /**\r\n     * @dev Returns list of admins.\r\n     * @return List of admin addresses.\r\n     */\r\n    function getAdmins() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns array with admin addresses, which confirmed transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     * @return confirms Returns array of admin addresses.\r\n     */\r\n    function getConfirmations(\r\n        uint256 transactionId_\r\n    ) external view returns (address[] memory confirms);\r\n\r\n    /**\r\n     * @dev Returns list of transaction IDs in defined range.\r\n     * @param from_ Index start position of transaction array.\r\n     * @param to_ Index end position of transaction array.\r\n     * @param pending_ Include pending transactions.\r\n     * @param executed_ Include executed transactions.\r\n     * @param expired_ Include expired transactions.\r\n     * @return _transactionIds Returns array of transaction IDs.\r\n     */\r\n    function getTransactionIds(\r\n        uint256 from_,\r\n        uint256 to_,\r\n        bool pending_,\r\n        bool executed_,\r\n        bool expired_\r\n    ) external view returns (uint256[] memory _transactionIds);\r\n\r\n    /**\r\n     * @dev Returns transaction details by id.\r\n     * @param transactionId_ The transaction id.\r\n     * @return Returns transaction details.\r\n     */\r\n    function getTransaction(\r\n        uint256 transactionId_\r\n    ) external view returns (Transaction memory);\r\n\r\n    /**\r\n     * @dev Allows to add a new admin. Transaction has to be sent by this contract.\r\n     * @param admin_ Address of new admin.\r\n     */\r\n    function addAdmin(address admin_) external;\r\n\r\n    /**\r\n     * @dev Allows to remove an admin. Transaction has to be sent by this contract.\r\n     * @param admin_ Address of admin.\r\n     */\r\n    function removeAdmin(address admin_) external;\r\n\r\n    /**\r\n     * @dev Allows to replace an admin with a new admin. Transaction has to be sent by this contract.\r\n     * @param admin_ Address of admin to be replaced.\r\n     * @param newAdmin_ Address of new admin.\r\n     */\r\n    function replaceAdmin(address admin_, address newAdmin_) external;\r\n\r\n    /**\r\n     * @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\r\n     * @param required_ Number of required confirmations.\r\n     */\r\n    function changeRequirement(uint256 required_) external;\r\n\r\n    /**\r\n     * @dev Allows an admin to submit and confirm a transaction.\r\n     * @param destination_ Transaction target address.\r\n     * @param data_ Transaction data payload.\r\n     * @return transactionId Returns transaction ID.\r\n     */\r\n    function submitTransaction(\r\n        address destination_,\r\n        bytes calldata data_\r\n    ) external returns (uint256 transactionId);\r\n\r\n    /**\r\n     * @dev Allows an admin to confirm a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     */\r\n    function confirmTransaction(uint256 transactionId_) external;\r\n\r\n    /**\r\n     * @dev Allows an admin to revoke a confirmation for a transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     */\r\n    function revokeConfirmation(uint256 transactionId_) external;\r\n\r\n    /**\r\n     * @dev Allows anyone to execute a confirmed transaction.\r\n     * @param transactionId_ Transaction ID.\r\n     */\r\n    function executeTransaction(uint256 transactionId_) external;\r\n}\r\n"
    }
  },
  "settings": {
    "remappings": [],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "london",
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}