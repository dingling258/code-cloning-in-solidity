{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "shanghai",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "contracts/Structs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { DCSProduct, DCSVault } from \"./cega-strategies/dcs/DCSStructs.sol\";\nimport { FCNProduct, FCNVault } from \"./cega-strategies/fcn/FCNStructs.sol\";\nimport { IOracleEntry } from \"./oracle-entry/interfaces/IOracleEntry.sol\";\n\nuint32 constant DCS_STRATEGY_ID = 1;\nuint32 constant FCN_STRATEGY_ID = 2;\n\nstruct DepositQueue {\n    uint128 queuedDepositsTotalAmount;\n    uint128 processedIndex;\n    mapping(address => uint128) amounts;\n    address[] depositors;\n    mapping(address => bool) depositorExists;\n}\n\nstruct Withdrawer {\n    address account;\n    uint32 nextProductId;\n}\n\nstruct ProductMetadata {\n    string name;\n    string tradeWinnerNftImage;\n}\n\nstruct WithdrawalQueue {\n    uint128 queuedWithdrawalSharesAmount;\n    uint128 processedIndex;\n    mapping(address => mapping(uint32 => uint256)) amounts;\n    Withdrawer[] withdrawers;\n    mapping(address => bool) withdrawingWithProxy;\n}\n\nstruct CegaGlobalStorage {\n    // Global information\n    uint32 strategyIdCounter;\n    uint32 productIdCounter;\n    uint32[] strategyIds;\n    mapping(uint32 => uint32) strategyOfProduct;\n    mapping(uint32 => ProductMetadata) productMetadata;\n    mapping(address => Vault) vaults;\n    // DCS information\n    mapping(uint32 => DCSProduct) dcsProducts;\n    // Shared\n    mapping(uint32 => DepositQueue) depositQueues;\n    // DCS information\n    mapping(address => DCSVault) dcsVaults;\n    // Shared\n    mapping(address => WithdrawalQueue) withdrawalQueues;\n    // vaultAddress => (asset/s hash => timestamp => price)\n    mapping(address => mapping(bytes32 => mapping(uint40 => uint128))) oraclePriceOverride;\n    // this will be a bitmap that has all the configs for pausing\n    uint256 protocolPauseConfig;\n    // FCN information\n    mapping(uint32 => FCNProduct) fcnProducts;\n    mapping(address => FCNVault) fcnVaults;\n    mapping(address => bool) fcnBondAllowList;\n}\n\nstruct Vault {\n    uint128 totalAssets;\n    uint64 auctionWinnerTokenId;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n    uint32 productId;\n    address auctionWinner;\n    uint40 tradeStartDate;\n    VaultStatus vaultStatus;\n    IOracleEntry.DataSource dataSource;\n    bool isInDispute;\n    bool isDefaulted;\n}\n\nenum OldVaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    NotTraded,\n    Traded,\n    TradeExpired,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n\nenum VaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    PreAuction,\n    Auctioned,\n    Traded,\n    AwaitingSettlement,\n    Settled,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n\nstruct MMNFTMetadata {\n    address vaultAddress;\n    uint40 tradeStartDate;\n    uint40 tradeEndDate;\n    uint16 aprBps;\n    uint128 notional;\n    uint128 initialSpotPrice;\n    uint128 strikePrice;\n}\n\nstruct VaultCreationParams {\n    string tokenName;\n    string tokenSymbol;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n}\n"
    },
    "contracts/aux/interfaces/IACLManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.24;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ninterface IACLManager {\n    /**\n     * @notice Sets the admin role for a specific role.\n     * @param role The role for which to set the admin.\n     * @param adminRole The admin role to be set for the specified role.\n     */\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\n\n    /**\n     * @notice Adds a new Cega Admin.\n     * @param admin The address to be granted Cega Admin role.\n     */\n    function addCegaAdmin(address admin) external;\n\n    /**\n     * @notice Removes a Cega Admin.\n     * @param admin The address to be removed from Cega Admin role.\n     */\n    function removeCegaAdmin(address admin) external;\n\n    /**\n     * @notice Adds a new Trader Admin.\n     * @param admin The address to be granted Trader Admin role.\n     */\n    function addTraderAdmin(address admin) external;\n\n    /**\n     * @notice Removes a Trader Admin.\n     * @param admin The address to be removed from Trader Admin role.\n     */\n    function removeTraderAdmin(address admin) external;\n\n    /**\n     * @notice Adds a new Operator Admin.\n     * @param admin The address to be granted Operator Admin role.\n     */\n    function addOperatorAdmin(address admin) external;\n\n    /**\n     * @notice Removes an Operator Admin.\n     * @param admin The address to be removed from Operator Admin role.\n     */\n    function removeOperatorAdmin(address admin) external;\n\n    /**\n     * @notice Adds a new Service Admin.\n     * @param admin The address to be granted Service Admin role.\n     */\n    function addServiceAdmin(address admin) external;\n\n    /**\n     * @notice Removes a Service Admin.\n     * @param admin The address to be removed from Service Admin role.\n     */\n    function removeServiceAdmin(address admin) external;\n\n    /**\n     * @notice Checks if an address is a Cega Admin.\n     * @param admin The address to check for Cega Admin role.\n     * @return bool True if the address is a Cega Admin, false otherwise.\n     */\n    function isCegaAdmin(address admin) external view returns (bool);\n\n    /**\n     * @notice Checks if an address is a Trader Admin.\n     * @param admin The address to check for Trader Admin role.\n     * @return bool True if the address is a Trader Admin, false otherwise.\n     */\n    function isTraderAdmin(address admin) external view returns (bool);\n\n    /**\n     * @notice Checks if an address is an Operator Admin.\n     * @param admin The address to check for Operator Admin role.\n     * @return bool True if the address is an Operator Admin, false otherwise.\n     */\n    function isOperatorAdmin(address admin) external view returns (bool);\n\n    /**\n     * @notice Checks if an address is a Service Admin.\n     * @param admin The address to check for Service Admin role.\n     * @return bool True if the address is a Service Admin, false otherwise.\n     */\n    function isServiceAdmin(address admin) external view returns (bool);\n}\n"
    },
    "contracts/aux/interfaces/IAddressManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.24;\n\nimport { ICegaEntry } from \"../../cega-entry/interfaces/ICegaEntry.sol\";\n\ninterface IAddressManager {\n    /**\n     * @dev Emitted when a new CegaEntry is created.\n     * @param id The identifier of the proxy\n     * @param proxyAddress The address of the created proxy contract\n     * @param implementationParams The params of the implementation update\n     */\n    event CegaEntryCreated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        ICegaEntry.ProxyImplementation[] indexed implementationParams\n    );\n\n    /**\n     * @dev Emitted when the CegaEntry is updated.\n     * @param implementationParams The old address of the CegaEntry\n     * @param _init The new address to call upon upgrade\n     * @param _calldata The calldata input for the call\n     */\n    event CegaEntryUpdated(\n        ICegaEntry.ProxyImplementation[] indexed implementationParams,\n        address _init,\n        bytes _calldata\n    );\n\n    /**\n     * @dev Emitted when a new address is set\n     * @param id The identifier of the proxy\n     * @param oldAddress The previous address assoicated with the id\n     * @param newAddress The new address set to the id\n     */\n    event AddressSet(\n        bytes32 indexed id,\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when asset wrapping proxy is updated\n     * @param asset The address of the asset.\n     * @param proxy The address of the new proxy.\n     */\n    event AssetProxyUpdated(address asset, address proxy);\n\n    /**\n     * @dev Returns the address of the Cega Oracle.\n     * @return The address of the Cega Oracle.\n     */\n    function getCegaOracle() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Cega Entry.\n     * @return The address of the Cega Entry.\n     */\n    function getCegaEntry() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Trade Winner NFT.\n     * @return The address of the Trade Winner NFT.\n     */\n    function getTradeWinnerNFT() external view returns (address);\n\n    /**\n     * @dev Returns the address of the ACL Manager.\n     * @return The address of the ACL Manager.\n     */\n    function getACLManager() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Redeposit Manager.\n     * @return The address of the Redeposit Manager.\n     */\n    function getRedepositManager() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Cega Fee Receiver.\n     * @return The address of the Cega Fee Receiver.\n     */\n    function getCegaFeeReceiver() external view returns (address);\n\n    /**\n     * @dev Retrieves the address associated with a given ID.\n     * @param id The bytes32 ID.\n     * @return The associated address.\n     */\n    function getAddress(bytes32 id) external view returns (address);\n\n    /**\n     * @dev Retrieves the asset wrapping proxy address for a given asset.\n     * @param asset The address of the asset.\n     * @return The address of the asset wrapping proxy.\n     */\n    function getAssetWrappingProxy(\n        address asset\n    ) external view returns (address);\n\n    /**\n     * @dev Sets the address of the Cega Entry contract.\n     * @param newAddress The new address of the Cega Entry contract.\n     */\n    function setCegaEntry(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Trade Winner NFT contract.\n     * @param newAddress The new address of the Trade Winner NFT contract.\n     */\n    function setTradeWinnerNFT(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Cega Oracle contract.\n     * @param newAddress The new address of the Cega Oracle contract.\n     */\n    function setCegaOracle(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Redeposit Manager contract.\n     * @param newAddress The new address of the Redeposit Manager contract.\n     */\n    function setRedepositManager(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Cega Fee Receiver address.\n     * @param newAddress The new address of the Cega Fee Receiver contract.\n     */\n    function setCegaFeeReceiver(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the ACL Manager contract.\n     * @param newAddress The new address of the ACL Manager contract.\n     */\n    function setACLManager(address newAddress) external;\n\n    /**\n     * @dev Sets a new address for a given ID.\n     * @param id The bytes32 ID.\n     * @param newAddress The new address to be associated with the ID.\n     */\n    function setAddress(bytes32 id, address newAddress) external;\n\n    /**\n     * @dev Sets a new asset wrapping proxy for a given asset.\n     * @param asset The address of the asset.\n     * @param proxy The address of the new proxy.\n     */\n    function setAssetWrappingProxy(address asset, address proxy) external;\n\n    /**\n     * @dev Updates the implementation of the Cega Entry.\n     * @param implementationParams An array of new implementation parameters.\n     * @param _init The address to call upon upgrade.\n     * @param _calldata The calldata input for the call.\n     */\n    function updateCegaEntryImpl(\n        ICegaEntry.ProxyImplementation[] calldata implementationParams,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n}\n"
    },
    "contracts/cega-entry/interfaces/ICegaEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.10;\n\n/******************************************************************************\\\n* EIP-2535: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface ICegaEntry {\n    enum ProxyImplementationAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct ProxyImplementation {\n        address implAddress;\n        ProxyImplementationAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _implementationParams Contains the implementation addresses and function selectors\n    /// @param _init The address of the contract or implementation to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        ProxyImplementation[] calldata _implementationParams,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(\n        ProxyImplementation[] _diamondCut,\n        address _init,\n        bytes _calldata\n    );\n}\n"
    },
    "contracts/cega-strategies/common/interfaces/ICommonEvents.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { VaultStatus, OldVaultStatus } from \"../../../Structs.sol\";\n\ninterface ICommonEvents {\n    event DepositQueued(\n        uint32 indexed productId,\n        address sender,\n        address receiver,\n        uint128 amount\n    );\n\n    event DepositRemoved(\n        uint32 indexed productId,\n        address depositor,\n        uint128 amount\n    );\n\n    event DepositProcessed(\n        address indexed vaultAddress,\n        address receiver,\n        uint128 amount\n    );\n\n    event WithdrawalQueued(\n        address indexed vaultAddress,\n        uint256 sharesAmount,\n        address owner,\n        uint32 nextProductId,\n        bool withProxy\n    );\n\n    event WithdrawalProcessed(\n        address indexed vaultAddress,\n        uint256 sharesAmount,\n        address owner,\n        uint32 nextProductId\n    );\n\n    event CommonVaultStatusUpdated(\n        address indexed vaultAddress,\n        VaultStatus vaultStatus\n    );\n\n    event VaultDefaultUpdated(address indexed vaultAddress, bool value);\n\n    event OraclePriceOverriden(\n        address indexed vaultAddress,\n        address indexed asset,\n        uint256 timestamp,\n        uint256 newPrice\n    );\n\n    event ManagementFeeUpdated(address indexed vaultAddress, uint16 value);\n\n    event YieldFeeUpdated(address indexed vaultAddress, uint16 value);\n\n    event ProductNameUpdated(uint32 indexed productId, string name);\n\n    event TradeWinnerNftImageUpdated(uint32 indexed productId, string imageUrl);\n\n    // Legacy event, left for compatibility\n\n    event VaultStatusUpdated(\n        address indexed vaultAddress,\n        OldVaultStatus vaultStatus\n    );\n}\n"
    },
    "contracts/cega-strategies/dcs/DCSStructs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nenum DCSOptionType {\n    BuyLow,\n    SellHigh\n}\n\nenum SettlementStatus {\n    NotAuctioned,\n    Auctioned,\n    InitialPremiumPaid,\n    AwaitingSettlement,\n    Settled,\n    Defaulted\n}\n\nstruct DCSProductCreationParams {\n    uint128 maxUnderlyingAmountLimit;\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    address quoteAssetAddress;\n    address baseAssetAddress;\n    DCSOptionType dcsOptionType;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint16 lateFeeBps;\n    uint16 strikeBarrierBps;\n    uint40 tenorInSeconds;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    string name;\n    string tradeWinnerNftImage;\n}\n\nstruct DCSProduct {\n    uint128 maxUnderlyingAmountLimit;\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 sumVaultUnderlyingAmounts; //revisit later\n    address quoteAssetAddress; // should be immutable\n    uint40 tenorInSeconds;\n    uint16 lateFeeBps;\n    uint8 daysToStartLateFees;\n    address baseAssetAddress; // should be immutable\n    uint16 strikeBarrierBps;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    DCSOptionType dcsOptionType;\n    bool isDepositQueueOpen;\n    address[] vaults;\n    uint8 disputeGraceDelayInHours;\n}\n\nstruct DCSVault {\n    uint128 initialSpotPrice;\n    uint128 strikePrice;\n    uint128 totalYield;\n    uint16 aprBps;\n    SettlementStatus settlementStatus; // DEPRECATED\n    bool isPayoffInDepositAsset;\n}\n"
    },
    "contracts/cega-strategies/fcn/FCNOverrideEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { CegaGlobalStorage } from \"../../Structs.sol\";\nimport { EntryBase } from \"../../common/EntryBase.sol\";\nimport { IAddressManager } from \"../../aux/interfaces/IAddressManager.sol\";\nimport { IFCNOverrideEntry } from \"./interfaces/IFCNOverrideEntry.sol\";\nimport { IFCNEvents } from \"./interfaces/IFCNEvents.sol\";\nimport { Errors } from \"../../utils/Errors.sol\";\n\ncontract FCNOverrideEntry is IFCNOverrideEntry, IFCNEvents, EntryBase {\n    // CONSTRUCTOR\n\n    constructor(IAddressManager _addressManager) EntryBase(_addressManager) {}\n\n    // FUNCTIONS\n\n    function fcnBulkSetIsBondOption(\n        uint32[] calldata productIds,\n        bool[] calldata isBondOptions\n    ) external onlyCegaAdmin {\n        require(\n            productIds.length == isBondOptions.length,\n            Errors.INVALID_ARRAY_LENGTH\n        );\n\n        CegaGlobalStorage storage cgs = getStorage();\n\n        for (uint256 i = 0; i < productIds.length; i++) {\n            cgs.fcnProducts[productIds[i]].isBondOption = isBondOptions[i];\n            emit FCNProductIsBondOptionUpdated(productIds[i], isBondOptions[i]);\n        }\n    }\n}\n"
    },
    "contracts/cega-strategies/fcn/FCNStructs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { IOracleEntry } from \"../../oracle-entry/interfaces/IOracleEntry.sol\";\n\nstruct FCNProductCreationParams {\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 maxUnderlyingAmountLimit;\n    address underlyingAsset;\n    uint64 leverage;\n    uint40 tenorInSeconds;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    uint16 lateFeeBps;\n    string name;\n    string tradeWinnerNftImage;\n    bool isBondOption;\n    uint24 observationIntervalInSeconds;\n    FCNOptionBarrier[] optionBarriers;\n}\n\nstruct FCNProduct {\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 maxUnderlyingAmountLimit;\n    uint128 sumVaultUnderlyingAmounts;\n    address underlyingAsset;\n    uint64 leverage;\n    uint40 tenorInSeconds;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    uint16 lateFeeBps;\n    bool isDepositQueueOpen;\n    bool isBondOption;\n    uint24 observationIntervalInSeconds;\n    FCNOptionBarrier[] optionBarriers;\n    address[] vaults;\n}\n\nstruct FCNVaultCreationParams {\n    string tokenName;\n    string tokenSymbol;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n}\n\nstruct FCNVaultBarrierData {\n    uint128 initialSpotPrice;\n    IOracleEntry.DataSource dataSource;\n}\n\nstruct FCNVault {\n    uint128 notional;\n    uint128 totalYield;\n    uint16 aprBps;\n    bool isKnockedIn;\n    uint16 observationsDone;\n    uint96 buffer; // buffer if we need to add any more data\n    FCNVaultBarrierData[] barrierData;\n}\n\nstruct FCNOptionBarrier {\n    uint16 barrierBps;\n    FCNOptionBarrierType barrierType;\n    address asset;\n    uint8 exponent;\n}\n\nenum FCNOptionBarrierType {\n    None,\n    KnockIn\n}\n\nenum FCNVaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    PreAuction,\n    Auctioned,\n    Traded,\n    AwaitingSettlement,\n    Settled,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n"
    },
    "contracts/cega-strategies/fcn/interfaces/IFCNEvents.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { ICommonEvents } from \"../../common/interfaces/ICommonEvents.sol\";\nimport { FCNVaultCreationParams } from \"../FCNStructs.sol\";\n\ninterface IFCNEvents is ICommonEvents {\n    event FCNProductCreated(uint32 indexed productId);\n\n    event FCNVaultCreated(\n        uint32 indexed productId,\n        address indexed vaultAddress,\n        FCNVaultCreationParams creationParams\n    );\n\n    event FCNLateFeeBpsUpdated(uint32 indexed productId, uint16 lateFeeBps);\n\n    event FCNMinDepositAmountUpdated(\n        uint32 indexed productId,\n        uint128 minDepositAmount\n    );\n\n    event FCNMinWithdrawalAmountUpdated(\n        uint32 indexed productId,\n        uint128 minWithdrawalAmount\n    );\n\n    event FCNIsDepositQueueOpenUpdated(\n        uint32 indexed productId,\n        bool isDepositQueueOpen\n    );\n\n    event FCNMaxUnderlyingAmountLimitUpdated(\n        uint32 indexed productId,\n        uint128 maxUnderlyingAmountLimit\n    );\n\n    event FCNDisputePeriodInHoursUpdated(\n        uint32 indexed productId,\n        uint8 disputePeriodInHours\n    );\n\n    event FCNDisputeGraceDelayInHoursUpdated(\n        uint32 indexed productId,\n        uint8 disputeGraceDelayInHours\n    );\n\n    event FCNDaysToStartLateFeesUpdated(\n        uint32 indexed productId,\n        uint8 daysToStartLateFees\n    );\n\n    event FCNDaysToStartAuctionDefaultUpdated(\n        uint32 indexed productId,\n        uint8 daysToStartAuctionDefault\n    );\n\n    event FCNDaysToStartSettlementDefaultUpdated(\n        uint32 indexed productId,\n        uint8 daysToStartSettlementDefault\n    );\n\n    event FCNAuctionEnded(\n        address indexed vaultAddress,\n        address indexed auctionWinner,\n        uint40 tradeStartDate,\n        uint16 aprBps,\n        uint128[] initialSpotPrices\n    );\n\n    event FCNTradeStarted(\n        address indexed vaultAddress,\n        address auctionWinner,\n        uint128 notionalAmount,\n        uint128 yieldAmount\n    );\n\n    event FCNIsKnockedInUpdated(address indexed vaultAddress, bool isKnockedIn);\n\n    event FCNLateFeePaid(address indexed vaultAddress, uint128 feeAmount);\n\n    event FCNBondRepaid(address indexed vaultAddress, uint128 amount);\n\n    event FCNVaultRolledOver(address indexed vaultAddress);\n\n    event FCNBondAllowListUpdated(address indexed receiver, bool value);\n\n    event FCNVaultFeesCollected(\n        address indexed vaultAddress,\n        uint128 totalFees,\n        uint128 managementFee,\n        uint128 yieldFee\n    );\n\n    event FCNDisputeProcessed(\n        address indexed vaultAddress,\n        bool isDisputeAccepted,\n        uint8 barrierIndex,\n        uint40 timestamp,\n        uint128 newPrice\n    );\n\n    event FCNDisputeSubmitted(\n        address indexed vaultAddress,\n        uint8 barrierIndex,\n        uint40 timestamp\n    );\n\n    event FCNProductIsBondOptionUpdated(\n        uint32 indexed productId,\n        bool isBondOption\n    );\n}\n"
    },
    "contracts/cega-strategies/fcn/interfaces/IFCNOverrideEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\ninterface IFCNOverrideEntry {\n    function fcnBulkSetIsBondOption(\n        uint32[] calldata productIds,\n        bool[] calldata isBondOptions\n    ) external;\n}\n"
    },
    "contracts/common/EntryBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { CegaStorage } from \"../storage/CegaStorage.sol\";\nimport { CegaGlobalStorage } from \"../Structs.sol\";\nimport { IAddressManager } from \"../aux/interfaces/IAddressManager.sol\";\nimport { IACLManager } from \"../aux/interfaces/IACLManager.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\nimport {\n    ReentrancyGuard\n} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nabstract contract EntryBase is ReentrancyGuard, CegaStorage {\n    // CONSTANTS & IMMUTABLE\n\n    uint256 internal constant MAX_BPS = 1e4;\n\n    IAddressManager internal immutable addressManager;\n\n    // MODIFIERS\n\n    modifier onlyCegaAdmin() {\n        require(\n            IACLManager(addressManager.getACLManager()).isCegaAdmin(msg.sender),\n            Errors.NOT_CEGA_ADMIN\n        );\n        _;\n    }\n\n    modifier onlyTraderAdmin() {\n        require(\n            IACLManager(addressManager.getACLManager()).isTraderAdmin(\n                msg.sender\n            ),\n            Errors.NOT_TRADER_ADMIN\n        );\n        _;\n    }\n\n    modifier onlyValidVault(address vaultAddress) {\n        CegaGlobalStorage storage cgs = getStorage();\n        require(cgs.vaults[vaultAddress].productId != 0, Errors.INVALID_VAULT);\n        _;\n    }\n\n    modifier onlyIfNotPaused() {\n        CegaGlobalStorage storage cgs = getStorage();\n        require(cgs.protocolPauseConfig == 0, Errors.PROTOCOL_PAUSED);\n        _;\n    }\n\n    modifier onlyValidProductStrategy(uint32 strategyId, uint32 productId) {\n        CegaGlobalStorage storage cgs = getStorage();\n        require(\n            cgs.strategyOfProduct[productId] == strategyId,\n            Errors.WRONG_STRATEGY\n        );\n        _;\n    }\n\n    modifier onlyValidVaultStrategy(uint32 strategyId, address vaultAddress) {\n        CegaGlobalStorage storage cgs = getStorage();\n\n        require(\n            cgs.strategyOfProduct[cgs.vaults[vaultAddress].productId] ==\n                strategyId,\n            Errors.INVALID_VAULT\n        );\n        _;\n    }\n\n    modifier onlyValidVaultsStrategy(\n        uint32 strategyId,\n        address[] calldata vaultAddresses\n    ) {\n        CegaGlobalStorage storage cgs = getStorage();\n\n        for (uint256 index = 0; index < vaultAddresses.length; index++) {\n            require(\n                cgs.strategyOfProduct[\n                    cgs.vaults[vaultAddresses[index]].productId\n                ] == strategyId,\n                Errors.INVALID_VAULT\n            );\n        }\n        _;\n    }\n\n    // CONSTRUCTOR\n\n    constructor(IAddressManager _addressManager) {\n        addressManager = _addressManager;\n    }\n}\n"
    },
    "contracts/oracle-entry/interfaces/IOracleEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.24;\n\ninterface IOracleEntry {\n    enum DataSource {\n        None,\n        Pyth\n    }\n\n    /**\n     * @dev Emitted when a data source adapter is set.\n     * @param dataSource The data source for which the adapter is set.\n     * @param adapter The address of the adapter.\n     */\n    event DataSourceAdapterSet(DataSource dataSource, address adapter);\n\n    /**\n     * @notice Gets the price of an asset at a specific timestamp using a data source.\n     * @param asset The address of the asset.\n     * @param timestamp The timestamp for which the price is required.\n     * @param dataSource The data source to use for fetching the price.\n     * @return The price of the asset at the specified timestamp.\n     */\n    function getSinglePrice(\n        address asset,\n        uint40 timestamp,\n        DataSource dataSource\n    ) external view returns (uint128);\n\n    /**\n     * @notice Gets the price of a base asset in terms of a quote asset at a specific timestamp using a data source.\n     * @param baseAsset The address of the base asset.\n     * @param quoteAsset The address of the quote asset.\n     * @param timestamp The timestamp for which the price is required.\n     * @param dataSource The data source to use for fetching the price.\n     * @return The price of the base asset in terms of the quote asset at the specified timestamp.\n     */\n    function getPrice(\n        address baseAsset,\n        address quoteAsset,\n        uint40 timestamp,\n        DataSource dataSource\n    ) external view returns (uint128);\n\n    /**\n     * @notice Sets the adapter for a specific data source.\n     * @param dataSource The data source for which to set the adapter.\n     * @param adapter The address of the adapter.\n     */\n    function setDataSourceAdapter(\n        DataSource dataSource,\n        address adapter\n    ) external;\n\n    /**\n     * @notice Returns the target number of decimals for price values.\n     * @return The number of decimals.\n     */\n    function getTargetDecimals() external pure returns (uint8);\n}\n"
    },
    "contracts/storage/CegaStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { CegaGlobalStorage } from \"../Structs.sol\";\n\ncontract CegaStorage {\n    bytes32 private constant CEGA_STORAGE_POSITION =\n        bytes32(uint256(keccak256(\"cega.global.storage\")) - 1);\n\n    function getStorage() internal pure returns (CegaGlobalStorage storage ds) {\n        bytes32 position = CEGA_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n}\n"
    },
    "contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nlibrary Errors {\n    string public constant NOT_CEGA_ENTRY = \"1\";\n    string public constant NOT_CEGA_ADMIN = \"2\";\n    string public constant NOT_TRADER_ADMIN = \"3\";\n    string public constant NOT_TRADE_WINNER = \"4\";\n    string public constant INVALID_VAULT = \"5\";\n    string public constant INVALID_VAULT_STATUS = \"6\";\n    string public constant VAULT_IN_ZOMBIE_STATE = \"7\";\n    string public constant TRADE_DEFAULTED = \"8\";\n    string public constant INVALID_SETTLEMENT_STATUS = \"9\";\n    string public constant VAULT_IN_DISPUTE = \"10\";\n    string public constant VAULT_NOT_IN_DISPUTE = \"11\";\n    string public constant OUTSIDE_DISPUTE_PERIOD = \"12\";\n    string public constant TRADE_HAS_NO_WINNER = \"13\";\n    string public constant TRADE_NOT_CONVERTED = \"14\";\n    string public constant TRADE_CONVERTED = \"15\";\n    string public constant INVALID_TRADE_END_DATE = \"16\";\n    string public constant INVALID_PRICE = \"17\";\n    string public constant VALUE_TOO_SMALL = \"18\";\n    string public constant VALUE_TOO_LARGE = \"19\";\n    string public constant VALUE_IS_ZERO = \"20\";\n    string public constant MAX_DEPOSIT_LIMIT_REACHED = \"21\";\n    string public constant DEPOSIT_QUEUE_NOT_OPEN = \"22\";\n    string public constant INVALID_QUOTE_OR_BASE_ASSETS = \"23\";\n    string public constant INVALID_MIN_DEPOSIT_AMOUNT = \"24\";\n    string public constant INVALID_MIN_WITHDRAWAL_AMOUNT = \"25\";\n    string public constant INVALID_STRIKE_PRICE = \"26\";\n    string public constant TRANSFER_FAILED = \"27\";\n    string public constant NOT_AVAILABLE_DATA_SOURCE = \"28\";\n    string public constant NO_PRICE_AVAILABLE = \"29\";\n    string public constant NO_PRICE_FEED_SET = \"30\";\n    string public constant INCOMPATIBLE_PRICE = \"31\";\n    string public constant NOT_CEGA_ENTRY_OR_REDEPOSIT_MANAGER = \"32\";\n    string public constant NO_PROXY_FOR_REDEPOSIT = \"33\";\n    string public constant NOT_TRADE_WINNER_OR_TRADER_ADMIN = \"34\";\n    string public constant TRADE_NOT_STARTED = \"35\";\n    string public constant NOT_AVAILABLE_SWAP_TYPE = \"36\";\n    string public constant NOT_AVAILABLE_SWAP_PATH = \"37\";\n    string public constant PROTOCOL_PAUSED = \"38\";\n    string public constant WRONG_STRATEGY = \"39\";\n    string public constant INVALID_ARRAY_LENGTH = \"40\";\n    string public constant UNKNOWN_BARRIER_TYPE = \"41\";\n    string public constant NOT_BOND_OPTION = \"42\";\n    string public constant UNAUTHORIZED_BOND_RECEIVER = \"43\";\n    string public constant REMAINING_VALUE_TOO_SMALL = \"44\";\n    string public constant VALUE_IN_DISPUTE_GRACE_DELAY = \"45\";\n}\n"
    }
  }
}}