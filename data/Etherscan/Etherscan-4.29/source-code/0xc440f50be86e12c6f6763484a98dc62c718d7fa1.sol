{"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"DropsPinkLock02Marketplace.sol":{"content":"//SPDX-Lisence-Identifier: MIT\n\n/*⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀\n⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠛⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ \n\nDrops Lock Marketplace is the first locked liquidity marketplace.\nThis smart contract is our Pinksale Liquidity Lock marketplace.\n\nhttps://drops.site\nhttps://t.me/dropserc\nhttps://x.com/dropserc\n\n$DROPS token address -\u003e 0xA562912e1328eEA987E04c2650EfB5703757850C\n\n*/\n\npragma solidity ^0.8.0;\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\nimport \"./ReentrancyGuard.sol\";\n\n\ninterface IPinkLock02 {\n    struct Lock {\n        uint256 id;\n        address token;\n        address owner;\n        uint256 amount;\n        uint256 lockDate;\n        uint256 tgeDate; // TGE date for vesting locks, unlock date for normal locks\n        uint256 tgeBps; // In bips. Is 0 for normal locks\n        uint256 cycle; // Is 0 for normal locks\n        uint256 cycleBps; // In bips. Is 0 for normal locks\n        uint256 unlockedAmount;\n        string description;\n    }\n\n    function transferLockOwnership(uint256 lockId, address newOwner) external;\n\n    function getLockById(uint256 lockId) external view returns (Lock memory);\n}\n\ncontract PinksaleMart is Ownable, ReentrancyGuard {\n    // Zero address constant\n    address zeroAddress = 0x0000000000000000000000000000000000000000;\n    // Pinksale locker address\n    IPinkLock02 public pinkLock;\n    // Drops token address\n    IERC20 public dropsToken;\n\n    address payable public feeWallet;\n    uint256 public listingCount;\n    address public marketplaceOwner;\n    uint256 public activeListings;\n    uint256 public listedLPsCount;\n    uint256 public ethFee;\n    uint256 public referralBonus;\n\n    struct Listing {\n        uint256 lockID;\n        uint256 listingID;\n        address payable seller;\n        address lpAddress;\n        uint256 priceInETH;\n        uint256 priceInDrops;\n        uint256 listDate;\n        bool isActive;\n        bool isSold;\n        address payable referral;\n        bool isVerified;\n    }\n\n    struct ListingDetail {\n        uint256 lockID;\n        address lpAddress;\n    }\n\n    mapping(address =\u003e mapping(uint256 =\u003e Listing)) public lpToLockID;\n    // Deal with listingDetail\n    mapping(uint256 =\u003e ListingDetail) public listingDetail;\n    mapping(address =\u003e bool) public isLPListed;\n\n    // Relevant events\n    event LockPurchasedWithETH(\n        address lpToken,\n        uint256 lockID,\n        uint256 profitInETH,\n        uint256 feeETH\n    );\n    event LockPurchasedWithDrops(\n        address lpToken,\n        uint256 lockID,\n        uint256 profitInDrops\n    );\n    event ListingInitiated(address lpToken, uint256 lockID, address seller);\n    event NewActiveListing(\n        address lpToken,\n        uint256 lockID,\n        uint256 priceInETH,\n        uint256 priceInDrops\n    );\n    event LockVerified(address lpToken, uint256 lockID, bool status);\n    event ListingRedacted(address lpToken, uint256 lockID, address seller);\n    event ListingWithdrawn(address lpToken, uint256 lockID);\n    event DropsAddressUpdated(address _dropsAddress);\n    event FeeAddressUpdated(address _feeWallet);\n    event LockerAddressUpdated(address _lockerAddress);\n    event ChangedETHFee(uint256 _ethFee);\n\n    /// @notice Initialize the contract with Uniswap V2 Locker, Fee Wallet, and Drops Token addresses\n    /// @dev Sets the contract\u0027s dependencies and the owner upon deployment\n    /// @param _pinkLock Address of the Uniswap V2 Locker contract\n    /// @param _feeWallet Address of the wallet where fees will be collected\n    /// @param _dropsToken Address of the Drops token contract\n    constructor(\n        address _pinkLock,\n        address payable _feeWallet,\n        address _dropsToken\n    ) Ownable(msg.sender) {\n        pinkLock = IPinkLock02(_pinkLock);\n        feeWallet = _feeWallet;\n        marketplaceOwner = msg.sender;\n        dropsToken = IERC20(_dropsToken);\n        ethFee = 10;\n        referralBonus = 3;\n    }\n\n    /// @notice Set the eth fee (in percentage)\n    /// @dev This function can only be called by the contract owner\n    /// @param _ethFee Fee percentage for buyLockWithETH\n    function setETHFee(uint256 _ethFee) external onlyOwner {\n        require(_ethFee \u003c 10, \"Maximum fee is 10%\");\n        require(ethFee != _ethFee, \"You must change the fee\");\n        ethFee = _ethFee;\n        emit ChangedETHFee(_ethFee);\n    }\n\n    /// @notice Set the address of the Drops token\n    /// @dev This function can only be called by the contract owner\n    /// @param _dropsTokenAddress The address of the Drops token contract\n    function setDropsToken(address _dropsTokenAddress) external onlyOwner {\n        require(\n            address(dropsToken) != _dropsTokenAddress,\n            \"Must input different contract address\"\n        );\n        require(\n            _dropsTokenAddress != zeroAddress,\n            \"Cant set drops address as zero address\"\n        );\n        dropsToken = IERC20(_dropsTokenAddress);\n        emit DropsAddressUpdated(_dropsTokenAddress);\n    }\n\n    /// @notice Set the address of the fee wallet\n    /// @dev This function can only be called by the contract owner\n    /// @param _feeWallet The address of the new fee wallet\n    function setFeeWallet(address payable _feeWallet) external onlyOwner {\n        require(feeWallet != _feeWallet, \"Same wallet\");\n        require(\n            _feeWallet != zeroAddress,\n            \"Cant set fee wallet as zero address\"\n        );\n        feeWallet = _feeWallet;\n        emit FeeAddressUpdated(_feeWallet);\n    }\n\n    /// @notice Set the address of the liquidity locker\n    /// @dev This function can only be called by the contract owner\n    /// @param _pinkLock The address of the new liquidity locker\n    function setLockerAddress(address _pinkLock) external onlyOwner {\n        require(\n            address(pinkLock) != _pinkLock,\n            \"Must input different contract address\"\n        );\n        require(\n            _pinkLock != zeroAddress,\n            \"Cant set locker address as zero address\"\n        );\n        pinkLock = IPinkLock02(_pinkLock);\n        emit LockerAddressUpdated(_pinkLock);\n    }\n\n    function initiateListing(\n        address lpAddress,\n        uint256 lockId,\n        uint256 priceInETH,\n        uint256 priceInDrops,\n        address payable referral\n    ) external {\n        IPinkLock02.Lock memory data = pinkLock.getLockById(lockId);\n        address token = data.token;\n        address owner = data.owner;\n        require(lpAddress == token, \"Invalid LP address\");\n        require(msg.sender == owner, \"You do not own this lock\");\n        require(\n            (priceInETH \u003e 0) || (priceInDrops \u003e 0),\n            \"Must set a lock price in Drops or ETH\"\n        );\n        Listing memory tempListing = lpToLockID[token][lockId];\n        if (tempListing.listingID == 0) {\n            listingCount++;\n            listingDetail[listingCount] = ListingDetail(lockId, token);\n        }\n        lpToLockID[token][lockId] = Listing(\n            lockId,\n            listingCount,\n            payable(msg.sender),\n            lpAddress,\n            priceInETH,\n            priceInDrops,\n            block.timestamp,\n            false,\n            false,\n            referral,\n            false\n        );\n        if (!isLPListed[token]) {\n            isLPListed[token] = true;\n            listedLPsCount++;\n        }\n        emit ListingInitiated(token, lockId, msg.sender);\n    }\n\n    /// @notice Activate an initiated listing\n    /// @dev The seller must have transfered lock ownership to address(this)\n    /// @param lpAddress Address of the LP token\n    /// @param lockID Unique lockID (per lpAddress) of the lock\n    function activateListing(address lpAddress, uint256 lockID) external {\n        Listing memory tempListing = lpToLockID[lpAddress][lockID];\n        require(tempListing.seller == msg.sender, \"Lock doesnt belong to you.\");\n        require(!tempListing.isActive, \"Listing already active.\");\n        require(!tempListing.isSold, \"Listing already sold.\");\n        IPinkLock02.Lock memory data = pinkLock.getLockById(lockID);\n        address _lpAddress = data.token;\n        address owner = data.owner;\n        require(owner == address(this), \"Lock ownership not yet transferred.\");\n        require(_lpAddress == lpAddress, \"Invalid LP address\");\n        lpToLockID[lpAddress][lockID].isActive = true;\n        activeListings++;\n        emit NewActiveListing(\n            tempListing.lpAddress,\n            tempListing.lockID,\n            tempListing.priceInETH,\n            tempListing.priceInDrops\n        );\n    }\n\n    function fetchListing(\n        address lpAddress,\n        uint256 lockID\n    ) external view returns (Listing memory) {\n        return (lpToLockID[lpAddress][lockID]);\n    }\n\n    /// @notice Purchase a listed LP token lock with Drops tokens\n    /// @dev Requires approval to transfer Drops tokens to cover the purchase price\n    /// @param lpAddress Address of the LP token\n    /// @param lockID The ID of the lock\n    function buyLockWithETH(\n        address lpAddress,\n        uint256 lockID\n    ) external payable nonReentrant {\n        Listing memory tempListing = lpToLockID[lpAddress][lockID];\n        require(tempListing.isActive, \"Listing must be active.\");\n        require(tempListing.priceInETH \u003e 0, \"Listing not for sale in ETH.\");\n        require(\n            msg.value == tempListing.priceInETH,\n            \"Incorrect amount of ETH.\"\n        );\n\n        uint256 feeAmount = msg.value / ethFee;\n        uint256 toPay = msg.value - feeAmount;\n\n        if (tempListing.referral != zeroAddress) {\n            uint256 feeForReferral = (feeAmount * referralBonus) / ethFee;\n            feeAmount = feeAmount - feeForReferral;\n            tempListing.referral.transfer(feeForReferral);\n            feeWallet.transfer(feeAmount);\n        } else {\n            feeWallet.transfer(feeAmount);\n        }\n\n        payable(tempListing.seller).transfer(toPay);\n\n        lpToLockID[lpAddress][lockID].isActive = false;\n        lpToLockID[lpAddress][lockID].isSold = true;\n        activeListings--;\n\n        pinkLock.transferLockOwnership(lockID, payable(msg.sender));\n\n        emit LockPurchasedWithETH(\n            tempListing.lpAddress,\n            tempListing.lockID,\n            toPay,\n            feeAmount\n        );\n    }\n\n    /// @notice Purchase a listed LP token lock with Drops tokens\n    /// @dev Requires approval to transfer Drops tokens to cover the purchase price\n    /// @param lpAddress Address of the LP token\n    /// @param lockID The ID of the lock\n    function buyLockWithDrops(\n        address lpAddress,\n        uint256 lockID\n    ) external payable nonReentrant {\n        Listing memory tempListing = lpToLockID[lpAddress][lockID];\n\n        require(tempListing.isActive, \"Listing must be active.\");\n        require(tempListing.priceInDrops \u003e 0, \"Listing not for sale in Drops.\");\n        require(\n            dropsToken.balanceOf(msg.sender) \u003e tempListing.priceInDrops,\n            \"Insufficient drops.\"\n        );\n\n        require(\n            dropsToken.transferFrom(\n                msg.sender,\n                tempListing.seller,\n                tempListing.priceInDrops\n            )\n        );\n\n        lpToLockID[lpAddress][lockID].isActive = false;\n        lpToLockID[lpAddress][lockID].isSold = true;\n        activeListings--;\n\n        pinkLock.transferLockOwnership(lockID, payable(msg.sender));\n\n        emit LockPurchasedWithDrops(\n            tempListing.lpAddress,\n            tempListing.lockID,\n            tempListing.priceInDrops\n        );\n    }\n\n    /// @notice Withdraw a listed LP token lock\n    /// @dev Only the seller can withdraw the listing\n    /// @param lpAddress Address of the LP token\n    /// @param lockID The ID of the lock\n    function withdrawListing(\n        address lpAddress,\n        uint256 lockID\n    ) external nonReentrant {\n        Listing memory tempListing = lpToLockID[lpAddress][lockID];\n        require(\n            tempListing.seller == msg.sender,\n            \"This listing does not belong to you.\"\n        );\n        IPinkLock02.Lock memory data = pinkLock.getLockById(lockID);\n        address owner = data.owner;\n        require(owner == address(this), \"Marketplace does not own your lock\");\n\n        if (tempListing.isActive) {\n            delete lpToLockID[lpAddress][lockID];\n            activeListings--;\n        }\n\n        pinkLock.transferLockOwnership(lockID, payable(msg.sender));\n        emit ListingWithdrawn(lpAddress, lockID);\n    }\n\n    /// @notice Verify a listing as safe\n    /// @dev Only dev can verify listings\n    /// @param lpAddress Address of the LP token\n    /// @param lockID Unique lock ID (per lpAdress) of the lock\n    /// @param status Status of verification\n    function verifyListing(\n        address lpAddress,\n        uint256 lockID,\n        bool status\n    ) external onlyOwner {\n        Listing storage tempListing = lpToLockID[lpAddress][lockID];\n        require(status != tempListing.isVerified, \"Must change listing status\");\n        tempListing.isVerified = true;\n        emit LockVerified(lpAddress, lockID, status);\n    }\n\n    /// @notice Change the ETH price of a listing\n    /// @dev Only seller can change price\n    /// @param lpAddress Address of the LP token\n    /// @param lockID Unique lock ID (per lpAddress) of the lock\n    /// @param newPriceInETH Updated ETH price of listing\n    function changePriceInETH(\n        address lpAddress,\n        uint256 lockID,\n        uint256 newPriceInETH\n    ) external nonReentrant {\n        Listing storage tempListing = lpToLockID[lpAddress][lockID];\n        require(\n            tempListing.seller == msg.sender,\n            \"This listing does not belong to you.\"\n        );\n        tempListing.priceInETH = newPriceInETH;\n    }\n\n    /// @notice Change the price of a listing in Drops\n    /// @dev Only seller can change price\n    /// @param lpAddress Address of the LP token\n    /// @param lockID Unique lock ID (per lpAddress) of the lock\n    /// @param newPriceInDrops Updated Drops price of listing\n    function changePriceInDrops(\n        address lpAddress,\n        uint256 lockID,\n        uint256 newPriceInDrops\n    ) external nonReentrant {\n        Listing storage tempListing = lpToLockID[lpAddress][lockID];\n        require(\n            tempListing.seller == msg.sender,\n            \"This listing does not belong to you.\"\n        );\n        tempListing.priceInDrops = newPriceInDrops;\n    }\n\n    /// @notice Return ownership of a lock to the original seller and remove the listing\n    /// @dev Only the contract owner can call this function\n    /// @param lpAddress Address of the LP token associated with the lock\n    /// @param lockID The ID of the lock to be redacted\n    function redactListing(\n        address lpAddress,\n        uint256 lockID\n    ) external onlyOwner {\n        Listing storage listing = lpToLockID[lpAddress][lockID];\n\n        require(listing.seller != address(0), \"Listing does not exist.\");\n\n        pinkLock.transferLockOwnership(lockID, payable(listing.seller));\n\n        if (listing.isActive) {\n            listing.isActive = false;\n            activeListings--;\n        }\n\n        delete lpToLockID[lpAddress][lockID];\n        emit ListingRedacted(lpAddress, lockID, listing.seller);\n    }\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot\u0027s contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler\u0027s defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction\u0027s gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"}}