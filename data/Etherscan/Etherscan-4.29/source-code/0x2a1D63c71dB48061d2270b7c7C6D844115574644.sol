{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 12
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/v2/EarnAssetController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport {Asset, AssetType} from \"./EarnAssetTypes.sol\";\n\ncontract EarnAssetController {\n    //asset id => Asset\n    mapping(bytes32 => Asset) internal _assets;\n\n    function _getOrCreateAsset(\n        bytes32 _assetId,\n        address _assetAddress,\n        uint256 _erc1155TokenId,\n        AssetType _assetType\n    ) internal returns (Asset memory) {\n        Asset memory sa = _assets[_assetId];\n        if (sa.assetType == AssetType.UNDEFINED) {\n            bytes32 newAssetId = _calculateAssetId(\n                _assetAddress,\n                _erc1155TokenId,\n                _assetType\n            );\n            if (_assetId != 0) {\n                require(newAssetId == _assetId, \"EAC: assetId mismatch\");\n            }\n            sa = Asset({\n                assetAddress: _assetAddress,\n                erc1155TokenId: _erc1155TokenId,\n                assetType: _assetType\n            });\n            _assets[newAssetId] = sa;\n        }\n        return sa;\n    }\n\n    function _calculateAssetId(\n        address _assetAddress,\n        uint256 _erc1155TokenId,\n        AssetType _assetType\n    ) internal pure returns (bytes32) {\n        require(\n            _assetType != AssetType.UNDEFINED,\n            \"EAC: assetType cannot be UNDEFINED\"\n        );\n        return\n            keccak256(\n                abi.encodePacked(_assetAddress, _erc1155TokenId, _assetType)\n            );\n    }\n}\n"
    },
    "contracts/v2/EarnAssetTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nenum AssetType {\n    UNDEFINED,\n    ERC20,\n    ERC721,\n    ERC1155,\n    NATIVE\n}\n\nstruct Asset {\n    address assetAddress;\n    uint256 erc1155TokenId;\n    AssetType assetType;\n}\n"
    },
    "contracts/v2/EarnStakingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./IEarnStakingManager.sol\";\nimport \"./EarnAssetController.sol\";\n\ncontract EarnStakingManager is\n    Ownable,\n    IEarnStakingManager,\n    EarnAssetController\n{\n    // ************ MODIFIERS ************ //\n\n    modifier noAddressZero(address adr) {\n        require(adr != address(0), \"ESM: Wrong Address\");\n        _;\n    }\n\n    // ************ EVENTS ************ //\n\n    event NewTreasury(address indexed newTreasury);\n\n    event NewSigner(address indexed newSigner);\n\n    event Payed(\n        uint256 indexed paymentType,\n        address payer,\n        address paymentToken,\n        uint256 amount,\n        uint256 nonce\n    );\n\n    event StakePositionUpdate(\n        address indexed staker,\n        bytes32 indexed assetId,\n        uint256 transactionNonce,\n        uint256 newUserStakedAmount,\n        uint256 newTotalStakedAmount,\n        uint256 txIndex,\n        uint256 timestamp,\n        uint256 newUnstakeTimestamp,\n        uint256[] erc721TokenIds,\n        bool liquidated\n    );\n\n    event RewardExecuted(\n        address indexed from,\n        uint256 indexed nonce,\n        address rewardToken,\n        uint256 rewardAmount,\n        uint256 erc721TokenId,\n        uint256[] erc721TokenIds,\n        bool isWithdrawTx\n    );\n\n    event NonceProcessed(address indexed addr, uint256 amount, uint256 nonce);\n\n    // ************ VARIABLES ************ //\n    mapping(address => bool) internal _paymentContractStatus;\n    mapping(address => bool) internal _rewardsContractStatus;\n    mapping(address => bool) internal _whitelist;\n    address internal _rewardHolderContract;\n    address internal _stakingPoolContract;\n    address internal _treasury;\n    address internal _signer;\n    address internal _weth;\n\n    // ************ CONSTRUCTOR ************ //\n\n    constructor(address treasury_, address signer_, address weth_) {\n        _treasury = treasury_;\n        _signer = signer_;\n        _weth = weth_;\n    }\n\n    // ************ VIEW FUNCTIONS ************ //\n\n    function stakingPoolContract() external view returns (address) {\n        return _stakingPoolContract;\n    }\n\n    function whitelisted(address addr) external view returns (bool) {\n        return _whitelist[addr];\n    }\n\n    function rewardsHolderContract() external view returns (address) {\n        return _rewardHolderContract;\n    }\n\n    function paymentContractStatus(\n        address paymentContract\n    ) external view returns (bool) {\n        return _paymentContractStatus[paymentContract];\n    }\n\n    function rewardsContractStatus(\n        address rewardsContract\n    ) external view returns (bool) {\n        return _rewardsContractStatus[rewardsContract];\n    }\n\n    function treasury() external view returns (address) {\n        return _treasury;\n    }\n\n    function signer() external view returns (address) {\n        return _signer;\n    }\n\n    function WETH() external view returns (address) {\n        return _weth;\n    }\n\n    function admin() external view returns (address) {\n        return owner();\n    }\n\n    // ************ ASSETS FUNCTIONS ************ //\n    function getOrCreateAsset(\n        bytes32 _assetId,\n        address _assetAddress,\n        uint256 _erc1155TokenId,\n        AssetType _assetType\n    ) external returns (Asset memory) {\n        return\n            _getOrCreateAsset(\n                _assetId,\n                _assetAddress,\n                _erc1155TokenId,\n                _assetType\n            );\n    }\n\n    function getAssetId(\n        address _assetAddress,\n        uint256 _erc1155TokenId,\n        AssetType _assetType\n    ) external pure returns (bytes32) {\n        return _calculateAssetId(_assetAddress, _erc1155TokenId, _assetType);\n    }\n\n    function getAssetById(\n        bytes32 _assetId\n    ) external view returns (Asset memory) {\n        return _assets[_assetId];\n    }\n\n    function assets(\n        bytes32 _assetId\n    ) external view returns (Asset memory asset) {\n        return _assets[_assetId];\n    }\n\n    // ************ STAKING FUNCTIONS ************ //\n\n    function stakePositionUpdate(\n        address staker,\n        bytes32 assetId,\n        uint256 transactionNonce,\n        uint256 newUserStakedAmount,\n        uint256 newTotalStakedAmount,\n        uint256 transactionIndex,\n        uint256 timestamp,\n        uint256 unstakeTimestamp,\n        uint256[] memory erc721TokenIds,\n        bool liquidated\n    ) external {\n        require(msg.sender == _stakingPoolContract);\n        emit StakePositionUpdate(\n            staker,\n            assetId,\n            transactionNonce,\n            newUserStakedAmount,\n            newTotalStakedAmount,\n            transactionIndex,\n            timestamp,\n            unstakeTimestamp,\n            erc721TokenIds,\n            liquidated\n        );\n    }\n\n    // ************ PAYMENT FUNCTIONS ************ //\n\n    function pay(\n        address payer,\n        uint256 paymentType,\n        address paymentToken,\n        uint256 amount,\n        uint256 nonce\n    ) external {\n        require(\n            _paymentContractStatus[msg.sender],\n            \"ESM: Only Payment Contracts\"\n        );\n        emit Payed(paymentType, payer, paymentToken, amount, nonce);\n    }\n\n    // ************ REWARD FUNCTIONS ************ //\n    function execReward(\n        address from,\n        uint256 nonce,\n        address rewardToken,\n        uint256 rewardAmount,\n        uint256 erc1155TokenId,\n        uint256[] memory erc721TokenIds,\n        bool isWithdrawTx\n    ) external {\n        require(\n            msg.sender == _rewardHolderContract ||\n                _rewardsContractStatus[msg.sender],\n            \"ESM: Only Reward Contracts\"\n        );\n        emit RewardExecuted(\n            from,\n            nonce,\n            rewardToken,\n            rewardAmount,\n            erc1155TokenId,\n            erc721TokenIds,\n            isWithdrawTx\n        );\n    }\n\n    // ************ ADMIN FUNCTIONS ************ //\n    function setStakingPool(\n        address stakingPool\n    ) external noAddressZero(stakingPool) onlyOwner {\n        require(\n            _stakingPoolContract == address(0),\n            \"ESM: Staking Pool Already Set\"\n        );\n        _stakingPoolContract = stakingPool;\n    }\n\n    function setTreasury(\n        address newTreasury\n    ) external noAddressZero(newTreasury) onlyOwner {\n        _treasury = newTreasury;\n        emit NewTreasury(newTreasury);\n    }\n\n    function setSigner(\n        address newSigner\n    ) external noAddressZero(newSigner) onlyOwner {\n        _signer = newSigner;\n        emit NewSigner(newSigner);\n    }\n\n    function setPaymentContractStatus(\n        address paymentContract,\n        bool status\n    ) external onlyOwner {\n        _paymentContractStatus[paymentContract] = status;\n    }\n\n    function setRewardHolderContract(\n        address rewardHolderContractAddress\n    ) external noAddressZero(rewardHolderContractAddress) onlyOwner {\n        _rewardHolderContract = rewardHolderContractAddress;\n    }\n\n    function setRewardContractStatus(\n        address rewardContract,\n        bool status\n    ) external onlyOwner {\n        _rewardsContractStatus[rewardContract] = status;\n    }\n\n    function setWhitelist(address addr, bool status) external onlyOwner {\n        _whitelist[addr] = status;\n    }\n\n    // ************ OTHER FUNCTIONS ************ //\n    function emitNonce(address addr, uint256 amount, uint256 nonce) external {\n        require(_whitelist[msg.sender], \"ESM: Not Whitelisted\");\n        emit NonceProcessed(addr, amount, nonce);\n    }\n}\n"
    },
    "contracts/v2/IEarnStakingManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport {Asset, AssetType} from \"./EarnAssetTypes.sol\";\n\ninterface IEarnStakingManager {\n    function treasury() external view returns (address);\n\n    function signer() external view returns (address);\n\n    function rewardsHolderContract() external view returns (address);\n\n    function stakePositionUpdate(\n        address staker,\n        bytes32 assetId,\n        uint256 transactionNonce,\n        uint256 newUserStakedAmount,\n        uint256 newTotalStakedAmount,\n        uint256 transactionIndex,\n        uint256 timestamp,\n        uint256 unstakeTimestamp,\n        uint256[] memory erc721TokenIds,\n        bool liquidated\n    ) external;\n\n    function pay(\n        address payer,\n        uint256 paymentType,\n        address paymentToken,\n        uint256 amount,\n        uint256 nonce\n    ) external;\n\n    function execReward(\n        address from,\n        uint256 nonce,\n        address rewardToken,\n        uint256 rewardAmount,\n        uint256 erc1155TokenId,\n        uint256[] memory erc721TokenIds,\n        bool isWithdrawTx\n    ) external;\n\n    function WETH() external view returns (address);\n\n    function getOrCreateAsset(\n        bytes32 _assetId,\n        address _assetAddress,\n        uint256 _erc1155TokenId,\n        AssetType _assetType\n    ) external returns (Asset memory);\n\n    function getAssetById(bytes32 _assetId)\n        external\n        view\n    returns (Asset memory);\n\n    function getAssetId(\n        address _assetAddress,\n        uint256 _erc1155TokenId,\n        AssetType _assetType\n    ) external pure returns (bytes32);\n\n    function assets(bytes32 _assetId)\n        external\n        view\n    returns (Asset memory asset);\n\n    function admin() external view returns (address);\n\n    function emitNonce(address addr, uint256 amount, uint256 nonce) external;\n}\n"
    }
  }
}}