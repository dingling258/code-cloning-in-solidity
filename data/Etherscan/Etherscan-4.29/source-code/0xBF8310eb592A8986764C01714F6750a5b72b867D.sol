{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "shanghai",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/aux/interfaces/IAddressManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.24;\n\nimport { ICegaEntry } from \"../../cega-entry/interfaces/ICegaEntry.sol\";\n\ninterface IAddressManager {\n    /**\n     * @dev Emitted when a new CegaEntry is created.\n     * @param id The identifier of the proxy\n     * @param proxyAddress The address of the created proxy contract\n     * @param implementationParams The params of the implementation update\n     */\n    event CegaEntryCreated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        ICegaEntry.ProxyImplementation[] indexed implementationParams\n    );\n\n    /**\n     * @dev Emitted when the CegaEntry is updated.\n     * @param implementationParams The old address of the CegaEntry\n     * @param _init The new address to call upon upgrade\n     * @param _calldata The calldata input for the call\n     */\n    event CegaEntryUpdated(\n        ICegaEntry.ProxyImplementation[] indexed implementationParams,\n        address _init,\n        bytes _calldata\n    );\n\n    /**\n     * @dev Emitted when a new address is set\n     * @param id The identifier of the proxy\n     * @param oldAddress The previous address assoicated with the id\n     * @param newAddress The new address set to the id\n     */\n    event AddressSet(\n        bytes32 indexed id,\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when asset wrapping proxy is updated\n     * @param asset The address of the asset.\n     * @param proxy The address of the new proxy.\n     */\n    event AssetProxyUpdated(address asset, address proxy);\n\n    /**\n     * @dev Returns the address of the Cega Oracle.\n     * @return The address of the Cega Oracle.\n     */\n    function getCegaOracle() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Cega Entry.\n     * @return The address of the Cega Entry.\n     */\n    function getCegaEntry() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Trade Winner NFT.\n     * @return The address of the Trade Winner NFT.\n     */\n    function getTradeWinnerNFT() external view returns (address);\n\n    /**\n     * @dev Returns the address of the ACL Manager.\n     * @return The address of the ACL Manager.\n     */\n    function getACLManager() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Redeposit Manager.\n     * @return The address of the Redeposit Manager.\n     */\n    function getRedepositManager() external view returns (address);\n\n    /**\n     * @dev Returns the address of the Cega Fee Receiver.\n     * @return The address of the Cega Fee Receiver.\n     */\n    function getCegaFeeReceiver() external view returns (address);\n\n    /**\n     * @dev Retrieves the address associated with a given ID.\n     * @param id The bytes32 ID.\n     * @return The associated address.\n     */\n    function getAddress(bytes32 id) external view returns (address);\n\n    /**\n     * @dev Retrieves the asset wrapping proxy address for a given asset.\n     * @param asset The address of the asset.\n     * @return The address of the asset wrapping proxy.\n     */\n    function getAssetWrappingProxy(\n        address asset\n    ) external view returns (address);\n\n    /**\n     * @dev Sets the address of the Cega Entry contract.\n     * @param newAddress The new address of the Cega Entry contract.\n     */\n    function setCegaEntry(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Trade Winner NFT contract.\n     * @param newAddress The new address of the Trade Winner NFT contract.\n     */\n    function setTradeWinnerNFT(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Cega Oracle contract.\n     * @param newAddress The new address of the Cega Oracle contract.\n     */\n    function setCegaOracle(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Redeposit Manager contract.\n     * @param newAddress The new address of the Redeposit Manager contract.\n     */\n    function setRedepositManager(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the Cega Fee Receiver address.\n     * @param newAddress The new address of the Cega Fee Receiver contract.\n     */\n    function setCegaFeeReceiver(address newAddress) external;\n\n    /**\n     * @dev Sets the address of the ACL Manager contract.\n     * @param newAddress The new address of the ACL Manager contract.\n     */\n    function setACLManager(address newAddress) external;\n\n    /**\n     * @dev Sets a new address for a given ID.\n     * @param id The bytes32 ID.\n     * @param newAddress The new address to be associated with the ID.\n     */\n    function setAddress(bytes32 id, address newAddress) external;\n\n    /**\n     * @dev Sets a new asset wrapping proxy for a given asset.\n     * @param asset The address of the asset.\n     * @param proxy The address of the new proxy.\n     */\n    function setAssetWrappingProxy(address asset, address proxy) external;\n\n    /**\n     * @dev Updates the implementation of the Cega Entry.\n     * @param implementationParams An array of new implementation parameters.\n     * @param _init The address to call upon upgrade.\n     * @param _calldata The calldata input for the call.\n     */\n    function updateCegaEntryImpl(\n        ICegaEntry.ProxyImplementation[] calldata implementationParams,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n}\n"
    },
    "contracts/cega-entry/interfaces/ICegaEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.10;\n\n/******************************************************************************\\\n* EIP-2535: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface ICegaEntry {\n    enum ProxyImplementationAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct ProxyImplementation {\n        address implAddress;\n        ProxyImplementationAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _implementationParams Contains the implementation addresses and function selectors\n    /// @param _init The address of the contract or implementation to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        ProxyImplementation[] calldata _implementationParams,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(\n        ProxyImplementation[] _diamondCut,\n        address _init,\n        bytes _calldata\n    );\n}\n"
    },
    "contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nlibrary Errors {\n    string public constant NOT_CEGA_ENTRY = \"1\";\n    string public constant NOT_CEGA_ADMIN = \"2\";\n    string public constant NOT_TRADER_ADMIN = \"3\";\n    string public constant NOT_TRADE_WINNER = \"4\";\n    string public constant INVALID_VAULT = \"5\";\n    string public constant INVALID_VAULT_STATUS = \"6\";\n    string public constant VAULT_IN_ZOMBIE_STATE = \"7\";\n    string public constant TRADE_DEFAULTED = \"8\";\n    string public constant INVALID_SETTLEMENT_STATUS = \"9\";\n    string public constant VAULT_IN_DISPUTE = \"10\";\n    string public constant VAULT_NOT_IN_DISPUTE = \"11\";\n    string public constant OUTSIDE_DISPUTE_PERIOD = \"12\";\n    string public constant TRADE_HAS_NO_WINNER = \"13\";\n    string public constant TRADE_NOT_CONVERTED = \"14\";\n    string public constant TRADE_CONVERTED = \"15\";\n    string public constant INVALID_TRADE_END_DATE = \"16\";\n    string public constant INVALID_PRICE = \"17\";\n    string public constant VALUE_TOO_SMALL = \"18\";\n    string public constant VALUE_TOO_LARGE = \"19\";\n    string public constant VALUE_IS_ZERO = \"20\";\n    string public constant MAX_DEPOSIT_LIMIT_REACHED = \"21\";\n    string public constant DEPOSIT_QUEUE_NOT_OPEN = \"22\";\n    string public constant INVALID_QUOTE_OR_BASE_ASSETS = \"23\";\n    string public constant INVALID_MIN_DEPOSIT_AMOUNT = \"24\";\n    string public constant INVALID_MIN_WITHDRAWAL_AMOUNT = \"25\";\n    string public constant INVALID_STRIKE_PRICE = \"26\";\n    string public constant TRANSFER_FAILED = \"27\";\n    string public constant NOT_AVAILABLE_DATA_SOURCE = \"28\";\n    string public constant NO_PRICE_AVAILABLE = \"29\";\n    string public constant NO_PRICE_FEED_SET = \"30\";\n    string public constant INCOMPATIBLE_PRICE = \"31\";\n    string public constant NOT_CEGA_ENTRY_OR_REDEPOSIT_MANAGER = \"32\";\n    string public constant NO_PROXY_FOR_REDEPOSIT = \"33\";\n    string public constant NOT_TRADE_WINNER_OR_TRADER_ADMIN = \"34\";\n    string public constant TRADE_NOT_STARTED = \"35\";\n    string public constant NOT_AVAILABLE_SWAP_TYPE = \"36\";\n    string public constant NOT_AVAILABLE_SWAP_PATH = \"37\";\n    string public constant PROTOCOL_PAUSED = \"38\";\n    string public constant WRONG_STRATEGY = \"39\";\n    string public constant INVALID_ARRAY_LENGTH = \"40\";\n    string public constant UNKNOWN_BARRIER_TYPE = \"41\";\n    string public constant NOT_BOND_OPTION = \"42\";\n    string public constant UNAUTHORIZED_BOND_RECEIVER = \"43\";\n    string public constant REMAINING_VALUE_TOO_SMALL = \"44\";\n    string public constant VALUE_IN_DISPUTE_GRACE_DELAY = \"45\";\n}\n"
    },
    "contracts/vaults/CegaVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IAddressManager } from \"../aux/interfaces/IAddressManager.sol\";\nimport { ICegaVault } from \"./interfaces/ICegaVault.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\n\ncontract CegaVault is ICegaVault, ERC20 {\n    address public immutable cegaEntry;\n    uint8 public constant VAULT_DECIMALS = 18;\n\n    modifier onlyCegaEntry() {\n        require(cegaEntry == msg.sender, Errors.NOT_CEGA_ENTRY);\n        _;\n    }\n\n    constructor(\n        IAddressManager _addressManager,\n        string memory _tokenName,\n        string memory _tokenSymbol\n    ) ERC20(_tokenName, _tokenSymbol) {\n        cegaEntry = _addressManager.getCegaEntry();\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return VAULT_DECIMALS;\n    }\n\n    function mint(address account, uint256 amount) external onlyCegaEntry {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) external onlyCegaEntry {\n        _burn(account, amount);\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal override {\n        if (msg.sender == cegaEntry) {\n            return;\n        }\n        super._spendAllowance(owner, spender, value);\n    }\n}\n"
    },
    "contracts/vaults/CegaVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IAddressManager } from \"../aux/interfaces/IAddressManager.sol\";\nimport { CegaVault } from \"./CegaVault.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\n\ncontract CegaVaultFactory {\n    IAddressManager public immutable addressManager;\n\n    // MODIFIERS\n\n    modifier onlyCegaEntry() {\n        require(\n            addressManager.getCegaEntry() == msg.sender,\n            Errors.NOT_CEGA_ENTRY\n        );\n        _;\n    }\n\n    // CONSTRUCTOR\n\n    constructor(IAddressManager _addressManager) {\n        addressManager = _addressManager;\n    }\n\n    // FUNCTIONS\n\n    function deployCegaVault(\n        string memory tokenName,\n        string memory tokenSymbol\n    ) external onlyCegaEntry returns (address) {\n        CegaVault vault = new CegaVault(addressManager, tokenName, tokenSymbol);\n        return address(vault);\n    }\n}\n"
    },
    "contracts/vaults/interfaces/ICegaVault.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface ICegaVault is IERC20 {\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n}\n"
    }
  }
}}