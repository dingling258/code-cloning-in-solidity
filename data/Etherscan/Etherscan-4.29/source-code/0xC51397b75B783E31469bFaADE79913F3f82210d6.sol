{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/CctpBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IGasOracle} from \"./interfaces/IGasOracle.sol\";\nimport {ITokenMessenger} from \"./interfaces/cctp/ITokenMessenger.sol\";\nimport {IMessageTransmitter} from \"./interfaces/cctp/IMessageTransmitter.sol\";\nimport {GasUsage} from \"./GasUsage.sol\";\n\ncontract CctpBridge is GasUsage {\n    using SafeERC20 for IERC20Metadata;\n\n    uint internal constant ORACLE_PRECISION = 18;\n    uint internal constant BP = 1e4;\n\n    uint public immutable chainId;\n    // Admin fee share (in basis points)\n    uint public adminFeeShareBP;\n    IERC20Metadata private immutable token;\n    ITokenMessenger private immutable cctpMessenger;\n    IMessageTransmitter private immutable cctpTransmitter;\n    // precomputed value of the scaling factor required for converting the stable token to gas amount\n    uint private immutable stableTokensForGasScalingFactor;\n    // precomputed value to divide by to change the precision from the Gas Oracle precision to the stable token precision\n    uint private immutable fromGasOracleScalingFactor;\n\n    mapping(uint chainId => uint domainNumber) private chainIdDomainMap;\n    mapping(uint nonce => address sender) private senders;\n\n    /**\n     * @notice Emitted when the contract receives some gas directly.\n     */\n    event ReceivedGas(address sender, uint amount);\n\n    /**\n     * @notice Emitted when the contract sends some extra gas to the recipient of tokens.\n     */\n    event ReceivedExtraGas(address recipient, uint amount);\n\n    /**\n     * @notice Emitted when tokens are sent on the source blockchain.\n     */\n    event TokensSent(\n        uint amount,\n        address sender,\n        bytes32 recipient,\n        uint destinationChainId,\n        uint nonce,\n        uint receivedRelayerFeeFromGas,\n        uint receivedRelayerFeeFromTokens,\n        uint relayerFee,\n        uint receivedRelayerFeeTokenAmount,\n        uint adminFeeTokenAmount\n    );\n\n    event TokensSentExtras(bytes32 recipientWalletAddress);\n\n    event RecipientReplaced(address sender, uint nonce, bytes32 newRecipient);\n\n    constructor(\n        uint chainId_,\n        uint chainPrecision_,\n        address tokenAddress,\n        address cctpMessenger_,\n        address cctpTransmitter_,\n        IGasOracle gasOracle_\n    ) GasUsage(gasOracle_) {\n        chainId = chainId_;\n        token = IERC20Metadata(tokenAddress);\n        uint tokenDecimals = token.decimals();\n        cctpMessenger = ITokenMessenger(cctpMessenger_);\n        cctpTransmitter = IMessageTransmitter(cctpTransmitter_);\n        token.approve(cctpMessenger_, type(uint256).max);\n        stableTokensForGasScalingFactor = 10 ** (ORACLE_PRECISION - tokenDecimals + chainPrecision_);\n        fromGasOracleScalingFactor = 10 ** (ORACLE_PRECISION - tokenDecimals);\n    }\n\n    /**\n     * @notice Initiates a bridging process of the token to another blockchain.\n     * @dev This function is used to initiate a cross-chain transfer.\n     * The bridging fee required for the cross-chain transfer can be paid in two ways:\n     * - by sending the required amount of native gas token along with the transaction\n     *   (See `getTransactionCost` in the `GasUsage` contract).\n     * - by setting the parameter `relayerFeeTokenAmount` with the amount of bridging fee in tokens\n     *   (See the function `getBridgingCostInTokens`).\n     * @param amount The amount of tokens to send (including `relayerFeeTokenAmount`).\n     * @param recipient The recipient address.\n     * @param destinationChainId The ID of the destination chain.\n     * @param relayerFeeTokenAmount The amount of tokens to be deducted from the transferred amount as a bridging fee.\n     */\n    function bridge(\n        uint amount,\n        bytes32 recipient,\n        uint destinationChainId,\n        uint relayerFeeTokenAmount\n    ) public payable {\n        require(amount > relayerFeeTokenAmount, \"CCTP: Amount <= relayer fee\");\n        require(recipient != 0, \"CCTP: Recipient must be nonzero\");\n        token.safeTransferFrom(msg.sender, address(this), amount);\n        uint gasFromStables = _getStableTokensValueInGas(relayerFeeTokenAmount);\n        uint relayerFee = this.getTransactionCost(destinationChainId);\n        require(msg.value + gasFromStables >= relayerFee, \"CCTP: Not enough fee\");\n        uint amountToSend = amount - relayerFeeTokenAmount;\n        uint adminFee;\n        if (adminFeeShareBP != 0) {\n            adminFee = (amountToSend * adminFeeShareBP) / BP;\n            if (adminFee == 0) {\n                adminFee = 1;\n            }\n            amountToSend -= adminFee;\n        }\n        uint32 destinationDomain = getDomainByChainId(destinationChainId);\n        uint64 nonce = cctpMessenger.depositForBurn(amountToSend, destinationDomain, recipient, address(token));\n        senders[nonce] = msg.sender;\n        emit TokensSent(\n            amountToSend,\n            msg.sender,\n            recipient,\n            destinationChainId,\n            nonce,\n            msg.value,\n            gasFromStables,\n            relayerFee,\n            relayerFeeTokenAmount,\n            adminFee\n        );\n    }\n\n    /**\n     * @notice Public method to initiate a bridging process of the token to another blockchain. Used for recipients with different wallet address (Solana)\n     * @dev See full description in the bridge method\n     * @param recipientWalletAddress The recipient wallet address - used to track user for transfers to Solana.\n     **/\n    function bridgeWithWalletAddress(\n        uint amount,\n        bytes32 recipient,\n        bytes32 recipientWalletAddress,\n        uint destinationChainId,\n        uint relayerFeeTokenAmount\n    ) external payable {\n        bridge(amount, recipient, destinationChainId, relayerFeeTokenAmount);\n\n        emit TokensSentExtras(recipientWalletAddress);\n    }\n\n    /**\n     * @notice Public method to replace recipient if it was accidentally incorrectly specified\n     * @param originalMessage original message bytes (to replace)\n     * @param originalAttestation original attestation bytes\n     * @param newRecipient the new mint recipient, which may be the same as the\n     * original mint recipient, or different.\n     **/\n    function changeRecipient(\n        bytes calldata originalMessage,\n        bytes calldata originalAttestation,\n        bytes32 newRecipient\n    ) external {\n        uint64 nonce = uint64(bytes8(originalMessage[12:20]));\n        require(senders[nonce] == msg.sender, \"CCTP: wrong sender\");\n        cctpMessenger.replaceDepositForBurn(originalMessage, originalAttestation, bytes32(0), newRecipient);\n        emit RecipientReplaced(msg.sender, nonce, newRecipient);\n    }\n\n    /**\n     * @notice Completes the bridging process by sending the tokens on the destination blockchain to the recipient.\n     * @param recipient The recipient address.\n     * @param message The message information emitted by the CCTP contract `MessageTransmitter` on the source chain.\n     * @param signature Concatenated 65-byte signature(s) of `message`.\n     */\n    function receiveTokens(address recipient, bytes calldata message, bytes calldata signature) external payable {\n        require(cctpTransmitter.receiveMessage(message, signature), \"CCTP: Receive message failed\");\n        // pass extra gas to the recipient\n        if (msg.value > 0) {\n            (bool sent, ) = payable(recipient).call{value: msg.value}(\"\");\n            if (sent) {\n                emit ReceivedExtraGas(recipient, msg.value);\n            }\n        }\n    }\n\n    /**\n     * @notice Allows the admin to add new supported chain destination.\n     * @param chainId_ The chain ID of the destination to register.\n     * @param domain The domain of the destination to register.\n     */\n    function registerBridgeDestination(uint chainId_, uint32 domain) external onlyOwner {\n        chainIdDomainMap[chainId_] = domain + 1;\n    }\n\n    /**\n     * @notice Allows the admin to remove a chain from the map of supported destinations.\n     * @param chainId_ The chain ID of the destination to unregister.\n     */\n    function unregisterBridgeDestination(uint chainId_) external onlyOwner {\n        chainIdDomainMap[chainId_] = 0;\n    }\n\n    /**\n     * @notice Allows the admin to withdraw the relayer fee collected in gas tokens.\n     */\n    function withdrawGas(uint amount) external onlyOwner {\n        payable(msg.sender).transfer(amount);\n    }\n\n    /**\n     * @notice Allows the admin to withdraw the admin fee and relayer fee collected in tokens.\n     */\n    function withdrawFeeInTokens() external onlyOwner {\n        uint toWithdraw = token.balanceOf(address(this));\n        if (toWithdraw > 0) {\n            token.safeTransfer(msg.sender, toWithdraw);\n        }\n    }\n\n    /**\n     * @notice Sets the basis points of the admin fee share from each bridge.\n     */\n    function setAdminFeeShare(uint adminFeeShareBP_) external onlyOwner {\n        require(adminFeeShareBP_ <= BP, \"CCTP: Too high\");\n        adminFeeShareBP = adminFeeShareBP_;\n    }\n\n    /**\n     * @notice Calculates the amount of bridging fee nominated in the stable token.\n     * @param destinationChainId The ID of the destination chain.\n     * @return The total price of bridging, with the precision according to the token's `decimals()` value.\n     */\n    function getBridgingCostInTokens(uint destinationChainId) external view returns (uint) {\n        return\n            gasOracle.getTransactionGasCostInUSD(destinationChainId, gasUsage[destinationChainId]) /\n            fromGasOracleScalingFactor;\n    }\n\n    function isMessageProcessed(uint sourceChainId, uint64 nonce) external view returns (bool) {\n        return cctpTransmitter.usedNonces(_hashSourceAndNonce(getDomainByChainId(sourceChainId), nonce)) != 0;\n    }\n\n    function getDomainByChainId(uint chainId_) public view returns (uint32) {\n        uint domainNumber = chainIdDomainMap[chainId_];\n        require(domainNumber > 0, \"CCTP: Unknown chain id\");\n        return uint32(domainNumber - 1);\n    }\n\n    /**\n     * @notice Calculates the amount of gas equivalent in value to provided amount of tokens\n     * according to the current exchange rate.\n     * @param stableTokenAmount The amount of tokens.\n     * @return amount of gas tokens.\n     */\n    function _getStableTokensValueInGas(uint stableTokenAmount) internal view returns (uint) {\n        if (stableTokenAmount == 0) return 0;\n        return (stableTokensForGasScalingFactor * stableTokenAmount) / gasOracle.price(chainId);\n    }\n\n    function _hashSourceAndNonce(uint32 sourceDomain, uint64 nonce) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(sourceDomain, nonce));\n    }\n\n    fallback() external payable {\n        revert(\"Unsupported\");\n    }\n\n    receive() external payable {\n        emit ReceivedGas(msg.sender, msg.value);\n    }\n}\n"
    },
    "contracts/GasUsage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IGasOracle} from \"./interfaces/IGasOracle.sol\";\n\n/**\n * @dev Contract module which allows children to store typical gas usage of a certain transaction on another chain.\n */\nabstract contract GasUsage is Ownable {\n    IGasOracle internal gasOracle;\n    mapping(uint chainId => uint amount) public gasUsage;\n\n    constructor(IGasOracle gasOracle_) {\n        gasOracle = gasOracle_;\n    }\n\n    /**\n     * @dev Sets the amount of gas used for a transaction on a given chain.\n     * @param chainId The ID of the chain.\n     * @param gasAmount The amount of gas used on the chain.\n     */\n    function setGasUsage(uint chainId, uint gasAmount) external onlyOwner {\n        gasUsage[chainId] = gasAmount;\n    }\n\n    /**\n     * @dev Sets the Gas Oracle contract address.\n     * @param gasOracle_ The address of the Gas Oracle contract.\n     */\n    function setGasOracle(IGasOracle gasOracle_) external onlyOwner {\n        gasOracle = gasOracle_;\n    }\n\n    /**\n     * @notice Get the gas cost of a transaction on another chain in the current chain's native token.\n     * @param chainId The ID of the chain for which to get the gas cost.\n     * @return The calculated gas cost of the transaction in the current chain's native token\n     */\n    function getTransactionCost(uint chainId) external view returns (uint) {\n        unchecked {\n            return gasOracle.getTransactionGasCostInNativeToken(chainId, gasUsage[chainId]);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/cctp/IMessageTransmitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport {IReceiver} from \"./IReceiver.sol\";\n\ninterface IMessageTransmitter is IReceiver {\n    function usedNonces(bytes32 _sourceAndNonce) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/cctp/IReceiver.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n * Copyright (c) 2022, Circle Internet Financial Limited.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npragma solidity ^0.8.18;\n\n/**\n * @title IReceiver\n * @notice Receives messages on destination chain and forwards them to IMessageDestinationHandler\n */\ninterface IReceiver {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n}\n"
    },
    "contracts/interfaces/cctp/ITokenMessenger.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @return _nonce unique nonce reserved by message\n     */\n    function depositForBurn(\n        uint amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken\n    ) external returns (uint64 _nonce);\n\n    /**\n     * @notice Replace a BurnMessage to change the mint recipient and/or\n     * destination caller. Allows the sender of a previous BurnMessage\n     * (created by depositForBurn or depositForBurnWithCaller)\n     * to send a new BurnMessage to replace the original.\n     * The new BurnMessage will reuse the amount and burn token of the original,\n     * without requiring a new deposit.\n     * @dev The new message will reuse the original message's nonce. For a\n     * given nonce, all replacement message(s) and the original message are\n     * valid to broadcast on the destination domain, until the first message\n     * at the nonce confirms, at which point all others are invalidated.\n     * Note: The msg.sender of the replaced message must be the same as the\n     * msg.sender of the original message.\n     * @param originalMessage original message bytes (to replace)\n     * @param originalAttestation original attestation bytes\n     * @param newDestinationCaller the new destination caller, which may be the\n     * same as the original destination caller, a new destination caller, or an empty\n     * destination caller (bytes32(0), indicating that any destination caller is valid.)\n     * @param newMintRecipient the new mint recipient, which may be the same as the\n     * original mint recipient, or different.\n     */\n    function replaceDepositForBurn(\n        bytes calldata originalMessage,\n        bytes calldata originalAttestation,\n        bytes32 newDestinationCaller,\n        bytes32 newMintRecipient\n    ) external;\n}\n"
    },
    "contracts/interfaces/IGasOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IGasOracle {\n    function chainData(uint chainId) external view returns (uint128 price, uint128 gasPrice);\n\n    function chainId() external view returns (uint);\n\n    function crossRate(uint otherChainId) external view returns (uint);\n\n    function getTransactionGasCostInNativeToken(uint otherChainId, uint256 gasAmount) external view returns (uint);\n\n    function getTransactionGasCostInUSD(uint otherChainId, uint256 gasAmount) external view returns (uint);\n\n    function price(uint chainId) external view returns (uint);\n\n    function setChainData(uint chainId, uint128 price, uint128 gasPrice) external;\n\n    function setGasPrice(uint chainId, uint128 gasPrice) external;\n\n    function setPrice(uint chainId, uint128 price) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    }
  }
}}