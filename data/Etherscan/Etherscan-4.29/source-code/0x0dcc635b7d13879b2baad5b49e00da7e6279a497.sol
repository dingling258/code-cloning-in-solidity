{{
  "language": "Solidity",
  "sources": {
    "rizoMigration.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2024-04-24\r\n*/\r\n\r\n/*\r\n This smart contract facilitates the swap from old RIZO tokens to new RIZO tokens.\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.16;\r\n\r\ninterface iERC20 {\r\n\r\n\tfunction balanceOf(address who) external view returns (uint256 balance);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256 remaining);\r\n\r\n\tfunction transfer(address to, uint256 value) external returns (bool success);\r\n\r\n\tfunction approve(address spender, uint256 value) external returns (bool success);\r\n\r\n\tfunction transferFrom(address from, address to, uint256 value) external returns (bool success);\r\n\r\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract Context {\r\n\tfunction _msgSender() internal view returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view returns (bytes memory) {\r\n\t\tthis;\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b <= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n\t\tc = a + b;\r\n\t\tassert(c >= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\tfunction safeTransfer(iERC20 _token, address _to, uint256 _value) internal {\r\n\t\trequire(_token.transfer(_to, _value));\r\n\t}\r\n\tfunction safeTransferFrom(iERC20 _token, address _from, address _to, uint256 _value) internal {\r\n\t\trequire(_token.transferFrom(_from, _to, _value));\r\n\t}\r\n}\r\n\r\ncontract Controllable is Context {\r\n    mapping (address => bool) public controllers;\r\n\r\n\tconstructor () {\r\n\t\taddress msgSender = _msgSender();\r\n\t\tcontrollers[msgSender] = true;\r\n\t}\r\n\r\n\tmodifier onlyController() {\r\n\t\trequire(controllers[_msgSender()], \"Controllable: caller is not a controller\");\r\n\t\t_;\r\n\t}\r\n\r\n    function addController(address _address) public onlyController {\r\n        controllers[_address] = true;\r\n    }\r\n\r\n    function removeController(address _address) public onlyController {\r\n        delete controllers[_address];\r\n    }\r\n}\r\n\r\ncontract Pausable is Controllable {\r\n\tevent Pause();\r\n\tevent Unpause();\r\n\r\n\tbool public paused = false;\r\n\r\n\tmodifier whenNotPaused() {\r\n\t\trequire(!paused);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenPaused() {\r\n\t\trequire(paused);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction pause() public onlyController whenNotPaused {\r\n\t\tpaused = true;\r\n\t\temit Pause();\r\n\t}\r\n\r\n\tfunction unpause() public onlyController whenPaused {\r\n\t\tpaused = false;\r\n\t\temit Unpause();\r\n\t}\r\n}\r\n\r\ncontract RIZO_tokenswap is Controllable, Pausable {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for iERC20;\r\n\r\n\tmapping (address => bool) public blocklist;\r\n    mapping (address => uint256) public v1TokenDeposited;\r\n\tmapping (address => uint256) public v2TokenBalance;\r\n    mapping (address => uint256) public v2TokenClaimed;\r\n\r\n\tbool public v2ClaimActive = false;\r\n\r\n    bool public divisorEnabled = false;\r\n\r\n    iERC20 public tokenOld; \r\n    iERC20 public tokenNew;\r\n    uint256 public blocked;\r\n\r\n    uint256 public newTokenDivisor = 1;\r\n\r\n\tconstructor() {\r\n    \tcontrollers[msg.sender] = true;\r\n\t}\r\n\r\n    function setOldToken(address _oldToken) public onlyController {\r\n\t    tokenOld = iERC20(_oldToken);\r\n\t}\r\n\t\r\n\tfunction setNewToken(address _newToken) public onlyController {\r\n\t    tokenNew = iERC20(_newToken);\r\n\t}\r\n\r\n    function setBalances(address[] memory addresses, uint256[] memory balances)  public onlyController returns(bool) {\r\n        require(addresses.length == balances.length, \"Total number of addressess and balances are not equal\");\r\n\r\n        for(uint i = 0; i < addresses.length; i++) {\r\n            if(addresses[i] != address(0) && balances[i] >= 0) {\r\n                v2TokenBalance[addresses[i]] = balances[i];\r\n            }\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n\tfunction receiveEther() public payable {\r\n\t\trevert();\r\n\t}\r\n\r\n    function swap() public {\r\n        uint256 _amount = tokenOld.balanceOf(msg.sender);\r\n        require(_amount > 0,\"No balance of RIZO tokens\");\r\n        _swap(_amount);\r\n    }\r\n\r\n    function _swap(uint256 _amount) internal {\r\n        tokenOld.safeTransferFrom(address(msg.sender), address(this), _amount);\r\n        if (blocklist[msg.sender]) {\r\n            blocked.add(_amount);\r\n        } else {\r\n\t\t\tuint256 currentAmount = v2TokenBalance[msg.sender];\r\n            uint256 currentDepositedAmount = v1TokenDeposited[msg.sender];\r\n            \r\n            v1TokenDeposited[msg.sender] = currentDepositedAmount.add(_amount);\r\n\r\n\t\t\tv2TokenBalance[msg.sender] = currentAmount.add(_amount);\r\n        }\r\n        emit swapped(_amount);\r\n    }\r\n\r\n\tfunction claimV2() public {\r\n\t\trequire(address(tokenNew) != address(0), \"New token address to claim has not been set\");\r\n\t\trequire(v2ClaimActive, \"Can not claim v2 tokens until claiming has been enabled\");\r\n\t\trequire(v2TokenBalance[msg.sender] > 0, \"No claimable v2 tokens\");\r\n\r\n        uint256 _amount = v2TokenBalance[msg.sender];\r\n        uint256 _claimedAmount = v2TokenClaimed[msg.sender];\r\n\r\n\t\trequire(tokenNew.balanceOf(address(this)) >= _amount, \"Not enough v2 tokens in contract to disburse.\");\r\n\r\n\t\tbool success = tokenNew.transfer(address(msg.sender), _amount);\r\n\t\tif (success) {\r\n\t\t\tv2TokenBalance[msg.sender] = _amount.sub(_amount);\r\n\r\n            v2TokenClaimed[msg.sender] = _claimedAmount.add(_amount);\r\n\t\t\temit claimed(_amount);\r\n\t\t} else {\r\n\t\t\trevert();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setClaimState(bool state) external onlyController {\r\n\t\tv2ClaimActive = state;\r\n\t}\r\n\r\n    function setDivisorState(bool state) external onlyController {\r\n\t\tdivisorEnabled = state;\r\n\t}\r\n    \r\n    function blockAddress(address _address, bool _state) external onlyController returns (bool) {\r\n\t\tblocklist[_address] = _state;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferToken(address tokenAddress, uint256 amount) external onlyController {\r\n\t\tiERC20(tokenAddress).transfer(address(msg.sender),amount);\r\n\t}\r\n\r\n\tfunction flushToken(address tokenAddress) external onlyController {\r\n\t\tuint256 amount = iERC20(tokenAddress).balanceOf(address(this));\r\n\t\tiERC20(tokenAddress).transfer(address(msg.sender),amount);\r\n\t}\r\n\r\n    event swapped(uint256 indexed amount);\r\n\tevent claimed(uint256 indexed amount);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": []
  }
}}