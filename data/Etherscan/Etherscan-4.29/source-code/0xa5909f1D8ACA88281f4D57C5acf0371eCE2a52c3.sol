{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/core/BrevisProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"../lib/Ownable.sol\";\nimport \"../lib/Lib.sol\";\nimport \"../interface/ISMT.sol\";\nimport \"../interface/IZkpVerifier.sol\";\n\ncontract BrevisProof is Ownable {\n    uint32 constant PUBLIC_BYTES_START_IDX = 11 * 32; // the first 10 32bytes are groth16 proof (A/B/C/Commitment), the 11th 32bytes is cPub\n\n    mapping(uint64 => IZkpVerifier) public verifierAddresses; // chainid => snark verifier contract address\n    mapping(bytes32 => Brevis.ProofData) public proofs;\n    ISMT public smtContract;\n    address public brevisRequest;\n\n    event VerifierAddressesUpdated(\n        uint64[] chainIds,\n        IZkpVerifier[] newAddresses\n    );\n    event SmtContractUpdated(ISMT smtContract);\n    event BrevisRequestUpdated(address brevisRequest);\n\n    constructor(ISMT _smtContract) {\n        smtContract = _smtContract;\n    }\n\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0\n    function init(ISMT _smtContract) external {\n        initOwner();\n        smtContract = _smtContract;\n    }\n\n    modifier onlyBrevisRequest() {\n        require(brevisRequest == msg.sender, \"not brevisRequest\");\n        _;\n    }\n\n    // zk proof\n    function submitProof(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs\n    ) external onlyBrevisRequest returns (bytes32 _requestId) {\n        require(verifyRaw(_chainId, _proofWithPubInputs), \"proof not valid\");\n        Brevis.ProofData memory data = unpackProofData(_proofWithPubInputs);\n        _requestId = data.commitHash;\n        require(\n            smtContract.isSmtRootValid(_chainId, data.smtRoot),\n            \"smt root not valid\"\n        );\n        proofs[_requestId].appCommitHash = data.appCommitHash; // save necessary fields only, to save gas\n        proofs[_requestId].appVkHash = data.appVkHash;\n    }\n\n    // op/avs proof\n    function submitOpResult(bytes32 _requestId) external onlyBrevisRequest {\n        proofs[_requestId].commitHash = _requestId;\n    }\n\n    function validateOpRequest(\n        bytes32 _requestId,\n        uint64 _chainId,\n        Brevis.ExtractInfos calldata _info\n    ) external view {\n        Brevis.ProofData memory data = proofs[_requestId];\n        require(data.commitHash != bytes32(0), \"proof not exists\");\n        bytes memory hashes;\n\n        require(\n            _info.receipts.length + _info.stores.length + _info.txs.length <=\n                100,\n            \"exceeds max allowed\"\n        );\n\n        for (uint256 i = 0; i < _info.receipts.length; i++) {\n            bytes memory fieldInfos;\n            for (uint256 j = 0; j < _info.receipts[i].logs.length; j++) {\n                Brevis.LogInfo memory field = _info.receipts[i].logs[j];\n                fieldInfos = abi.encodePacked(\n                    fieldInfos,\n                    keccak256(\n                        abi.encodePacked(\n                            field.logIndex,\n                            field.value,\n                            field.valueFromTopic,\n                            field.valueIndex,\n                            field.contractAddress,\n                            field.logTopic0\n                        )\n                    )\n                );\n            }\n\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _info.receipts[i].blkNum,\n                        _info.receipts[i].receiptIndex,\n                        fieldInfos\n                    )\n                )\n            );\n        }\n\n        for (uint256 i = 0; i < _info.stores.length; i++) {\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _info.stores[i].blockHash,\n                        _info.stores[i].account,\n                        _info.stores[i].slot,\n                        _info.stores[i].slotValue,\n                        _info.stores[i].blockNumber\n                    )\n                )\n            );\n        }\n        for (uint256 i = 0; i < _info.txs.length; i++) {\n            hashes = abi.encodePacked(\n                hashes,\n                keccak256(\n                    abi.encodePacked(\n                        _info.txs[i].txHash,\n                        _info.txs[i].hashOfRawTxData,\n                        _info.txs[i].blockHash,\n                        _info.txs[i].blockNumber\n                    )\n                )\n            );\n        }\n\n        require(\n            keccak256(abi.encodePacked(_chainId, hashes)) == data.commitHash,\n            \"commitHash and info not match\"\n        );\n    }\n\n    function hasProof(bytes32 _requestId) external view returns (bool) {\n        return\n            proofs[_requestId].commitHash != bytes32(0) ||\n            proofs[_requestId].appCommitHash != bytes32(0);\n    }\n\n    function getProofAppData(\n        bytes32 _requestId\n    ) external view returns (bytes32, bytes32) {\n        return (proofs[_requestId].appCommitHash, proofs[_requestId].appVkHash);\n    }\n\n    function verifyRaw(\n        uint64 _chainId,\n        bytes calldata _proofWithPubInputs\n    ) private view returns (bool) {\n        IZkpVerifier verifier = verifierAddresses[_chainId];\n        require(address(verifier) != address(0), \"chain verifier not set\");\n        return verifier.verifyRaw(_proofWithPubInputs);\n    }\n\n    function unpackProofData(\n        bytes calldata _proofWithPubInputs\n    ) internal pure returns (Brevis.ProofData memory data) {\n        data.commitHash = bytes32(\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX +\n                32]\n        );\n        data.smtRoot = bytes32(\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX +\n                32:PUBLIC_BYTES_START_IDX + 2 * 32]\n        );\n        data.appCommitHash = bytes32(\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX +\n                3 *\n                32:PUBLIC_BYTES_START_IDX + 4 * 32]\n        );\n        data.appVkHash = bytes32(\n            _proofWithPubInputs[PUBLIC_BYTES_START_IDX +\n                4 *\n                32:PUBLIC_BYTES_START_IDX + 5 * 32]\n        );\n    }\n\n    function updateVerifierAddress(\n        uint64[] calldata _chainIds,\n        IZkpVerifier[] calldata _verifierAddresses\n    ) public onlyOwner {\n        require(\n            _chainIds.length == _verifierAddresses.length,\n            \"length not match\"\n        );\n        for (uint256 i = 0; i < _chainIds.length; i++) {\n            verifierAddresses[_chainIds[i]] = _verifierAddresses[i];\n        }\n        emit VerifierAddressesUpdated(_chainIds, _verifierAddresses);\n    }\n\n    function updateSmtContract(ISMT _smtContract) public onlyOwner {\n        smtContract = _smtContract;\n        emit SmtContractUpdated(smtContract);\n    }\n\n    function updateBrevisRequest(address _brevisRequest) public onlyOwner {\n        brevisRequest = _brevisRequest;\n        emit BrevisRequestUpdated(_brevisRequest);\n    }\n}\n"
    },
    "contracts/interface/ISMT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./IZkpVerifier.sol\";\n\ninterface ISMT {\n    struct SmtUpdate {\n        bytes32 newSmtRoot;\n        uint64 endBlockNum;\n        bytes32 endBlockHash;\n        bytes32 nextChunkMerkleRoot;\n        IZkpVerifier.Proof proof;\n        bytes32 commitPub;\n    }\n\n    function updateRoot(uint64 chainId, SmtUpdate memory u) external;\n\n    function isSmtRootValid(\n        uint64 chainId,\n        bytes32 smtRoot\n    ) external view returns (bool);\n}\n"
    },
    "contracts/interface/IZkpVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ninterface IZkpVerifier {\n    struct Proof {\n        uint256[2] a;\n        uint256[2][2] b;\n        uint256[2] c;\n        uint256[2] commitment;\n    }\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\n}\n"
    },
    "contracts/lib/Lib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"solidity-rlp/contracts/RLPReader.sol\";\n\nlibrary Brevis {\n    struct ReceiptInfo {\n        uint64 blkNum;\n        uint64 receiptIndex; // ReceiptIndex in the block\n        LogInfo[] logs;\n    }\n\n    struct LogInfo {\n        uint64 logIndex; // LogIndex of the field\n        bytes32 value;\n        bool valueFromTopic;\n        uint64 valueIndex; // index of the fields in topic or data\n        address contractAddress;\n        bytes32 logTopic0;\n    }\n\n    struct StorageInfo {\n        bytes32 blockHash;\n        address account;\n        bytes32 slot;\n        bytes32 slotValue;\n        uint64 blockNumber;\n    }\n\n    struct TransactionInfo {\n        bytes32 txHash;\n        bytes32 hashOfRawTxData;\n        bytes32 blockHash;\n        uint64 blockNumber;\n    }\n\n    struct ExtractInfos {\n        ReceiptInfo[] receipts;\n        StorageInfo[] stores;\n        TransactionInfo[] txs;\n    }\n\n    // retrieved from proofData, to align the logs with circuit...\n    struct ProofData {\n        bytes32 commitHash;\n        bytes32 appCommitHash; // zk-program computing circuit commit hash\n        bytes32 appVkHash; // zk-program computing circuit Verify Key hash\n        bytes32 smtRoot; // for zk-program computing proof only\n    }\n}\n\nlibrary Tx {\n    using RLPReader for bytes;\n    using RLPReader for uint;\n    using RLPReader for RLPReader.RLPItem;\n\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n    }\n\n    // support DynamicFeeTxType for now\n    function decodeTx(\n        bytes calldata txRaw\n    ) public pure returns (TxInfo memory info) {\n        uint8 txType = uint8(txRaw[0]);\n        require(txType == 2, \"not a DynamicFeeTxType\");\n\n        bytes memory rlpData = txRaw[1:];\n        RLPReader.RLPItem[] memory values = rlpData.toRlpItem().toList();\n        info.chainId = uint64(values[0].toUint());\n        info.nonce = uint64(values[1].toUint());\n        info.gasTipCap = values[2].toUint();\n        info.gasFeeCap = values[3].toUint();\n        info.gas = values[4].toUint();\n        info.to = values[5].toAddress();\n        info.value = values[6].toUint();\n        info.data = values[7].toBytes();\n\n        (uint8 v, bytes32 r, bytes32 s) = (\n            uint8(values[9].toUint()),\n            bytes32(values[10].toBytes()),\n            bytes32(values[11].toBytes())\n        );\n        // remove r,s,v and adjust length field\n        bytes memory unsignedTxRaw;\n        uint16 unsignedTxRawDataLength;\n        uint8 prefix = uint8(txRaw[1]);\n        uint8 lenBytes = prefix - 0xf7; // assume lenBytes won't larger than 2, means the tx rlp data size won't exceed 2^16\n        if (lenBytes == 1) {\n            unsignedTxRawDataLength = uint8(bytes1(txRaw[2:3])) - 67; //67 is the bytes of r,s,v\n        } else {\n            unsignedTxRawDataLength =\n                uint16(bytes2(txRaw[2:2 + lenBytes])) -\n                67;\n        }\n        if (unsignedTxRawDataLength <= 55) {\n            unsignedTxRaw = abi.encodePacked(\n                txRaw[:2],\n                txRaw[3:txRaw.length - 67]\n            );\n            unsignedTxRaw[1] = bytes1(0xc0 + uint8(unsignedTxRawDataLength));\n        } else {\n            if (unsignedTxRawDataLength <= 255) {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf8),\n                    bytes1(uint8(unsignedTxRawDataLength)),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            } else {\n                unsignedTxRaw = abi.encodePacked(\n                    txRaw[0],\n                    bytes1(0xf9),\n                    bytes2(unsignedTxRawDataLength),\n                    txRaw[2 + lenBytes:txRaw.length - 67]\n                );\n            }\n        }\n        info.from = recover(keccak256(unsignedTxRaw), r, s, v);\n    }\n\n    function recover(\n        bytes32 message,\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (address) {\n        if (v < 27) {\n            v += 27;\n        }\n        return ecrecover(message, v, r, s);\n    }\n}\n"
    },
    "contracts/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.18;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "solidity-rlp/contracts/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    }
  }
}}