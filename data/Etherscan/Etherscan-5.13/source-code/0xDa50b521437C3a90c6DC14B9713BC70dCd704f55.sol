{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 99999
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../Address.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length == 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\n\nimport \"./EIP712.sol\";\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "contracts/AnbotoExecV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\n\n/* ========== STRUCTS ========== */\n\n/**\n * @notice Represents a customer order.\n * @member inputToken Token being sold.\n * @member totalAmount Amount to sell.\n * @member outputToken Token being bought.\n * @member outMin Minumum amount the user expects to get.\n * @member maxGasPrice Maximum gas price accepted.\n * @member maxFeeAbsolute Agreed max fee amount for order.\n * This fee is covering tx gas fee and taken dependant on the ratio between tx gas price and max gas price.\n * @member feePercent Agreed Anboto service fee amount in percents, where 1_00 equals one percent.\n * @member isFeeTakenInInput If true, the fee will be taken in input tokens; otherwise it will be taken in output token.\n * @member deadline Deadline until which the order is valid.\n * @member salt Random additional input to make the order unique.\n */\nstruct Order {\n    IERC20 inputToken;\n    uint256 totalAmount;\n    IERC20 outputToken;\n    uint256 outMin;\n    uint256 maxGasPrice;\n    uint256 maxFeeAbsolute;\n    uint256 feePercent;\n    bool isFeeTakenInInput;\n    uint256 deadline;\n    uint256 salt;\n}\n\n/**\n * @notice Exchange quote for swapping tokens.\n * @member spender Address approved to execute swap.\n * @member swapTarget Contract executing the swap.\n * @member sellAmount Amount to sell in the swap.\n * @member swapCallData Custom swap data.\n */\nstruct Quote {\n    address spender;\n    address swapTarget;\n    uint256 sellAmount;\n    bytes swapCallData;\n}\n\n/**\n * @notice CoW settlement details.\n * @member sellAmount Amount to sell to the CoW.\n * @member buyAmount Amount to buy from the CoW.\n */\nstruct Settlement {\n    uint256 sellAmount;\n    uint256 buyAmount;\n}\n\n/* ========== CONTRACTS ========== */\n\n/**\n * @title Composite order contract version 2.\n * @notice This contract manages sliced execution of customer's swap orders.\n * Slices can be executed in two ways:\n * - via executing a swap on external exchange based on a quote\n * - by settling a CoW order based on settlement provided by Anboto CoW solver\n * @dev Contract is Ownable and EIP712.\n * It uses SafeERC20 for token operations.\n * It supports EIP1271 signed messages.\n */\ncontract AnbotoExecV2 is Ownable, EIP712 {\n    using SafeERC20 for IERC20;\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @notice Event emitted when new Anboto authorized address is set.\n     * @dev Emitted when `setAnboto` is called.\n     * @param anboto Anboto authorized address.\n     * @param set `true` if authorized, `false` if unathorized.\n     */\n    event AnbotoSet(address indexed anboto, bool set);\n\n    /**\n     * @notice Event emitted when exchange allowlist is updated.\n     * @dev Emmited when `_updateExchangeAllowlist` is called.\n     * @param exchange Address of exchange to update.\n     * @param allowed True when exchange is allowed, false when disallowed.\n     */\n    event ExchangeAllowlistUpdated(address exchange, bool allowed);\n\n    /**\n     * @notice Event emitted when address for Anboto CoW solver is set.\n     * @dev Emitted when `setAnbotoCowSolver` is called.\n     * @param anbotoCowSolver Address belonging to Anboto CoW solver.\n     */\n    event AnbotoCowSolverSet(address indexed anbotoCowSolver);\n\n    /**\n     * @notice Event emitted when order slice is executed.\n     * @dev Emitted when `executeOrder` is called.\n     * @param maker Maker of the order.\n     * @param sig Order signature.\n     * @param spentAmount Amount of user tokens spent in execution.\n     * @param boughtAmount Amount of tokens bought for user in execution.\n     * @param feeAmount Amount of tokens taken as fees.\n     */\n    event OrderExecuted(\n        address indexed maker,\n        bytes indexed sig,\n        uint256 spentAmount,\n        uint256 boughtAmount,\n        uint256 feeAmount\n    );\n\n    /**\n     * @notice Event emitted when part of the order is executed by settling CoW order.\n     * @dev Emitted when `settleCow` is called.\n     * @param maker Maker of the order.\n     * @param sig Order signature.\n     * @param spentAmount Amount of user tokens spent in settlement.\n     * @param boughtAmount Amount of tokens bought for user in settlement.\n     * @param feeAmount Amount of tokens taken as fees.\n     */\n    event CowSettled(\n        address indexed maker,\n        bytes indexed sig,\n        uint256 spentAmount,\n        uint256 boughtAmount,\n        uint256 feeAmount\n    );\n\n    /**\n     * @notice Event emitted when fees are claimed.\n     * @dev Emitted when `claimFees` is called.\n     * @param claimedTo Where claimed fees were sent to.\n     * @param token Token claimed.\n     * @param amount Amount claimed.\n     */\n    event FeesClaimed(address indexed claimedTo, address indexed token, uint256 amount);\n\n    /* ========== CONSTANTS ========== */\n\n    /** @notice One hundred percent. */\n    uint256 public constant FULL_PERCENT = 100_00;\n\n    /** @notice Order struct type signature hash. */\n    bytes32 private constant ORDER_TYPEHASH =\n        keccak256(\n            \"Order(address inputToken,uint256 totalAmount,address outputToken,uint256 outMin,uint256 maxGasPrice,uint256 maxFeeAbsolute,uint256 feePercent,bool isFeeTakenInInput,uint256 deadline,uint256 salt)\"\n        );\n\n    /* ========== STATE VARIABLES ========== */\n\n    /** @notice Addresses approved to execute order slices. */\n    mapping(address => bool) public isAnboto;\n    /** @notice Tracks how much each order is already fulfilled. */\n    mapping(bytes => uint256) public orderFulfilledAmount;\n\n    /** @notice Which exchanges are allowed to be used for executing orders. */\n    mapping(address => bool) public exchangeAllowlist;\n\n    /** @notice Address where CoW settlement contract is deployed. */\n    address public immutable cowSettlementContract;\n    /** @notice Address of approved Anboto CoW solver. */\n    address public anbotoCowSolver;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    /**\n     * @notice Contract constructor setting contract domain name and version,\n     * and other state.\n     * @param _allowedExchanges Address of exchanges that are allowed to be used for executing orders.\n     * @param _cowSettlementContract Address where CoW settlement contract is deployed.\n     * @param _anbotoCowSolver Address of approved Anboto CoW solver.\n     */\n    constructor(\n        address[] memory _allowedExchanges,\n        address _cowSettlementContract,\n        address _anbotoCowSolver\n    ) EIP712(\"AnbotoExecV2\", \"2\") {\n        for (uint256 i; i < _allowedExchanges.length; ++i) {\n            _updateExchangeAllowlist(_allowedExchanges[i], true);\n        }\n\n        cowSettlementContract = _cowSettlementContract;\n        _setAnbotoCowSolver(_anbotoCowSolver);\n    }\n\n    /* ========== ADMINISTRATION ========== */\n\n    /**\n     * @notice Sets or unsets the address as Anboto approved.\n     * @dev Requirements:\n     * - can only be called by owner\n     * @param _anboto Address to approve or unapprove.\n     * @param _set Approves the address when `true`, unapproves when `false`.\n     */\n    function setAnboto(address _anboto, bool _set) external onlyOwner {\n        isAnboto[_anboto] = _set;\n\n        emit AnbotoSet(_anboto, _set);\n    }\n\n    function updateExchangeAllowlist(\n        address[] calldata exchanges,\n        bool[] calldata allowed\n    ) external onlyOwner {\n        require(\n            exchanges.length == allowed.length,\n            \"AnbotoExecV2::updateExchangeAllowlist: Parameter length mismatch.\"\n        );\n\n        for (uint256 i; i < exchanges.length; ++i) {\n            _updateExchangeAllowlist(exchanges[i], allowed[i]);\n        }\n    }\n\n    function _updateExchangeAllowlist(address exchange, bool allowed) private {\n        exchangeAllowlist[exchange] = allowed;\n\n        emit ExchangeAllowlistUpdated(exchange, allowed);\n    }\n\n    /**\n     * @notice Sets address as approved Anboto CoW solver.\n     * @dev Requirements:\n     * - can only be called by owner\n     * @param _anbotoCowSolver Address to set.\n     */\n    function setAnbotoCowSolver(address _anbotoCowSolver) external onlyOwner {\n        _setAnbotoCowSolver(_anbotoCowSolver);\n    }\n\n    /**\n     * @dev Sets address as approved Anboto CoW solver.\n     * @param _anbotoCowSolver Address to set.\n     */\n    function _setAnbotoCowSolver(address _anbotoCowSolver) private {\n        anbotoCowSolver = _anbotoCowSolver;\n\n        emit AnbotoCowSolverSet(_anbotoCowSolver);\n    }\n\n    /* ========== ORDER FULFILLMENT ========== */\n\n    /**\n     * @notice Executes a slice of the original order.\n     * The slice is executed by swapping tokens with external exchange as\n     * specified in the quote, while making sure that original order\n     * specifications are honored.\n     * Allowance should be set with input token beforehand by maker.\n     * Portion of the output will be held as a fee.\n     * Un-swapped  portion of the input will be returned to the maker.\n     * @dev Requirements:\n     * - should be called by owner or Anboto approved address\n     * - should be called before order deadline\n     * - should be called with different token order input and output tokens\n     * - should be called with valid signature; order is signed by maker and is unchanged\n     * - should be called when gas price is not too high\n     * - quote sell amount should not over fulfill order\n     * - quote buy amount should be over limit specified by order\n     * - quote swap target needs to be on exchange allowlist\n     * @param _order Original order made by maker.\n     * @param _quote Slice execution specifications.\n     * @param _maker Anboto user that made the order.\n     * @param _sig Order signed by maker.\n     */\n    function executeOrder(\n        Order calldata _order,\n        Quote calldata _quote,\n        address _maker,\n        bytes calldata _sig\n    ) external {\n        // Verify conditions.\n        require(\n            msg.sender == owner() || isAnboto[msg.sender],\n            \"AnbotoExecV2::executeOrder: Caller is not Anboto.\"\n        );\n        validateOrder(_order, _maker, _sig);\n        require(\n            exchangeAllowlist[_quote.swapTarget],\n            \"AnbotoExecV2::executeOrder: Swap target not allowed.\"\n        );\n        require(\n            tx.gasprice <= _order.maxGasPrice,\n            \"AnbotoExecV2::executeOrder: Gas price too high.\"\n        );\n\n        // Unpack structs.\n        uint256 sliceInputAmount = _quote.sellAmount;\n        IERC20 inputToken = _order.inputToken;\n        IERC20 outputToken = _order.outputToken;\n\n        // Update state and check that order total is not exceeded.\n        orderFulfilledAmount[_sig] += sliceInputAmount;\n        checkOrderTotal(_order, _sig);\n\n        // Get the balance before the swap.\n        uint256 swapInputBalance = inputToken.balanceOf(address(this));\n        uint256 swapOutputBalance = outputToken.balanceOf(address(this));\n\n        // Transfer input tokens.\n        inputToken.safeTransferFrom(_maker, address(this), sliceInputAmount);\n\n        uint256 feeAmountInputToken;\n        if (_order.isFeeTakenInInput) {\n            // Take fees in input tokens.\n            feeAmountInputToken = getFee(\n                _order,\n                sliceInputAmount,\n                sliceInputAmount,\n                tx.gasprice\n            );\n        }\n\n        // Execute the swap.\n        inputToken.safeApprove(_quote.spender, sliceInputAmount - feeAmountInputToken);\n        {\n            // solhint-disable-next-line avoid-low-level-calls\n            (bool success, bytes memory data) = _quote.swapTarget.call(\n                _quote.swapCallData\n            );\n            if (!success) revert(getRevertMsg(data));\n        }\n\n        // Get the balance after the swap.\n        // Equals amount of input tokens that were pulled from maker but not swapped.\n        swapInputBalance =\n            inputToken.balanceOf(address(this)) -\n            swapInputBalance -\n            feeAmountInputToken;\n        // Equals amount of output tokens that were obtained in the swap.\n        swapOutputBalance = outputToken.balanceOf(address(this)) - swapOutputBalance;\n\n        // If we swapped less than expected\n        if (swapInputBalance > 0) {\n            // - correct collected fees\n            uint256 feeCorrection = (feeAmountInputToken * swapInputBalance) /\n                (sliceInputAmount - feeAmountInputToken);\n            uint256 swapInputBalanceCorrected = swapInputBalance + feeCorrection;\n\n            feeAmountInputToken -= feeCorrection;\n            // - correct slice amount\n            sliceInputAmount -= swapInputBalanceCorrected;\n            // - correct fulfilled tally\n            orderFulfilledAmount[_sig] -= swapInputBalanceCorrected;\n            // - return unspent tokens\n            inputToken.safeTransfer(_maker, swapInputBalanceCorrected);\n            // - set approval to 0\n            inputToken.safeApprove(_quote.spender, 0);\n        }\n\n        uint256 feeAmountOutputToken;\n        if (!_order.isFeeTakenInInput) {\n            // Take fees in output tokens.\n            feeAmountOutputToken = getFee(\n                _order,\n                sliceInputAmount,\n                swapOutputBalance,\n                tx.gasprice\n            );\n        }\n\n        uint256 swapOutputBalanceCorrected = swapOutputBalance - feeAmountOutputToken;\n\n        // Check if enough output tokens were received by the swap.\n        checkOutputAmount(_order, sliceInputAmount, swapOutputBalanceCorrected);\n\n        // Transfer output tokens (minus fees) to the maker.\n        outputToken.safeTransfer(_maker, swapOutputBalanceCorrected);\n\n        emit OrderExecuted(\n            _maker,\n            _sig,\n            sliceInputAmount,\n            swapOutputBalanceCorrected,\n            feeAmountInputToken + feeAmountOutputToken\n        );\n    }\n\n    /**\n     * @notice Use a slice of the original order to settle a CoW order.\n     * The CoW order is settled by swapping tokens with CoW settlement contract\n     * as specified in the settlement, while making sure that original order\n     * specifications are honored.\n     * Allowance should be set with input token beforehand by maker.\n     * Portion of the output will be held as a fee.\n     * @dev Requirements:\n     * - should be called by CoW settlement contract\n     * - transaction should be originating from Anboto CoW solver\n     * - should be called before order deadline\n     * - should be called with different token order input and output tokens\n     * - should be called with valid signature; order is signed by maker and is unchanged\n     * - settlement sell amount should not over fulfill order\n     * - settlement buy amount should be over limit specified by order\n     * @param _order Original order made by maker.\n     * @param _settlement CoW settlement specifications.\n     * @param _maker Anboto user that made the order.\n     * @param _sig Order signed by maker.\n     */\n    function settleCow(\n        Order calldata _order,\n        Settlement calldata _settlement,\n        address _maker,\n        bytes calldata _sig\n    ) external {\n        // Verify conditions.\n        require(\n            msg.sender == cowSettlementContract,\n            \"AnbotoExecV2::settleCow: Caller is not CoW settlement contract.\"\n        );\n        require(\n            // solhint-disable-next-line avoid-tx-origin\n            tx.origin == anbotoCowSolver,\n            \"AnbotoExecV2::settleCow: Origin is not Anboto CoW solver.\"\n        );\n        validateOrder(_order, _maker, _sig);\n\n        // Unpack structs.\n        IERC20 inputToken = _order.inputToken;\n        IERC20 outputToken = _order.outputToken;\n        uint256 sellAmount = _settlement.sellAmount;\n        uint256 buyAmount = _settlement.buyAmount;\n\n        // Calculate fees.\n        uint256 feeAmountInputToken;\n        if (_order.isFeeTakenInInput) {\n            // Take fees in input tokens.\n            feeAmountInputToken = getCowFee(_order, sellAmount);\n        }\n        uint256 feeAmountOutputToken;\n        if (!_order.isFeeTakenInInput) {\n            // Take fees in output tokens.\n            feeAmountOutputToken = getCowFee(_order, buyAmount);\n        }\n\n        // Update balance and verify settlement.\n        orderFulfilledAmount[_sig] += sellAmount + feeAmountInputToken;\n        checkOrderTotal(_order, _sig);\n        checkOutputAmount(\n            _order,\n            sellAmount + feeAmountInputToken,\n            buyAmount - feeAmountOutputToken\n        );\n\n        // Settle order.\n        inputToken.safeTransferFrom(_maker, cowSettlementContract, sellAmount);\n        outputToken.safeTransferFrom(cowSettlementContract, address(this), buyAmount);\n        // Take fees.\n        if (feeAmountInputToken > 0) {\n            inputToken.safeTransferFrom(_maker, address(this), feeAmountInputToken);\n        }\n\n        // Transfer output tokens (minus fees) to the maker.\n        outputToken.safeTransfer(_maker, buyAmount - feeAmountOutputToken);\n\n        emit CowSettled(\n            _maker,\n            _sig,\n            sellAmount + feeAmountInputToken,\n            buyAmount,\n            feeAmountInputToken + feeAmountOutputToken\n        );\n    }\n\n    /* ========== FEES ========== */\n\n    /**\n     * @notice Claim collected fees.\n     * @dev Requirements:\n     * - can only be called by owner\n     * - cannot be claimed to null address\n     * @param _tokens Claim fees collected in these tokens.\n     * @param _claimTo Where to send collected fees.\n     */\n    function claimFees(IERC20[] calldata _tokens, address _claimTo) external onlyOwner {\n        require(\n            _claimTo != address(0),\n            \"AnbotoExecV2::claimFees: Cannot claim to null address.\"\n        );\n\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            uint256 amountToClaim = _tokens[i].balanceOf(address(this));\n            _tokens[i].safeTransfer(_claimTo, amountToClaim);\n\n            emit FeesClaimed(_claimTo, address(_tokens[i]), amountToClaim);\n        }\n    }\n\n    /* ========== HELPERS ========== */\n\n    /**\n     * @notice Checks validity of order signature.\n     * The signature is considered valid, if\n     * - it is signed by provided signer and\n     * - provided order matches signed one.\n     * @dev Uses EIP712 and EIP1271 standard libraries.\n     * @param _order Signed order.\n     * @param _signer Order signer.\n     * @param _sig Signature to validate.\n     * @return `true` if order is valid, `false` otherwise.\n     */\n    function isValidSignature(\n        Order calldata _order,\n        address _signer,\n        bytes calldata _sig\n    ) public view returns (bool) {\n        bytes32 digest = _hashTypedDataV4(hashOrder(_order));\n        return SignatureChecker.isValidSignatureNow(_signer, digest, _sig);\n    }\n\n    /**\n     * @dev Calculates hash of an Order struct.\n     * Used as part of EIP712 and checking validity of order signature.\n     * @param _order Order to hash.\n     * @return Hash of the order.\n     */\n    function hashOrder(Order calldata _order) private pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    ORDER_TYPEHASH,\n                    _order.inputToken,\n                    _order.totalAmount,\n                    _order.outputToken,\n                    _order.outMin,\n                    _order.maxGasPrice,\n                    _order.maxFeeAbsolute,\n                    _order.feePercent,\n                    _order.isFeeTakenInInput,\n                    _order.deadline,\n                    _order.salt\n                )\n            );\n    }\n\n    /**\n     * @dev Gets revert message when a low-level call reverts, so that it can\n     * be bubbled-up to caller.\n     * @param _returnData Data returned from reverted low-level call.\n     * @return Revert message.\n     */\n    function getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\n        // if the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68)\n            return \"AnbotoExecV2::getRevertMsg: Transaction reverted silently.\";\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // slice the sig hash\n            _returnData := add(_returnData, 0x04)\n        }\n\n        return abi.decode(_returnData, (string)); // all that remains is the revert string\n    }\n\n    /**\n     * @dev Calculates fees owed to Anboto.\n     * @param _order Order made by maker.\n     * @param _sliceAmount Size of slice being executed.\n     * @param _baseAmount Base amount for fee calculation.\n     * @param _gasPrice Tx gas price\n     * @return feeAmount Amount of fees owed to Anboto.\n     */\n    function getFee(\n        Order calldata _order,\n        uint256 _sliceAmount,\n        uint256 _baseAmount,\n        uint256 _gasPrice\n    ) private pure returns (uint256 feeAmount) {\n        if (_order.maxFeeAbsolute > 0) {\n            // Take absolute fee when absolute max fee is specified.\n            // Absolute fees are total amount owed for whole order, so for each\n            // slice we need to take amount proportional to amount sold in the\n            // slice as compared to the total order. This amount is multiplied by\n            // ratio of tx gas price to max gas price so we could take the fee to\n            // cover the transaction costs.\n            feeAmount +=\n                (_order.maxFeeAbsolute * _gasPrice * _sliceAmount) /\n                (_order.maxGasPrice * _order.totalAmount);\n        }\n        if (_order.feePercent > 0) {\n            // Take relative fee when relative fee percent is specified.\n            feeAmount += (_baseAmount * _order.feePercent) / FULL_PERCENT;\n        }\n\n        // Should not collect more fees than we have.\n        require(\n            _baseAmount > feeAmount,\n            \"AnbotoExecV2::calculateFee: Fee larger than base amount.\"\n        );\n    }\n\n    /**\n     * @dev Calculates fees owed to Anboto.\n     * @param _order Order made by maker.\n     * @param _baseAmount Base amount for fee calculation.\n     * @return feeAmount Amount of fees owed to Anboto.\n     */\n    function getCowFee(Order calldata _order, uint256 _baseAmount)\n        private\n        pure\n        returns (uint256 feeAmount)\n    {\n        require(\n            _order.feePercent < FULL_PERCENT,\n            \"AnbotoExecV2::getCowFee: Fee larger than base amount.\"\n        );\n\n        if (_order.feePercent > 0) {\n            if (_order.isFeeTakenInInput) {\n                feeAmount =\n                    (_baseAmount * _order.feePercent) /\n                    (FULL_PERCENT - _order.feePercent);\n            } else {\n                feeAmount = (_baseAmount * _order.feePercent) / FULL_PERCENT;\n            }\n        }\n    }\n\n    /**\n     * @dev Validates order and its signature:\n     * - order deadline should not have passed\n     * - order fee amount should not be too high\n     * - order input and output tokens should not be same\n     * - order should be signed by maker and should be unchanged\n     * @param _order Order made by maker.\n     * @param _maker Anboto user that made the order.\n     * @param _sig Order signed by maker.\n     */\n    function validateOrder(\n        Order calldata _order,\n        address _maker,\n        bytes calldata _sig\n    ) private view {\n        require(\n            block.timestamp <= _order.deadline,\n            \"AnbotoExecV2::validateOrder: Order deadline passed.\"\n        );\n        require(\n            _order.inputToken != _order.outputToken,\n            \"AnbotoExecV2::validateOrder: Input and output tokens are same.\"\n        );\n\n        // Verify signature.\n        require(\n            isValidSignature(_order, _maker, _sig),\n            \"AnbotoExecV2::validateOrder: Invalid signature.\"\n        );\n    }\n\n    /**\n     * @dev Checks that order total amount has not been exceeded.\n     * @param _order Order made by maker.\n     * @param _sig Order signed by maker.\n     */\n    function checkOrderTotal(Order calldata _order, bytes calldata _sig) private view {\n        require(\n            orderFulfilledAmount[_sig] <= _order.totalAmount,\n            \"AnbotoExecV2::checkOrderTotal: Order total exceeded.\"\n        );\n    }\n\n    /**\n     * @dev Checks that output amount is not too low.\n     * @param _order Order made by maker.\n     * @param _soldAmount Amount of tokens sold in trade.\n     * @param _boughtAmount Amount of tokens bought in trade.\n     */\n    function checkOutputAmount(\n        Order calldata _order,\n        uint256 _soldAmount,\n        uint256 _boughtAmount\n    ) private pure {\n        require(\n            _boughtAmount * _order.totalAmount >= _order.outMin * _soldAmount,\n            \"AnbotoExecV2::checkOutputAmount: Output amount too low.\"\n        );\n    }\n}\n"
    }
  }
}}