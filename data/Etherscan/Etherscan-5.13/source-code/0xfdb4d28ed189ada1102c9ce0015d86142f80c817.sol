{"bitcoinFaucet.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n\r\nimport \"./IERC20.sol\";\r\n\r\n\r\ncontract bitcoinFaucet {\r\n\r\n\r\n    uint256 decimalMultiplier = 100000000; //decimals 8\r\n    address private owner;\r\n    address public tokenAddress;\r\n    address public tokenOwner;\r\n    bool public faucetOpen = true;\r\n\r\n\r\n    uint256 public limitPerWallet = 50;\r\n    mapping(address =\u003e uint256) public claimedByAddress;\r\n   \r\nconstructor(address _tokenAddress, address _tokenOwner)  {\r\n        tokenAddress = _tokenAddress;\r\n        tokenOwner = _tokenOwner;\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\nfunction admin_open(bool _faucetOpen) public {\r\n        require(msg.sender == owner, \"Restricted operation\");\r\n        faucetOpen = _faucetOpen;\r\n    }\r\n\r\n\r\nfunction claim(\r\n    ) external {\r\n        require(faucetOpen, \"Faucet not open\");\r\n        require(claimedByAddress[msg.sender] == 0, \"Address already claimed\");\r\n        claimedByAddress[msg.sender] = 1;\r\n        require(IERC20(tokenAddress).transferFrom(tokenOwner, msg.sender, (limitPerWallet*decimalMultiplier)), \"transfer failed\");\r\n    }\r\nfunction checkAvailableBalance () external view returns (uint256){\r\n            return IERC20(tokenAddress).balanceOf(tokenOwner)/decimalMultiplier;\r\n}\r\n}\r\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"}}