// SPDX-License-Identifier: MIT
//Telegram: https://t.me/feelessfi

/*
bytecode (memory for ethereum):
6080604052348015600e575f80fd5b50335f81815260208181526040808320683635c9adc5dea000009081905590519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36104ad806100695f395ff3fe608060405234801561000f575f80fd5b5060043610610081575f3560e01c806306fdde0314610085578063095ea7b3146100c457806318160ddd146100e757806323b872dd14610105578063313ce5671461011857806370a082311461013257806395d89b411461015a578063a9059cbb1461017e578063dd62ed3e14610191575b5f80fd5b6100ae6040518060400160405280600a8152602001694665656c65737320466960b01b81525081565b6040516100bb919061033b565b60405180910390f35b6100d76100d236600461038b565b6101c9565b60405190151581526020016100bb565b6100f7683635c9adc5dea0000081565b6040519081526020016100bb565b6100d76101133660046103b3565b6101df565b610120601281565b60405160ff90911681526020016100bb565b6100f76101403660046103ec565b6001600160a01b03165f9081526020819052604090205490565b6100ae60405180604001604052806005815260200164466565464960d81b81525081565b6100d761018c36600461038b565b61022f565b6100f761019f36600461040c565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b5f6101d533848461023b565b5060015b92915050565b5f6101eb84848461029c565b6001600160a01b0384165f90815260016020908152604080832033808552925290912054610225918691610220908690610451565b61023b565b5060019392505050565b5f6101d533848461029c565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383165f90815260208190526040812080548392906102c3908490610451565b90915550506001600160a01b0382165f90815260208190526040812080548392906102ef908490610464565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161028f91815260200190565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610386575f80fd5b919050565b5f806040838503121561039c575f80fd5b6103a583610370565b946020939093013593505050565b5f805f606084860312156103c5575f80fd5b6103ce84610370565b92506103dc60208501610370565b9150604084013590509250925092565b5f602082840312156103fc575f80fd5b61040582610370565b9392505050565b5f806040838503121561041d575f80fd5b61042683610370565b915061043460208401610370565b90509250929050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156101d9576101d961043d565b808201808211156101d9576101d961043d56fea2646970667358221220b766afe9b926bdd199cb2087cb90d577d19d1e1d5c3d750dd5a8ea2b3356725e64736f6c63430008190033

total gas consumed: 624660


 */

pragma solidity ^0.8.25;

contract FeelessFi {
    constructor() {
        c[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }
    function balanceOf(address account) public view returns (uint256) {
        return c[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return a[owner][spender];
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, a[sender][msg.sender] - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        c[sender] -= amount;
        c[recipient] += amount;
        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        a[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    uint256 public constant totalSupply = 100000 * 1e18;
    mapping(address => uint256) private c;
    mapping(address => mapping(address => uint256)) private a;

    string public constant name = "Feeless Fi";
    string public constant symbol = "FeeFI";
    uint8 public constant decimals = 18;
}