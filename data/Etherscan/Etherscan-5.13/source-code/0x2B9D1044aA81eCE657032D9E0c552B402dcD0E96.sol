{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/aggregator/LibAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport {IMagpieRouterV2} from \"../interfaces/IMagpieRouterV2.sol\";\nimport {AppStorage, LibMagpieAggregator} from \"../libraries/LibMagpieAggregator.sol\";\nimport {LibAsset} from \"../libraries/LibAsset.sol\";\nimport {LibBytes} from \"../libraries/LibBytes.sol\";\nimport {LibSwap, SwapData} from \"../libraries/LibSwap.sol\";\nimport {DelegatedCallType, LibGuard} from \"../libraries/LibGuard.sol\";\nimport {TransferKey} from \"../libraries/LibTransferKey.sol\";\nimport {LibUint256Array} from \"../libraries/LibUint256Array.sol\";\nimport {BridgeArgs, BridgeInArgs, BridgeOutArgs, RefundArgs} from \"../bridge/LibCommon.sol\";\nimport {LibTransaction, Transaction, TransactionValidation} from \"../bridge/LibTransaction.sol\";\nimport {DataTransferInArgs, DataTransferInProtocol, DataTransferOutArgs} from \"../data-transfer/LibCommon.sol\";\n\nstruct SwapInArgs {\n    bytes swapArgs;\n    BridgeArgs bridgeArgs;\n    DataTransferInProtocol dataTransferInProtocol;\n    TransactionValidation transactionValidation;\n}\n\nstruct SwapOutArgs {\n    bytes swapArgs;\n    BridgeArgs bridgeArgs;\n    DataTransferOutArgs dataTransferOutArgs;\n}\n\nstruct SwapOutVariables {\n    address fromAssetAddress;\n    address toAssetAddress;\n    address toAddress;\n    address transactionToAddress;\n    uint256 bridgeAmount;\n    uint256 amountIn;\n}\n\nerror AggregatorDepositIsZero();\nerror AggregatorInvalidAmountIn();\nerror AggregatorInvalidAmountOutMin();\nerror AggregatorInvalidFromAssetAddress();\nerror AggregatorInvalidMagpieAggregatorAddress();\nerror AggregatorInvalidToAddress();\nerror AggregatorInvalidToAssetAddress();\nerror AggregatorInvalidTransferKey();\nerror AggregatorBridgeInCallFailed();\nerror AggregatorBridgeOutCallFailed();\nerror AggregatorDataTransferInCallFailed();\nerror AggregatorDataTransferOutCallFailed();\n\nlibrary LibAggregator {\n    using LibAsset for address;\n    using LibBytes for bytes;\n    using LibUint256Array for uint256[];\n\n    uint16 constant SWAP_IN_SWAP_ARGS_OFFSET = 324;\n    uint16 constant SWAP_OUT_SWAP_ARGS_OFFSET = 164;\n\n    event UpdateWeth(address indexed sender, address weth);\n\n    /// @dev Allows the contract owner to update the address of the WETH token used in the aggregator contract.\n    /// @param weth Address of the Wrapped Ether (WETH) contract.\n    function updateWeth(address weth) internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        s.weth = weth;\n\n        emit UpdateWeth(msg.sender, weth);\n    }\n\n    event UpdateMagpieRouterAddress(address indexed sender, address weth);\n\n    /// @dev Allows the owner to update the magpieRouterAddress variable in the storage.\n    /// @param magpieRouterAddress The address of the magpie router.\n    function updateMagpieRouterAddress(address magpieRouterAddress) internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        s.magpieRouterAddress = magpieRouterAddress;\n\n        emit UpdateMagpieRouterAddress(msg.sender, magpieRouterAddress);\n    }\n\n    event UpdateNetworkId(address indexed sender, uint16 networkId);\n\n    /// @dev See {IAggregator-updateNetworkId}\n    function updateNetworkId(uint16 networkId) internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        s.networkId = networkId;\n\n        emit UpdateNetworkId(msg.sender, networkId);\n    }\n\n    event AddMagpieAggregatorAddresses(\n        address indexed sender,\n        uint16[] networkIds,\n        bytes32[] magpieAggregatorAddresses\n    );\n\n    /// @dev See {IAggregator-addMagpieAggregatorAddresses}\n    function addMagpieAggregatorAddresses(\n        uint16[] memory networkIds,\n        bytes32[] memory magpieAggregatorAddresses\n    ) internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        uint256 i;\n        uint256 l = magpieAggregatorAddresses.length;\n        for (i = 0; i < l; ) {\n            s.magpieAggregatorAddresses[networkIds[i]] = magpieAggregatorAddresses[i];\n\n            unchecked {\n                i++;\n            }\n        }\n\n        emit AddMagpieAggregatorAddresses(msg.sender, networkIds, magpieAggregatorAddresses);\n    }\n\n    /// @dev The wrapSwap function conducts a token swap operation, handling both direct transfers and swaps via Magpie Router.\n    function wrapSwap(\n        bytes memory swapArgs,\n        SwapData memory swapData,\n        address transferFromAddress\n    ) private returns (uint256 amountOut) {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        if (\n            swapData.fromAssetAddress == swapData.toAssetAddress ||\n            (swapData.fromAssetAddress.isNative() && swapData.toAssetAddress == s.weth) ||\n            (swapData.toAssetAddress.isNative() && swapData.fromAssetAddress == s.weth)\n        ) {\n            // Swap is not needed\n            if (!swapData.fromAssetAddress.isNative()) {\n                if (transferFromAddress != address(this)) {\n                    swapData.fromAssetAddress.transferFrom(transferFromAddress, address(this), swapData.amountIn);\n                }\n            } else if (!swapData.toAssetAddress.isNative()) {\n                swapData.fromAssetAddress.deposit(s.weth, swapData.amountIn);\n            }\n\n            amountOut = swapData.amountIn;\n\n            if (transferFromAddress == address(this)) {\n                swapData.toAssetAddress.withdraw(s.weth, swapData.toAddress, amountOut);\n            }\n        } else {\n            uint256 amountIn = swapData.amountIn;\n            // Swap is needed\n            if (!swapData.fromAssetAddress.isNative()) {\n                if (transferFromAddress != address(this)) {\n                    swapData.fromAssetAddress.transferFrom(transferFromAddress, address(this), swapData.amountIn);\n                }\n                swapData.fromAssetAddress.approve(s.magpieRouterAddress, swapData.amountIn);\n                amountIn = 0;\n            }\n            amountOut = IMagpieRouterV2(s.magpieRouterAddress).silentSwap{value: amountIn}(swapArgs);\n        }\n    }\n\n    event SwapIn(\n        address indexed fromAddress,\n        bytes32 indexed toAddress,\n        address fromAssetAddress,\n        address toAssetAddress,\n        uint256 amountIn,\n        uint256 amountOut,\n        TransferKey transferKey,\n        Transaction transaction\n    );\n\n    /// @dev See {IAggregator-swapIn}\n    function swapIn(SwapInArgs memory swapInArgs) internal returns (uint256 amountOut) {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n        SwapData memory swapData = LibSwap.getData(SWAP_IN_SWAP_ARGS_OFFSET);\n\n        if (swapData.toAddress != address(this)) {\n            revert AggregatorInvalidToAddress();\n        }\n\n        amountOut = wrapSwap(swapInArgs.swapArgs, swapData, msg.sender);\n\n        s.swapSequence += 1;\n        TransferKey memory transferKey = TransferKey({\n            networkId: s.networkId,\n            senderAddress: bytes32(uint256(uint160(address(this)))),\n            swapSequence: s.swapSequence\n        });\n\n        bridgeIn(\n            BridgeInArgs({\n                recipientNetworkId: swapInArgs.dataTransferInProtocol.networkId,\n                bridgeArgs: swapInArgs.bridgeArgs,\n                amount: amountOut,\n                toAssetAddress: swapData.toAssetAddress,\n                transferKey: transferKey\n            })\n        );\n\n        Transaction memory transaction = Transaction({\n            dataTransferType: swapInArgs.dataTransferInProtocol.dataTransferType,\n            bridgeType: swapInArgs.bridgeArgs.bridgeType,\n            recipientNetworkId: swapInArgs.dataTransferInProtocol.networkId,\n            fromAssetAddress: swapInArgs.transactionValidation.fromAssetAddress,\n            toAssetAddress: swapInArgs.transactionValidation.toAssetAddress,\n            toAddress: swapInArgs.transactionValidation.toAddress,\n            recipientAggregatorAddress: s.magpieAggregatorAddresses[swapInArgs.dataTransferInProtocol.networkId],\n            amountOutMin: swapInArgs.transactionValidation.amountOutMin,\n            swapOutGasFee: swapInArgs.transactionValidation.swapOutGasFee\n        });\n\n        dataTransferIn(\n            DataTransferInArgs({\n                protocol: swapInArgs.dataTransferInProtocol,\n                transferKey: transferKey,\n                payload: LibTransaction.encode(transaction)\n            })\n        );\n\n        emit SwapIn(\n            msg.sender,\n            transaction.toAddress,\n            swapData.fromAssetAddress,\n            swapData.toAssetAddress,\n            swapData.amountIn,\n            amountOut,\n            transferKey,\n            transaction\n        );\n    }\n\n    event SwapOut(\n        address indexed fromAddress,\n        address indexed toAddress,\n        address fromAssetAddress,\n        address toAssetAddress,\n        uint256 amountIn,\n        uint256 amountOut,\n        TransferKey transferKey,\n        Transaction transaction\n    );\n\n    /// @dev See {IAggregator-swapOut}\n    function swapOut(SwapOutArgs memory swapOutArgs) internal returns (uint256 amountOut) {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n        bytes memory swapArgs = swapOutArgs.swapArgs;\n        SwapData memory swapData = LibSwap.getData(SWAP_OUT_SWAP_ARGS_OFFSET);\n\n        (TransferKey memory transferKey, bytes memory payload) = dataTransferOut(swapOutArgs.dataTransferOutArgs);\n\n        if (s.usedTransferKeys[transferKey.networkId][transferKey.senderAddress][transferKey.swapSequence]) {\n            revert AggregatorInvalidTransferKey();\n        }\n\n        s.usedTransferKeys[transferKey.networkId][transferKey.senderAddress][transferKey.swapSequence] = true;\n\n        Transaction memory transaction = LibTransaction.decode(payload);\n\n        SwapOutVariables memory v = SwapOutVariables({\n            bridgeAmount: bridgeOut(\n                BridgeOutArgs({bridgeArgs: swapOutArgs.bridgeArgs, transaction: transaction, transferKey: transferKey})\n            ),\n            amountIn: swapData.amountIn,\n            toAddress: swapData.toAddress,\n            transactionToAddress: address(uint160(uint256(transaction.toAddress))),\n            fromAssetAddress: swapData.fromAssetAddress,\n            toAssetAddress: swapData.toAssetAddress\n        });\n\n        if (v.transactionToAddress == msg.sender) {\n            transaction.swapOutGasFee = 0;\n            transaction.amountOutMin = swapData.amountOutMin;\n        } else {\n            swapData.amountOutMin = transaction.amountOutMin;\n        }\n\n        if (address(uint160(uint256(transaction.fromAssetAddress))) != v.fromAssetAddress) {\n            revert AggregatorInvalidFromAssetAddress();\n        }\n\n        if (msg.sender != v.transactionToAddress) {\n            if (address(uint160(uint256(transaction.toAssetAddress))) != v.toAssetAddress) {\n                revert AggregatorInvalidToAssetAddress();\n            }\n        }\n\n        if (v.transactionToAddress != v.toAddress || v.transactionToAddress == address(this)) {\n            revert AggregatorInvalidToAddress();\n        }\n\n        if (address(uint160(uint256(transaction.recipientAggregatorAddress))) != address(this)) {\n            revert AggregatorInvalidMagpieAggregatorAddress();\n        }\n\n        if (swapData.amountOutMin < transaction.amountOutMin) {\n            revert AggregatorInvalidAmountOutMin();\n        }\n\n        uint256 firstAmountIn = LibSwap.getFirstAmountIn(SWAP_OUT_SWAP_ARGS_OFFSET);\n        if (firstAmountIn <= transaction.swapOutGasFee) {\n            revert AggregatorInvalidAmountIn();\n        }\n\n        if (v.amountIn > v.bridgeAmount) {\n            revert AggregatorInvalidAmountIn();\n        }\n\n        v.amountIn -= firstAmountIn;\n\n        firstAmountIn += (v.bridgeAmount > v.amountIn ? v.bridgeAmount - v.amountIn : 0) - transaction.swapOutGasFee;\n\n        assembly {\n            mstore(add(swapArgs, 36), firstAmountIn)\n            mstore(add(swapArgs, 162), mload(add(swapData, 320))) // Override amountOutMin\n        }\n\n        v.amountIn += firstAmountIn;\n\n        if (transaction.swapOutGasFee > 0) {\n            s.deposits[v.fromAssetAddress] += transaction.swapOutGasFee;\n            s.depositsByUser[v.fromAssetAddress][msg.sender] += transaction.swapOutGasFee;\n        }\n\n        amountOut = wrapSwap(swapArgs, swapData, address(this));\n\n        emit SwapOut(\n            msg.sender,\n            v.toAddress,\n            v.fromAssetAddress,\n            v.toAssetAddress,\n            v.amountIn,\n            amountOut,\n            transferKey,\n            transaction\n        );\n    }\n\n    event Withdraw(address indexed sender, address indexed assetAddress, uint256 amount);\n\n    /// @dev See {IAggregator-withdraw}\n    function withdraw(address assetAddress) internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        if (assetAddress.isNative()) {\n            assetAddress = s.weth;\n        }\n\n        uint256 deposit = s.depositsByUser[assetAddress][msg.sender];\n\n        if (deposit == 0) {\n            revert AggregatorDepositIsZero();\n        }\n\n        s.deposits[assetAddress] -= deposit;\n        s.depositsByUser[assetAddress][msg.sender] = 0;\n\n        assetAddress.transfer(msg.sender, deposit);\n\n        emit Withdraw(msg.sender, assetAddress, deposit);\n    }\n\n    /// @dev See {IAggregator-getDeposit}\n    function getDeposit(address assetAddress) internal view returns (uint256) {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        return s.deposits[assetAddress];\n    }\n\n    /// @dev See {IAggregator-getDepositByUser}\n    function getDepositByUser(address assetAddress, address senderAddress) internal view returns (uint256) {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        return s.depositsByUser[assetAddress][senderAddress];\n    }\n\n    /// @dev See {IAggregator-isTransferKeyUsed}\n    function isTransferKeyUsed(\n        uint16 networkId,\n        bytes32 senderAddress,\n        uint64 swapSequence\n    ) internal view returns (bool) {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n        return s.usedTransferKeys[networkId][senderAddress][swapSequence];\n    }\n\n    /// @dev See {IBridge-bridgeIn}\n    function bridgeIn(BridgeInArgs memory bridgeInArgs) internal {\n        LibGuard.enforceDelegatedCallPreGuard(DelegatedCallType.BridgeIn);\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        bytes4 selector = hex\"2312b1a3\";\n        address facet = ds.selectorToFacetAndPosition[selector].facetAddress;\n        bytes memory bridgeInCall = abi.encodeWithSelector(selector, bridgeInArgs);\n        (bool success, ) = address(facet).delegatecall(bridgeInCall);\n        if (!success) {\n            revert AggregatorBridgeInCallFailed();\n        }\n        LibGuard.enforceDelegatedCallPostGuard(DelegatedCallType.BridgeIn);\n    }\n\n    /// @dev See {IBridge-bridgeOut}\n    function bridgeOut(BridgeOutArgs memory bridgeOutArgs) internal returns (uint256) {\n        LibGuard.enforceDelegatedCallPreGuard(DelegatedCallType.BridgeOut);\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        bytes4 selector = hex\"c6687b9d\";\n        address facet = ds.selectorToFacetAndPosition[selector].facetAddress;\n        bytes memory bridgeOutCall = abi.encodeWithSelector(selector, bridgeOutArgs);\n        (bool success, bytes memory data) = address(facet).delegatecall(bridgeOutCall);\n        if (!success) {\n            revert AggregatorBridgeOutCallFailed();\n        }\n        LibGuard.enforceDelegatedCallPostGuard(DelegatedCallType.BridgeOut);\n\n        return abi.decode(data, (uint256));\n    }\n\n    /// @dev See {IDataTransfer-dataTransferIn}\n    function dataTransferIn(DataTransferInArgs memory dataTransferInArgs) internal {\n        LibGuard.enforceDelegatedCallPreGuard(DelegatedCallType.DataTransferIn);\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        bytes4 selector = hex\"7f2bf445\";\n        address facet = ds.selectorToFacetAndPosition[selector].facetAddress;\n        bytes memory dataTransferInCall = abi.encodeWithSelector(selector, dataTransferInArgs);\n        (bool success, ) = address(facet).delegatecall(dataTransferInCall);\n        if (!success) {\n            revert AggregatorDataTransferInCallFailed();\n        }\n        LibGuard.enforceDelegatedCallPostGuard(DelegatedCallType.DataTransferIn);\n    }\n\n    /// @dev See {IDataTransfer-dataTransferOut}\n    function dataTransferOut(\n        DataTransferOutArgs memory dataTransferOutArgs\n    ) internal returns (TransferKey memory, bytes memory) {\n        LibGuard.enforceDelegatedCallPreGuard(DelegatedCallType.DataTransferOut);\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\n        bytes4 selector = hex\"83d5b76e\";\n        address facet = ds.selectorToFacetAndPosition[selector].facetAddress;\n        bytes memory dataTransferOutCall = abi.encodeWithSelector(selector, dataTransferOutArgs);\n        (bool success, bytes memory data) = address(facet).delegatecall(dataTransferOutCall);\n        if (!success) {\n            revert AggregatorDataTransferOutCallFailed();\n        }\n        LibGuard.enforceDelegatedCallPostGuard(DelegatedCallType.DataTransferOut);\n\n        return abi.decode(data, (TransferKey, bytes));\n    }\n}\n"
    },
    "contracts/aggregator/facets/AggregatorFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {LibDiamond} from \"hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol\";\nimport {LibGuard} from \"../../libraries/LibGuard.sol\";\nimport {AppStorage} from \"../../libraries/LibMagpieAggregator.sol\";\nimport {LibPauser} from \"../../pauser/LibPauser.sol\";\nimport {IAggregator} from \"../interfaces/IAggregator.sol\";\nimport {LibAggregator, SwapInArgs, SwapOutArgs} from \"../LibAggregator.sol\";\n\ncontract AggregatorFacet is IAggregator {\n    AppStorage internal s;\n\n    /// @dev See {IAggregator-updateWeth}\n    function updateWeth(address weth) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibAggregator.updateWeth(weth);\n    }\n\n    /// @dev See {IAggregator-updateMagpieRouterAddress}\n    function updateMagpieRouterAddress(address magpieRouterAddress) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibAggregator.updateMagpieRouterAddress(magpieRouterAddress);\n    }\n\n    /// @dev See {IAggregator-updateNetworkId}\n    function updateNetworkId(uint16 networkId) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibAggregator.updateNetworkId(networkId);\n    }\n\n    /// @dev See {IAggregator-addMagpieAggregatorAddresses}\n    function addMagpieAggregatorAddresses(\n        uint16[] calldata networkIds,\n        bytes32[] calldata magpieAggregatorAddresses\n    ) external override {\n        LibDiamond.enforceIsContractOwner();\n        LibAggregator.addMagpieAggregatorAddresses(networkIds, magpieAggregatorAddresses);\n    }\n\n    /// @dev See {IAggregator-swapIn}\n    function swapIn(SwapInArgs calldata swapInArgs) external payable override returns (uint256 amountOut) {\n        LibPauser.enforceIsNotPaused();\n        LibGuard.enforcePreGuard();\n        amountOut = LibAggregator.swapIn(swapInArgs);\n        LibGuard.enforcePostGuard();\n    }\n\n    /// @dev See {IAggregator-swapOut}\n    function swapOut(SwapOutArgs calldata swapOutArgs) external override returns (uint256 amountOut) {\n        LibPauser.enforceIsNotPaused();\n        LibGuard.enforcePreGuard();\n        amountOut = LibAggregator.swapOut(swapOutArgs);\n        LibGuard.enforcePostGuard();\n    }\n\n    /// @dev See {IAggregator-withdraw}\n    function withdraw(address assetAddress) external override {\n        LibPauser.enforceIsNotPaused();\n        LibAggregator.withdraw(assetAddress);\n    }\n\n    /// @dev See {IAggregator-getDeposit}\n    function getDeposit(address assetAddress) external view override returns (uint256) {\n        return LibAggregator.getDeposit(assetAddress);\n    }\n\n    /// @dev See {IAggregator-getDepositByUser}\n    function getDepositByUser(address assetAddress, address senderAddress) external view override returns (uint256) {\n        return LibAggregator.getDepositByUser(assetAddress, senderAddress);\n    }\n\n    /// @dev See {IAggregator-isTransferKeyUsed}\n    function isTransferKeyUsed(\n        uint16 networkId,\n        bytes32 senderAddress,\n        uint64 swapSequence\n    ) external view override returns (bool) {\n        return LibAggregator.isTransferKeyUsed(networkId, senderAddress, swapSequence);\n    }\n}\n"
    },
    "contracts/aggregator/interfaces/IAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {DataTransferType} from \"../../data-transfer/LibCommon.sol\";\nimport {TransferKey} from \"../../libraries/LibTransferKey.sol\";\nimport {Transaction} from \"../../bridge/LibTransaction.sol\";\nimport {SwapInArgs, SwapOutArgs} from \"../LibAggregator.sol\";\n\ninterface IAggregator {\n    event UpdateWeth(address indexed sender, address weth);\n\n    /// @dev Allows the contract owner to update the address of wrapped native token.\n    /// @param weth Address of the wrapped native token.\n    function updateWeth(address weth) external;\n\n    event UpdateNetworkId(address indexed sender, uint16 networkId);\n\n    /// @dev Allows the contract owner to update the network id in the storage.\n    /// @param networkId Magpie network id associated with the chain.\n    function updateNetworkId(uint16 networkId) external;\n\n    event AddMagpieAggregatorAddresses(\n        address indexed sender,\n        uint16[] networkIds,\n        bytes32[] magpieAggregatorAddresses\n    );\n\n    /// @dev Allows the contract owner to add Magpie Aggregator addresses for multiple network ids.\n    /// @param networkIds Magpie network id associated with the chain.\n    /// @param magpieAggregatorAddresses The Magpie Aggregator diamond contract addresses for the related network ids.\n    function addMagpieAggregatorAddresses(\n        uint16[] calldata networkIds,\n        bytes32[] calldata magpieAggregatorAddresses\n    ) external;\n\n    event SwapIn(\n        address indexed fromAddress,\n        bytes32 indexed toAddress,\n        address fromAssetAddress,\n        address toAssetAddress,\n        uint256 amountIn,\n        uint256 amountOut,\n        TransferKey transferKey,\n        Transaction transaction\n    );\n\n    /// @dev This function allows for swapping assets into the contract using a bridge-in transaction.\n    /// @param swapInArgs Arguments that are required for swapOut.\n    /// @return amountOut The amount received after swapping.\n    function swapIn(SwapInArgs calldata swapInArgs) external payable returns (uint256 amountOut);\n\n    event SwapOut(\n        address indexed fromAddress,\n        address indexed toAddress,\n        address fromAssetAddress,\n        address toAssetAddress,\n        uint256 amountIn,\n        uint256 amountOut,\n        TransferKey transferKey,\n        Transaction transaction\n    );\n\n    /// @dev Withdraws the assets from the specified bridge and swaps them out to the specified address.\n    /// @param swapOutArgs Arguments that are required for swapOut.\n    /// @return amountOut The amount received after swapping.\n    function swapOut(SwapOutArgs calldata swapOutArgs) external returns (uint256 amountOut);\n\n    event Withdraw(address indexed sender, address indexed assetAddress, uint256 amount);\n\n    /// @dev Withdraw assets that were collected to cover crosschain swap cost.\n    /// @param assetAddress Address of the asset that will be withdrawn.\n    function withdraw(address assetAddress) external;\n\n    /// @dev Retrieve the deposit amount for a specific asset in the aggregator contract.\n    /// @param assetAddress Address of the asset that will be deposited.\n    function getDeposit(address assetAddress) external view returns (uint256);\n\n    /// @dev Retrieve the deposit amount for a specific asset deposited by a specific user.\n    /// @param assetAddress Address of the asset that was deposited\n    /// @param senderAddress Address of the user who has deposited the asset\n    function getDepositByUser(address assetAddress, address senderAddress) external view returns (uint256);\n\n    /// @dev Check if a specific transfer key has been used for a crosschain swap.\n    /// @param networkId Magpie network id associated with the chain.\n    /// @param senderAddress The address  of the origin contract.\n    /// @param swapSequence The magpie sequence for the current swap. Each swap gets a new a new sequence\n    function isTransferKeyUsed(\n        uint16 networkId,\n        bytes32 senderAddress,\n        uint64 swapSequence\n    ) external view returns (bool);\n\n    event UpdateMagpieRouterAddress(address indexed sender, address magpieRouterAddress);\n\n    /// @dev Allows the contract owner to update the Magpie Router address.\n    /// @param magpieRouterAddress The address of the Magpie Router.\n    function updateMagpieRouterAddress(address magpieRouterAddress) external;\n}\n"
    },
    "contracts/bridge/LibCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {LibBytes} from \"../libraries/LibBytes.sol\";\nimport {TransferKey} from \"../libraries/LibTransferKey.sol\";\nimport {Transaction} from \"./LibTransaction.sol\";\n\nenum BridgeType {\n    Wormhole,\n    Stargate,\n    Celer\n}\n\nstruct BridgeArgs {\n    BridgeType bridgeType;\n    bytes payload;\n}\n\nstruct BridgeInArgs {\n    uint16 recipientNetworkId;\n    BridgeArgs bridgeArgs;\n    uint256 amount;\n    address toAssetAddress;\n    TransferKey transferKey;\n}\n\nstruct BridgeOutArgs {\n    BridgeArgs bridgeArgs;\n    Transaction transaction;\n    TransferKey transferKey;\n}\n\nstruct RefundArgs {\n    uint16 recipientNetworkId;\n    uint256 amount;\n    address toAssetAddress;\n    TransferKey transferKey;\n    BridgeArgs bridgeArgs;\n    bytes payload;\n}\n"
    },
    "contracts/bridge/LibTransaction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {BridgeType} from \"../bridge/LibCommon.sol\";\nimport {DataTransferType} from \"../data-transfer/LibCommon.sol\";\n\nstruct TransactionValidation {\n    bytes32 fromAssetAddress;\n    bytes32 toAssetAddress;\n    bytes32 toAddress;\n    uint256 amountOutMin;\n    uint256 swapOutGasFee;\n}\n\nstruct Transaction {\n    DataTransferType dataTransferType;\n    BridgeType bridgeType;\n    uint16 recipientNetworkId;\n    bytes32 fromAssetAddress;\n    bytes32 toAssetAddress;\n    bytes32 toAddress;\n    bytes32 recipientAggregatorAddress;\n    uint256 amountOutMin;\n    uint256 swapOutGasFee;\n}\n\nlibrary LibTransaction {\n    /// @dev Encodes Transaction and converts it into a bytes.\n    /// @param transaction Transaction thas will be encoded.\n    /// @return transactionPayload Encoded transaction data.\n    function encode(Transaction memory transaction) internal pure returns (bytes memory transactionPayload) {\n        transactionPayload = new bytes(204);\n\n        assembly {\n            mstore(add(transactionPayload, 32), shl(248, mload(transaction))) // dataTransferType\n            mstore(add(transactionPayload, 33), shl(248, mload(add(transaction, 32)))) // bridgeType\n            mstore(add(transactionPayload, 34), shl(240, mload(add(transaction, 64)))) // recipientNetworkId\n            mstore(add(transactionPayload, 36), mload(add(transaction, 96))) // fromAssetAddress\n            mstore(add(transactionPayload, 68), mload(add(transaction, 128))) // toAssetAddress\n            mstore(add(transactionPayload, 100), mload(add(transaction, 160))) // to\n            mstore(add(transactionPayload, 132), mload(add(transaction, 192))) // recipientAggregatorAddress\n            mstore(add(transactionPayload, 164), mload(add(transaction, 224))) // amountOutMin\n            mstore(add(transactionPayload, 196), mload(add(transaction, 256))) // swapOutGasFee\n        }\n    }\n\n    /// @dev Decodes transactionPayload and converts it to Transaction.\n    /// @param transactionPayload Encoded transaction data.\n    /// @return transaction Decoded transactionPayload.\n    function decode(bytes memory transactionPayload) internal pure returns (Transaction memory transaction) {\n        assembly {\n            mstore(transaction, shr(248, mload(add(transactionPayload, 32)))) // dataTransferType\n            mstore(add(transaction, 32), shr(248, mload(add(transactionPayload, 33)))) // bridgeType\n            mstore(add(transaction, 64), shr(240, mload(add(transactionPayload, 34)))) // recipientNetworkId\n            mstore(add(transaction, 96), mload(add(transactionPayload, 36))) // fromAssetAddress\n            mstore(add(transaction, 128), mload(add(transactionPayload, 68))) // toAssetAddress\n            mstore(add(transaction, 160), mload(add(transactionPayload, 100))) // to\n            mstore(add(transaction, 192), mload(add(transactionPayload, 132))) // recipientAggregatorAddress\n            mstore(add(transaction, 224), mload(add(transactionPayload, 164))) // amountOutMin\n            mstore(add(transaction, 256), mload(add(transactionPayload, 196))) // swapOutGasFee\n        }\n    }\n}\n"
    },
    "contracts/data-transfer/LibCommon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {TransferKey} from \"../libraries/LibTransferKey.sol\";\n\nenum DataTransferType {\n    Wormhole,\n    LayerZero\n}\n\nstruct DataTransferInProtocol {\n    uint16 networkId;\n    DataTransferType dataTransferType;\n    bytes payload;\n}\n\nstruct DataTransferInArgs {\n    DataTransferInProtocol protocol;\n    TransferKey transferKey;\n    bytes payload;\n}\n\nstruct DataTransferOutArgs {\n    DataTransferType dataTransferType;\n    bytes payload;\n}\n"
    },
    "contracts/interfaces/IMagpieRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\ninterface IMagpieRouterV2 {\n    /// @dev Allows the owner to update the mapping of command types to function selectors.\n    /// @param commandId Identifier for each command. We have one selector / command.\n    /// @param selector The function selector for each of these commands.\n    function updateSelector(uint16 commandId, bytes4 selector) external;\n\n    event Swap(\n        address indexed fromAddress,\n        address indexed toAddress,\n        address fromAssetAddress,\n        address toAssetAddress,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /// @dev Provides an external interface to estimate the gas cost of the last hop in a route.\n    /// @return amountOut The amount received after swapping.\n    /// @return gasUsed The cost of gas while performing the swap.\n    function estimateSwapGas(bytes calldata swapArgs) external payable returns (uint256 amountOut, uint256 gasUsed);\n\n    /// @dev Performs token swap.\n    /// @return amountOut The amount received after swapping.\n    function swap(bytes calldata swapArgs) external payable returns (uint256 amountOut);\n\n    /// @dev Performs token swap without triggering event.\n    /// @return amountOut The amount received after swapping.\n    function silentSwap(bytes calldata swapArgs) external payable returns (uint256 amountOut);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/libraries/LibAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\nimport \"../interfaces/IWETH.sol\";\n\nerror AssetNotReceived();\nerror ApprovalFailed();\nerror TransferFromFailed();\nerror TransferFailed();\n\nlibrary LibAsset {\n    using LibAsset for address;\n\n    address constant NATIVE_ASSETID = address(0);\n\n    /// @dev Checks if the given address (self) represents a native asset (Ether).\n    /// @param self The asset that will be checked for a native token.\n    /// @return Flag to identify if the asset is native or not.\n    function isNative(address self) internal pure returns (bool) {\n        return self == NATIVE_ASSETID;\n    }\n\n    /// @dev Retrieves the balance of the current contract for a given asset (self).\n    /// @param self Asset whose balance needs to be found.\n    /// @return Balance of the specific asset.\n    function getBalance(address self) internal view returns (uint256) {\n        return self.isNative() ? address(this).balance : IERC20(self).balanceOf(address(this));\n    }\n\n    /// @dev Retrieves the balance of the target address for a given asset (self).\n    /// @param self Asset whose balance needs to be found.\n    /// @param targetAddress The address where the balance is checked from.\n    /// @return Balance of the specific asset.\n    function getBalanceOf(address self, address targetAddress) internal view returns (uint256) {\n        return self.isNative() ? targetAddress.balance : IERC20(self).balanceOf(targetAddress);\n    }\n\n    /// @dev Performs a safe transferFrom operation for a given asset (self) from one address (from) to another address (to).\n    /// @param self Asset that will be transferred.\n    /// @param from Address that will send the asset.\n    /// @param to Address that will receive the asset.\n    /// @param amount Transferred amount.\n    function transferFrom(address self, address from, address to, uint256 amount) internal {\n        IERC20 token = IERC20(self);\n\n        bool success = execute(self, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\n\n        if (!success) revert TransferFromFailed();\n    }\n\n    /// @dev Transfers a given amount of an asset (self) to a recipient address (recipient).\n    /// @param self Asset that will be transferred.\n    /// @param recipient Address that will receive the transferred asset.\n    /// @param amount Transferred amount.\n    function transfer(address self, address recipient, uint256 amount) internal {\n        IERC20 token = IERC20(self);\n        bool success;\n\n        if (self.isNative()) {\n            (success, ) = payable(recipient).call{value: amount}(\"\");\n        } else {\n            success = execute(self, abi.encodeWithSelector(token.transfer.selector, recipient, amount));\n        }\n\n        if (!success) {\n            revert TransferFailed();\n        }\n    }\n\n    /// @dev Approves a spender address (spender) to spend a specified amount of an asset (self).\n    /// @param self The asset that will be approved.\n    /// @param spender Address of a contract that will spend the owners asset.\n    /// @param amount Asset amount that can be spent.\n    function approve(address self, address spender, uint256 amount) internal {\n        IERC20 token = IERC20(self);\n\n        if (!execute(self, abi.encodeWithSelector(token.approve.selector, spender, amount))) {\n            if (\n                !execute(self, abi.encodeWithSelector(token.approve.selector, spender, 0)) ||\n                !(execute(self, abi.encodeWithSelector(token.approve.selector, spender, amount)))\n            ) {\n                revert ApprovalFailed();\n            }\n        }\n    }\n\n    /// @dev Determines if a call was successful.\n    /// @param target Address of the target contract.\n    /// @param success To check if the call to the contract was successful or not.\n    /// @param data The data was sent while calling the target contract.\n    /// @return result The success of the call.\n    function isSuccessful(address target, bool success, bytes memory data) private view returns (bool result) {\n        if (success) {\n            if (data.length == 0) {\n                // isContract\n                if (target.code.length > 0) {\n                    result = true;\n                }\n            } else {\n                assembly {\n                    result := mload(add(data, 32))\n                }\n            }\n        }\n    }\n\n    /// @dev Executes a low level call.\n    /// @param self The address of the contract to which the call is being made.\n    /// @param params The parameters or data to be sent in the call.\n    /// @return result The success of the call.\n    function execute(address self, bytes memory params) private returns (bool) {\n        (bool success, bytes memory data) = self.call(params);\n\n        return isSuccessful(self, success, data);\n    }\n\n    /// @dev Deposit of a specified amount of an asset (self).\n    /// @param self Address of the asset that will be deposited.\n    /// @param weth Address of the Wrapped Ether (WETH) contract.\n    /// @param amount Amount that needs to be deposited.\n    function deposit(address self, address weth, uint256 amount) internal {\n        if (self.isNative()) {\n            if (msg.value < amount) {\n                revert AssetNotReceived();\n            }\n            IWETH(weth).deposit{value: amount}();\n        } else {\n            self.transferFrom(msg.sender, address(this), amount);\n        }\n    }\n\n    /// @dev Withdrawal of a specified amount of an asset (self) to a designated address (to).\n    /// @param self The asset that will be withdrawn.\n    /// @param weth Address of the Wrapped Ether (WETH) contract.\n    /// @param to Address that will receive withdrawn token.\n    /// @param amount Amount that needs to be withdrawn\n    function withdraw(address self, address weth, address to, uint256 amount) internal {\n        if (self.isNative()) {\n            IWETH(weth).withdraw(amount);\n        }\n        self.transfer(payable(to), amount);\n    }\n\n    /// @dev Retrieves the decimal precision of an ERC20 token.\n    /// @param self The asset address whose decimals we are retrieving.\n    /// @return tokenDecimals The decimals of the asset.\n    function getDecimals(address self) internal view returns (uint8 tokenDecimals) {\n        tokenDecimals = 18;\n\n        if (!self.isNative()) {\n            (, bytes memory queriedDecimals) = self.staticcall(abi.encodeWithSignature(\"decimals()\"));\n            tokenDecimals = abi.decode(queriedDecimals, (uint8));\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibBytes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nerror AddressOutOfBounds();\n\nlibrary LibBytes {\n    using LibBytes for bytes;\n\n    /// @dev Converts bytes into an address.\n    /// @param self The bytes that contains the address.\n    /// @param start The starting position to retrieve the address from the bytes.\n    /// @return tempAddress The retrieved address from the bytes.\n    function toAddress(bytes memory self, uint256 start) internal pure returns (address) {\n        if (self.length < start + 20) {\n            revert AddressOutOfBounds();\n        }\n        address tempAddress;\n\n        assembly {\n            tempAddress := mload(add(add(self, 20), start))\n        }\n\n        return tempAddress;\n    }\n\n    /// @dev Extracts a slice of bytes.\n    /// @param self The string of bytes that needs to be sliced.\n    /// @param start The starting position to begin slicing.\n    /// @param length The length of the byte.\n    /// @return tempBytes The sliced byte.\n    function slice(bytes memory self, uint256 start, uint256 length) internal pure returns (bytes memory) {\n        require(length + 31 >= length, \"slice_overflow\");\n        require(self.length >= start + length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(length)\n            case 0 {\n                tempBytes := mload(0x40)\n                let lengthmod := and(length, 31)\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(add(add(self, lengthmod), mul(0x20, iszero(lengthmod))), start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, length)\n\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            default {\n                tempBytes := mload(0x40)\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    /// @dev Merge two byte arrays.\n    /// @param self The bytes that needs to be merged.\n    /// @param postBytes The bytes that needs to be merged.\n    /// @return tempBytes The merged bytes.\n    function concat(bytes memory self, bytes memory postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            tempBytes := mload(0x40)\n\n            let length := mload(self)\n            mstore(tempBytes, length)\n\n            let mc := add(tempBytes, 0x20)\n            let end := add(mc, length)\n\n            for {\n                let cc := add(self, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            length := mload(postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            mc := end\n            end := add(mc, length)\n\n            for {\n                let cc := add(postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            mstore(0x40, and(add(add(end, iszero(add(length, mload(self)))), 31), not(31)))\n        }\n\n        return tempBytes;\n    }\n}\n"
    },
    "contracts/libraries/LibGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {AppStorage, LibMagpieAggregator} from \"../libraries/LibMagpieAggregator.sol\";\n\nerror ReentrantCall();\nerror InvalidDelegatedCall();\n\nenum DelegatedCallType {\n    BridgeIn,\n    BridgeOut,\n    DataTransferIn,\n    DataTransferOut\n}\n\nlibrary LibGuard {\n    /// @dev Checks if the guarded flag is set.\n    function enforcePreGuard() internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        if (s.guarded) {\n            revert ReentrantCall();\n        }\n\n        s.guarded = true;\n    }\n\n    /// @dev Sets the guarded flag to false.\n    function enforcePostGuard() internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        s.guarded = false;\n    }\n\n    /// @dev Reverts the transaction to prevent reentrancy. If no such call is in progress, it sets the delegated call state to true for that call type.\n    /// @param delegatedCallType The value of the call type.\n    function enforceDelegatedCallPreGuard(DelegatedCallType delegatedCallType) internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        if (s.delegatedCalls[uint8(delegatedCallType)]) {\n            revert ReentrantCall();\n        }\n\n        s.delegatedCalls[uint8(delegatedCallType)] = true;\n    }\n\n    /// @dev Accesses the contract storage to confirm whether a particular type of delegated call is currently in progress. If the expected call is not in progress, it reverts the transaction, indicating an invalid delegated call.\n    /// @param delegatedCallType The value of the call type.\n    function enforceDelegatedCallGuard(DelegatedCallType delegatedCallType) internal view {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        if (!s.delegatedCalls[uint8(delegatedCallType)]) {\n            revert InvalidDelegatedCall();\n        }\n    }\n\n    /// @dev Sets the delegated call state back to false for the specified type of delegated call.\n    /// @param delegatedCallType The value of the call type.\n    function enforceDelegatedCallPostGuard(DelegatedCallType delegatedCallType) internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        s.delegatedCalls[uint8(delegatedCallType)] = false;\n    }\n}\n"
    },
    "contracts/libraries/LibMagpieAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\n// Deprecated\nstruct CurveSettings {\n    address mainRegistry; // Address of the main registry of the curve protocol.\n    address cryptoRegistry; // Address of the crypto registry of the curve protocol\n    address cryptoFactory; // Address of the crypto factory of the crypto factory\n}\n\nstruct Amm {\n    uint8 protocolId; // The protocol identifier provided by magpie team.\n    bytes4 selector; // The function selector of the AMM.\n    address addr; // The address of the facet of the AMM.\n}\n\nstruct WormholeBridgeSettings {\n    address bridgeAddress; // The wormhole token bridge address\n}\n\nstruct StargateSettings {\n    address routerAddress; // The stargate router address.\n}\n\nstruct WormholeSettings {\n    address bridgeAddress; // The wormhole core bridge address.\n    uint8 consistencyLevel; // The level of finality the guardians will reach before signing the message\n}\n\nstruct LayerZeroSettings {\n    address routerAddress; // The router address of layer zero protocol\n}\n\nstruct CelerBridgeSettings {\n    address messageBusAddress; // The message bus address of celer bridge\n}\n\nstruct AppStorage {\n    address weth;\n    uint16 networkId;\n    mapping(uint16 => bytes32) magpieAggregatorAddresses;\n    mapping(address => uint256) deposits;\n    mapping(address => mapping(address => uint256)) depositsByUser;\n    mapping(uint16 => mapping(bytes32 => mapping(uint64 => bool))) usedTransferKeys;\n    uint64 swapSequence;\n    // Pausable\n    bool paused;\n    // Reentrancy Guard\n    bool guarded;\n    // Amm\n    mapping(uint16 => Amm) amms;\n    // Curve Amm\n    CurveSettings curveSettings;\n    // Data Transfer\n    mapping(uint16 => mapping(uint16 => mapping(bytes32 => mapping(uint64 => bytes)))) payloads;\n    // Stargate Bridge\n    StargateSettings stargateSettings;\n    mapping(uint16 => bytes32) magpieStargateBridgeAddresses;\n    // Wormhole Bridge\n    WormholeBridgeSettings wormholeBridgeSettings;\n    mapping(uint64 => uint64) wormholeTokenSequences;\n    // Wormhole Data Transfer\n    WormholeSettings wormholeSettings;\n    mapping(uint16 => uint16) wormholeNetworkIds;\n    mapping(uint64 => uint64) wormholeCoreSequences;\n    // LayerZero Data Transfer\n    LayerZeroSettings layerZeroSettings;\n    mapping(uint16 => uint16) layerZeroChainIds;\n    mapping(uint16 => uint16) layerZeroNetworkIds;\n    address magpieRouterAddress;\n    mapping(uint16 => mapping(bytes32 => mapping(uint64 => mapping(address => uint256)))) stargateDeposits;\n    mapping(uint8 => bool) delegatedCalls;\n    // Celer Bridge\n    CelerBridgeSettings celerBridgeSettings;\n    mapping(uint16 => uint64) celerChainIds;\n    mapping(uint16 => mapping(bytes32 => mapping(uint64 => mapping(address => uint256)))) celerDeposits;\n    mapping(uint16 => mapping(bytes32 => mapping(uint64 => address))) celerRefundAddresses;\n    mapping(uint16 => bytes32) magpieCelerBridgeAddresses;\n    mapping(uint16 => mapping(uint16 => mapping(bytes32 => mapping(uint64 => bytes32)))) payloadHashes;\n    mapping(uint16 => bytes32) magpieStargateBridgeV2Addresses;\n}\n\nlibrary LibMagpieAggregator {\n    function getStorage() internal pure returns (AppStorage storage s) {\n        assembly {\n            s.slot := 0\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {LibAsset} from \"../libraries/LibAsset.sol\";\n\nstruct SwapData {\n    uint16 amountsOffset; // Represents the offset for the amounts section in the transaction calldata\n    uint16 dataOffset; // Represents the offset for reusable data section in the calldata.\n    uint16 commandsOffset; // Represents the starting point of the commands section in the calldata.\n    uint16 commandsOffsetEnd; // Represents the end of the commands section in the calldata.\n    uint16 outputsLength; // Represents the length of all of the commands\n    uint256 amountIn; // Representing the amount of the asset being provided in the swap.\n    address toAddress; // This is the address to which the output of the swap (the swapped asset) will be sent.\n    address fromAssetAddress; // The address of the source asset being swapped from.\n    address toAssetAddress; // The address of the final asset being swapped to.\n    uint256 deadline; // Represents the deadline by which the swap must be completed.\n    uint256 amountOutMin; // The minimum amount of the output asset that must be received for the swap to be considered successful.\n}\n\nlibrary LibSwap {\n    using LibAsset for address;\n\n    uint16 constant SWAP_ARGS_OFFSET = 68;\n\n    /// @dev Extracts and sums up the amounts of the source asset.\n    /// @param startOffset Relative starting position.\n    /// @param endOffset Ending position.\n    /// @param positionOffset Absolute starting position.\n    /// @return amountIn Sum of amounts.\n    function getAmountIn(\n        uint16 startOffset,\n        uint16 endOffset,\n        uint16 positionOffset\n    ) internal pure returns (uint256 amountIn) {\n        for (uint16 i = startOffset; i < endOffset; ) {\n            uint256 currentAmountIn;\n            assembly {\n                let p := shr(240, calldataload(i))\n                currentAmountIn := calldataload(add(p, positionOffset))\n            }\n            amountIn += currentAmountIn;\n\n            unchecked {\n                i += 2;\n            }\n        }\n    }\n\n    /// @dev Extract the first amount.\n    /// @param swapArgsOffset Starting position of swapArgs in calldata.\n    /// @return amountIn First amount in.\n    function getFirstAmountIn(uint16 swapArgsOffset) internal pure returns (uint256 amountIn) {\n        uint16 position = swapArgsOffset + 4;\n        assembly {\n            amountIn := calldataload(position)\n        }\n    }\n\n    /// @dev Extracts SwapData from calldata.\n    /// @param swapArgsOffset Starting position of swapArgs in calldata.\n    /// @return swapData Essential data for the swap.\n    function getData(uint16 swapArgsOffset) internal pure returns (SwapData memory swapData) {\n        uint16 dataLength;\n        uint16 amountsLength;\n        uint16 dataOffset;\n        uint16 swapArgsLength;\n        assembly {\n            dataLength := shr(240, calldataload(swapArgsOffset))\n            amountsLength := shr(240, calldataload(add(swapArgsOffset, 2)))\n            swapArgsLength := calldataload(sub(swapArgsOffset, 32))\n        }\n        dataOffset = swapArgsOffset + 4;\n        swapData.dataOffset = dataOffset;\n        swapData.amountsOffset = swapData.dataOffset + dataLength;\n        swapData.commandsOffset = swapData.amountsOffset + amountsLength;\n        swapData.commandsOffsetEnd = swapArgsLength + swapArgsOffset;\n        // Depends on the context we have shift the position addSelector\n        // By default the position is adjusted to the router's offset\n        uint256 amountIn = getAmountIn(\n            swapData.amountsOffset,\n            swapData.commandsOffset,\n            swapArgsOffset - SWAP_ARGS_OFFSET\n        );\n\n        assembly {\n            mstore(add(swapData, 128), shr(240, calldataload(add(dataOffset, 32))))\n            mstore(add(swapData, 160), amountIn)\n            mstore(add(swapData, 192), shr(96, calldataload(add(dataOffset, 34))))\n            mstore(add(swapData, 224), shr(96, calldataload(add(dataOffset, 54))))\n            mstore(add(swapData, 256), shr(96, calldataload(add(dataOffset, 74))))\n            mstore(add(swapData, 288), calldataload(add(dataOffset, 94)))\n            mstore(add(swapData, 320), calldataload(add(dataOffset, 126)))\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibTransferKey.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nstruct TransferKey {\n    uint16 networkId; // Source network id that is defined by Magpie protocol for each chain\n    bytes32 senderAddress; // The sender address in bytes32\n    uint64 swapSequence; // Swap sequence (unique identifier) of the crosschain swap\n}\n\nerror InvalidTransferKey();\n\nlibrary LibTransferKey {\n    /// @dev Encodes transferKey.\n    /// @param transferKey Swap identifier generated for each crosschain swap.\n    /// @return payload Encoded transferKey.\n    function encode(TransferKey memory transferKey) internal pure returns (bytes memory) {\n        bytes memory payload = new bytes(42);\n\n        assembly {\n            mstore(add(payload, 32), shl(240, mload(transferKey)))\n            mstore(add(payload, 34), mload(add(transferKey, 32)))\n            mstore(add(payload, 66), shl(192, mload(add(transferKey, 64))))\n        }\n\n        return payload;\n    }\n\n    /// @dev Extracts transfer key from bytes.\n    /// @param payload Contains the transferKey struct in bytes.\n    /// @return transferKey Swap identifier generated for each crosschain swap.\n    function decode(bytes memory payload) internal pure returns (TransferKey memory transferKey) {\n        assembly {\n            mstore(transferKey, shr(240, mload(add(payload, 32))))\n            mstore(add(transferKey, 32), mload(add(payload, 34)))\n            mstore(add(transferKey, 64), shr(192, mload(add(payload, 66))))\n        }\n    }\n\n    /// @dev Compares two transferKeys for validation.\n    /// @param self Swap identifier generated for each crosschain swap.\n    /// @param transferKey Swap identifier generated for each crosschain swap.\n    function validate(TransferKey memory self, TransferKey memory transferKey) internal pure {\n        if (\n            self.networkId != transferKey.networkId ||\n            self.senderAddress != transferKey.senderAddress ||\n            self.swapSequence != transferKey.swapSequence\n        ) {\n            revert InvalidTransferKey();\n        }\n    }\n}\n"
    },
    "contracts/libraries/LibUint256Array.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nlibrary LibUint256Array {\n    /// @dev Sum up the specified amounts.\n    /// @param self Array of amounts.\n    /// @return amountOut Sum of amounts.\n    function sum(uint256[] memory self) internal pure returns (uint256 amountOut) {\n        uint256 selfLength = self.length * 32;\n\n        assembly {\n            let selfPosition := add(self, 32)\n            let endPosition := add(selfPosition, selfLength)\n\n            for {\n\n            } lt(selfPosition, endPosition) {\n                selfPosition := add(selfPosition, 32)\n            } {\n                amountOut := add(amountOut, mload(selfPosition))\n            }\n        }\n    }\n}\n"
    },
    "contracts/pauser/LibPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {AppStorage, LibMagpieAggregator} from \"../libraries/LibMagpieAggregator.sol\";\n\nerror ContractIsPaused();\n\nlibrary LibPauser {\n    event Paused(address sender);\n\n    /// @dev See {IPauser-pause}\n    function pause() internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        s.paused = true;\n        emit Paused(msg.sender);\n    }\n\n    event Unpaused(address sender);\n\n    /// @dev See {IPauser-unpause}\n    function unpause() internal {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        s.paused = false;\n        emit Paused(msg.sender);\n    }\n\n    /// @dev Enforces that certain operations can only be performed when the contract is not paused.\n    /// If the contract is indeed paused, the function reverts the transaction and provides an error message indicating that the contract is paused.\n    /// This helps ensure that critical functions or actions are not performed during a paused state, maintaining the desired behavior and security of the contract.\n    function enforceIsNotPaused() internal view {\n        AppStorage storage s = LibMagpieAggregator.getStorage();\n\n        if (s.paused) {\n            revert ContractIsPaused();\n        }\n    }\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}\n"
    },
    "hardhat-deploy/solc_0.8/diamond/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "openzeppelin-solidity/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    }
  }
}}