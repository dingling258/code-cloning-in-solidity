{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "shanghai",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "contracts/Structs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { DCSProduct, DCSVault } from \"./cega-strategies/dcs/DCSStructs.sol\";\nimport { FCNProduct, FCNVault } from \"./cega-strategies/fcn/FCNStructs.sol\";\nimport { IOracleEntry } from \"./oracle-entry/interfaces/IOracleEntry.sol\";\n\nuint32 constant DCS_STRATEGY_ID = 1;\nuint32 constant FCN_STRATEGY_ID = 2;\n\nstruct DepositQueue {\n    uint128 queuedDepositsTotalAmount;\n    uint128 processedIndex;\n    mapping(address => uint128) amounts;\n    address[] depositors;\n    mapping(address => bool) depositorExists;\n}\n\nstruct Withdrawer {\n    address account;\n    uint32 nextProductId;\n}\n\nstruct ProductMetadata {\n    string name;\n    string tradeWinnerNftImage;\n}\n\nstruct WithdrawalQueue {\n    uint128 queuedWithdrawalSharesAmount;\n    uint128 processedIndex;\n    mapping(address => mapping(uint32 => uint256)) amounts;\n    Withdrawer[] withdrawers;\n    mapping(address => bool) withdrawingWithProxy;\n}\n\nstruct CegaGlobalStorage {\n    // Global information\n    uint32 strategyIdCounter;\n    uint32 productIdCounter;\n    uint32[] strategyIds;\n    mapping(uint32 => uint32) strategyOfProduct;\n    mapping(uint32 => ProductMetadata) productMetadata;\n    mapping(address => Vault) vaults;\n    // DCS information\n    mapping(uint32 => DCSProduct) dcsProducts;\n    // Shared\n    mapping(uint32 => DepositQueue) depositQueues;\n    // DCS information\n    mapping(address => DCSVault) dcsVaults;\n    // Shared\n    mapping(address => WithdrawalQueue) withdrawalQueues;\n    // vaultAddress => (asset/s hash => timestamp => price)\n    mapping(address => mapping(bytes32 => mapping(uint40 => uint128))) oraclePriceOverride;\n    // this will be a bitmap that has all the configs for pausing\n    uint256 protocolPauseConfig;\n    // FCN information\n    mapping(uint32 => FCNProduct) fcnProducts;\n    mapping(address => FCNVault) fcnVaults;\n    mapping(address => bool) fcnBondAllowList;\n}\n\nstruct Vault {\n    uint128 totalAssets;\n    uint64 auctionWinnerTokenId;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n    uint32 productId;\n    address auctionWinner;\n    uint40 tradeStartDate;\n    VaultStatus vaultStatus;\n    IOracleEntry.DataSource dataSource;\n    bool isInDispute;\n    bool isDefaulted;\n}\n\nenum OldVaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    NotTraded,\n    Traded,\n    TradeExpired,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n\nenum VaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    PreAuction,\n    Auctioned,\n    Traded,\n    AwaitingSettlement,\n    Settled,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n\nstruct MMNFTMetadata {\n    address vaultAddress;\n    uint40 tradeStartDate;\n    uint40 tradeEndDate;\n    uint16 aprBps;\n    uint128 notional;\n    uint128 initialSpotPrice;\n    uint128 strikePrice;\n}\n\nstruct VaultCreationParams {\n    string tokenName;\n    string tokenSymbol;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n}\n"
    },
    "contracts/cega-strategies/dcs/DCSStructs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nenum DCSOptionType {\n    BuyLow,\n    SellHigh\n}\n\nenum SettlementStatus {\n    NotAuctioned,\n    Auctioned,\n    InitialPremiumPaid,\n    AwaitingSettlement,\n    Settled,\n    Defaulted\n}\n\nstruct DCSProductCreationParams {\n    uint128 maxUnderlyingAmountLimit;\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    address quoteAssetAddress;\n    address baseAssetAddress;\n    DCSOptionType dcsOptionType;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint16 lateFeeBps;\n    uint16 strikeBarrierBps;\n    uint40 tenorInSeconds;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    string name;\n    string tradeWinnerNftImage;\n}\n\nstruct DCSProduct {\n    uint128 maxUnderlyingAmountLimit;\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 sumVaultUnderlyingAmounts; //revisit later\n    address quoteAssetAddress; // should be immutable\n    uint40 tenorInSeconds;\n    uint16 lateFeeBps;\n    uint8 daysToStartLateFees;\n    address baseAssetAddress; // should be immutable\n    uint16 strikeBarrierBps;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    DCSOptionType dcsOptionType;\n    bool isDepositQueueOpen;\n    address[] vaults;\n    uint8 disputeGraceDelayInHours;\n}\n\nstruct DCSVault {\n    uint128 initialSpotPrice;\n    uint128 strikePrice;\n    uint128 totalYield;\n    uint16 aprBps;\n    SettlementStatus settlementStatus; // DEPRECATED\n    bool isPayoffInDepositAsset;\n}\n"
    },
    "contracts/cega-strategies/fcn/FCNStructs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { IOracleEntry } from \"../../oracle-entry/interfaces/IOracleEntry.sol\";\n\nstruct FCNProductCreationParams {\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 maxUnderlyingAmountLimit;\n    address underlyingAsset;\n    uint64 leverage;\n    uint40 tenorInSeconds;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    uint16 lateFeeBps;\n    string name;\n    string tradeWinnerNftImage;\n    bool isBondOption;\n    uint24 observationIntervalInSeconds;\n    FCNOptionBarrier[] optionBarriers;\n}\n\nstruct FCNProduct {\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 maxUnderlyingAmountLimit;\n    uint128 sumVaultUnderlyingAmounts;\n    address underlyingAsset;\n    uint64 leverage;\n    uint40 tenorInSeconds;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    uint16 lateFeeBps;\n    bool isDepositQueueOpen;\n    bool isBondOption;\n    uint24 observationIntervalInSeconds;\n    FCNOptionBarrier[] optionBarriers;\n    address[] vaults;\n}\n\nstruct FCNVaultCreationParams {\n    string tokenName;\n    string tokenSymbol;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n}\n\nstruct FCNVaultBarrierData {\n    uint128 initialSpotPrice;\n    IOracleEntry.DataSource dataSource;\n}\n\nstruct FCNVault {\n    uint128 notional;\n    uint128 totalYield;\n    uint16 aprBps;\n    bool isKnockedIn;\n    uint16 observationsDone;\n    uint96 buffer; // buffer if we need to add any more data\n    FCNVaultBarrierData[] barrierData;\n}\n\nstruct FCNOptionBarrier {\n    uint16 barrierBps;\n    FCNOptionBarrierType barrierType;\n    address asset;\n    uint8 exponent;\n}\n\nenum FCNOptionBarrierType {\n    None,\n    KnockIn\n}\n\nenum FCNVaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    PreAuction,\n    Auctioned,\n    Traded,\n    AwaitingSettlement,\n    Settled,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n"
    },
    "contracts/common/ProductViewEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { ProductMetadata, DepositQueue } from \"../Structs.sol\";\nimport { IProductViewEntry } from \"./interfaces/IProductViewEntry.sol\";\nimport { CegaStorage, CegaGlobalStorage } from \"../storage/CegaStorage.sol\";\n\ncontract ProductViewEntry is IProductViewEntry, CegaStorage {\n    /**\n     * @notice Retrieves the strategy ID associated with a given product.\n     * @param productId The ID of the product.\n     * @return The strategy ID of the specified product.\n     */\n    function getStrategyOfProduct(\n        uint32 productId\n    ) external view returns (uint32) {\n        CegaGlobalStorage storage cgs = getStorage();\n        return cgs.strategyOfProduct[productId];\n    }\n\n    /**\n     * @notice Gets the ID of the latest product created.\n     * @return The ID of the latest product.\n     */\n    function getLatestProductId() external view returns (uint32) {\n        CegaGlobalStorage storage cgs = getStorage();\n        return cgs.productIdCounter;\n    }\n\n    /**\n     * @notice Fetches metadata for a specific product.\n     * @param productId The ID of the product.\n     * @return A `ProductMetadata` struct containing metadata of the product.\n     */\n    function getProductMetadata(\n        uint32 productId\n    ) external view returns (ProductMetadata memory) {\n        CegaGlobalStorage storage cgs = getStorage();\n        return cgs.productMetadata[productId];\n    }\n\n    function getIsProtocolPaused() external view returns (bool) {\n        CegaGlobalStorage storage cgs = getStorage();\n\n        return cgs.protocolPauseConfig == 1;\n    }\n\n    function getDepositQueue(\n        uint32 productId\n    )\n        external\n        view\n        returns (\n            address[] memory depositors,\n            uint128[] memory amounts,\n            uint128 totalAmount\n        )\n    {\n        DepositQueue storage queue = getStorage().depositQueues[productId];\n        uint256 index = queue.processedIndex;\n        uint256 depositorsLength = queue.depositors.length - index;\n\n        amounts = new uint128[](depositorsLength);\n        depositors = new address[](depositorsLength);\n\n        for (uint256 i = 0; i < depositorsLength; i++) {\n            depositors[i] = queue.depositors[index + i];\n            amounts[i] = queue.amounts[depositors[i]];\n        }\n        totalAmount = queue.queuedDepositsTotalAmount;\n    }\n}\n"
    },
    "contracts/common/interfaces/IProductViewEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\nimport { ProductMetadata } from \"../../Structs.sol\";\n\npragma solidity ^0.8.24;\n\ninterface IProductViewEntry {\n    function getStrategyOfProduct(\n        uint32 productId\n    ) external view returns (uint32);\n\n    function getLatestProductId() external view returns (uint32);\n\n    function getProductMetadata(\n        uint32 productId\n    ) external view returns (ProductMetadata memory);\n\n    function getIsProtocolPaused() external view returns (bool);\n\n    /**\n     * @dev Gets the deposit queue for a specific product, including depositors and their amounts.\n     * @param productId The product ID.\n     * @return depositors Array of depositor addresses.\n     * @return amounts Array of deposit amounts.\n     * @return totalAmount Total amount in the deposit queue.\n     */\n    function getDepositQueue(\n        uint32 productId\n    )\n        external\n        view\n        returns (\n            address[] memory depositors,\n            uint128[] memory amounts,\n            uint128 totalAmount\n        );\n}\n"
    },
    "contracts/oracle-entry/interfaces/IOracleEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.24;\n\ninterface IOracleEntry {\n    enum DataSource {\n        None,\n        Pyth\n    }\n\n    /**\n     * @dev Emitted when a data source adapter is set.\n     * @param dataSource The data source for which the adapter is set.\n     * @param adapter The address of the adapter.\n     */\n    event DataSourceAdapterSet(DataSource dataSource, address adapter);\n\n    /**\n     * @notice Gets the price of an asset at a specific timestamp using a data source.\n     * @param asset The address of the asset.\n     * @param timestamp The timestamp for which the price is required.\n     * @param dataSource The data source to use for fetching the price.\n     * @return The price of the asset at the specified timestamp.\n     */\n    function getSinglePrice(\n        address asset,\n        uint40 timestamp,\n        DataSource dataSource\n    ) external view returns (uint128);\n\n    /**\n     * @notice Gets the price of a base asset in terms of a quote asset at a specific timestamp using a data source.\n     * @param baseAsset The address of the base asset.\n     * @param quoteAsset The address of the quote asset.\n     * @param timestamp The timestamp for which the price is required.\n     * @param dataSource The data source to use for fetching the price.\n     * @return The price of the base asset in terms of the quote asset at the specified timestamp.\n     */\n    function getPrice(\n        address baseAsset,\n        address quoteAsset,\n        uint40 timestamp,\n        DataSource dataSource\n    ) external view returns (uint128);\n\n    /**\n     * @notice Sets the adapter for a specific data source.\n     * @param dataSource The data source for which to set the adapter.\n     * @param adapter The address of the adapter.\n     */\n    function setDataSourceAdapter(\n        DataSource dataSource,\n        address adapter\n    ) external;\n\n    /**\n     * @notice Returns the target number of decimals for price values.\n     * @return The number of decimals.\n     */\n    function getTargetDecimals() external pure returns (uint8);\n}\n"
    },
    "contracts/storage/CegaStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { CegaGlobalStorage } from \"../Structs.sol\";\n\ncontract CegaStorage {\n    bytes32 private constant CEGA_STORAGE_POSITION =\n        bytes32(uint256(keccak256(\"cega.global.storage\")) - 1);\n\n    function getStorage() internal pure returns (CegaGlobalStorage storage ds) {\n        bytes32 position = CEGA_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n}\n"
    }
  }
}}