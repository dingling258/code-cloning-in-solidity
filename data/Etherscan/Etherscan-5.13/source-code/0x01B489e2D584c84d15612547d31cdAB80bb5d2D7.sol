{{
  "language": "Solidity",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100000
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "viaIR": true,
    "remappings": []
  },
  "sources": {
    "contracts/StakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { TransferHelper } from \"./libraries/TransferHelper.sol\";\nimport { IERC20 } from \"./interfaces/IERC20.sol\";\nimport {IFactory} from \"./interfaces/IFactory.sol\";\nimport {IGenerator} from \"./interfaces/IGenerator.sol\";\nimport {IStake} from \"./interfaces/IStake.sol\";\n\ncontract StakingPool is IStake, Initializable {\n\n    constructor() {\n        _disableInitializers();\n    }\n    \n    function rewardBased() external pure returns (bool) {\n        return false;\n    }\n\n    function initialize(bytes calldata data) external initializer() {\n        (address _generator, address _factory, address stake, address reward, uint limit, uint lock) = abi.decode(data, (address, address, address, address, uint, uint));\n        require(stake != address(0), \"StakingPool: stake token cannot be 0\");\n        require(reward != address(0), \"StakingPool: reward token cannot be 0\");\n        stakingToken = stake;\n        rewardToken = reward;\n        factory = _factory;\n        generator = _generator;\n        isFactoryPool = IGenerator(_generator).isFactory(_factory);\n        poolLimitPerUser = limit;\n        lockTime = lock;\n        emit LockTimeSet(lock);\n        emit PoolLimitSet(limit);\n        emit OwnershipTransferred(address(0), owner(), isFactoryPool);\n    }\n\n    modifier onlyOwner {\n        require(!isFactoryPool ? factory == msg.sender : IGenerator(generator).factoryInfo(factory).owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function owner() public view returns (address) {\n        return isFactoryPool ? IGenerator(generator).factoryInfo(factory).owner : factory;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(!isFactoryPool, \"Cannot transfer ownership of factory pool.\");\n        address oldOwner = owner();\n        require(oldOwner != newOwner, \"Cannot transfer to same owner\");\n        factory = newOwner;\n        isFactoryPool = IGenerator(generator).isFactory(newOwner);\n        emit OwnershipTransferred(oldOwner, newOwner, isFactoryPool);\n    }\n\n    struct UserInfo {\n        uint256 amount; \n        uint256 totalExcluded;\n        uint256 totalRealised; \n        uint256 depositTime; \n        uint256 lastClaimed;\n    }\n    address public stakingToken;\n    address public rewardToken;\n    mapping(address => UserInfo) public userInfo;\n    uint256 public totalShares;\n    uint256 private _totalRewards;\n    uint256 public totalDistributed;\n    uint256 private _rewardsPerShare;\n    uint256 private _unallocatedRewards;\n    uint256 private lastBalance;\n    uint256 private constant p = 10**18;\n    uint256 public poolLimitPerUser;\n    uint256 public lockTime;\n    address public generator;\n    address public factory;\n    bool public isFactoryPool;\n\n    event Deposit(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n    event RewardClaimed(address indexed user, uint256 amount);\n    event RewardAdded(uint256 reward, uint256 totalRewards);\n    event LockTimeSet(uint256 lockTime);\n    event PoolLimitSet(uint256 poolLimit);\n    event OwnershipTransferred(address, address, bool);\n\n    function unallocatedRewards() public view returns (uint256) {\n        if (totalShares > 0) return _unallocatedRewards;\n        uint bal = IERC20(rewardToken).balanceOf(address(this)) - (stakingToken == rewardToken ? totalShares : 0);\n        uint _amount = bal - lastBalance;\n        return _amount + _unallocatedRewards;\n    }\n\n    function getOwedRewards(uint256 share, uint rewardRate) internal pure returns (uint256) {\n        return (share * rewardRate) / p;\n    }\n\n    function rewardsPerShare() public view returns (uint256 perShare) {\n        uint added = IERC20(rewardToken).balanceOf(address(this)) - lastBalance - (stakingToken == rewardToken ? totalShares : 0);\n        perShare = (added == 0 ? _rewardsPerShare : _rewardsPerShare + ((added * p) / totalShares));\n    }\n\n    function getUnpaidEarnings(address account) public view returns (uint256) {\n        if(userInfo[account].amount == 0){ return 0; }\n        uint256 perShare = rewardsPerShare();\n        uint256 userTotalRewards = (userInfo[account].amount * perShare) / p;\n        uint256 userTotalExcluded = userInfo[account].totalExcluded;\n        if(userTotalRewards <= userTotalExcluded){ return 0; }\n        return userTotalRewards - userTotalExcluded;\n    }\n\n    function totalRewards() public view returns (uint256) {\n        uint bal = IERC20(rewardToken).balanceOf(address(this)) - (stakingToken == rewardToken ? totalShares : 0);\n        uint _amount = bal - lastBalance;\n        return _totalRewards + _amount;\n    }\n\n    function deposit(uint256 _amount) external {\n        UserInfo storage user = userInfo[msg.sender];\n        require(_amount > 0, \"Cannot stake 0\");\n        _distribute(msg.sender);\n        IERC20 t = IERC20(stakingToken);\n        uint256 amountBefore = t.balanceOf(address(this));\n        TransferHelper.safeTransferFrom(stakingToken, msg.sender, address(this), _amount);\n        uint bal = t.balanceOf(address(this));\n        _amount = bal - amountBefore;\n        assert(_amount > 0);\n        user.amount += _amount;\n        require(user.amount <= poolLimitPerUser, \"User amount above limit\");\n        totalShares += _amount;\n        user.depositTime = block.timestamp;\n        user.totalExcluded = getOwedRewards(user.amount, _rewardsPerShare);\n        if (_unallocatedRewards > 0) {\n            uint newTotal = _totalRewards + _unallocatedRewards;\n            _rewardsPerShare += (_unallocatedRewards * p) / totalShares;\n            if (newTotal > 0) emit RewardAdded(_unallocatedRewards, newTotal);\n            _totalRewards = newTotal;\n            _unallocatedRewards = 0;\n            _distribute(msg.sender);\n        }\n        emit Deposit(msg.sender, _amount);\n    }\n\n    function withdraw(uint256 _amount) external {\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.amount >= _amount, \"Amount to withdraw too high\");\n        require(_amount > 0, \"Amount must be greater than 0\");\n        require(user.depositTime + lockTime < block.timestamp, \"Can not withdraw in lock period\");\n        _distribute(msg.sender);\n        user.amount -= _amount;\n        totalShares -= _amount;\n        TransferHelper.safeTransfer(stakingToken, address(msg.sender), _amount);\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    function claim() external {\n        _distribute(msg.sender);\n    }\n\n    function _distribute(address account) internal {\n        updateRewards();\n        uint256 amount = getUnpaidEarnings(account);\n        if(amount > 0){\n            totalDistributed += amount;\n            userInfo[account].lastClaimed = block.timestamp;\n            userInfo[account].totalRealised += amount;\n            userInfo[account].totalExcluded += amount;\n            TransferHelper.safeTransfer(rewardToken, account, amount);\n            lastBalance = IERC20(rewardToken).balanceOf(address(this)) - (stakingToken == rewardToken ? totalShares : 0);\n            emit RewardClaimed(account, amount);\n        }\n    }\n\n    function updateRewards() internal {\n        uint bal = IERC20(rewardToken).balanceOf(address(this)) - (stakingToken == rewardToken ? totalShares : 0);\n        uint _amount = bal - lastBalance;\n        lastBalance = bal;\n        if (_amount > 0) {\n            if (totalShares == 0) {\n                _unallocatedRewards = _amount;\n                return;\n            } else if (_unallocatedRewards > 0) {\n                _amount += _unallocatedRewards;\n                _unallocatedRewards = 0;\n            } \n            _totalRewards += _amount;\n            _rewardsPerShare += (_amount * p) / totalShares;\n            emit RewardAdded(_amount, _totalRewards);\n        }\n    }\n\n    function setLockTime(uint256 _time) external onlyOwner {\n        lockTime = _time;\n        emit LockTimeSet(_time);\n    }\n\n    function setPoolLimit(uint256 _limit) external onlyOwner {\n        poolLimitPerUser = _limit;\n        emit PoolLimitSet(_limit);\n    }\n\n}"
    },
    "contracts/interfaces/IStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IStake {\n    function stakingToken() external view returns (address);\n    function rewardToken() external view returns (address);\n    function factory() external view returns (address);\n    function rewardBased() external view returns (bool);\n}"
    },
    "contracts/interfaces/IGenerator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\n\ninterface IGenerator {\n    struct Info {\n        address owner;\n        uint16 burnFee;\n        address burnToken;\n        uint16 teamFee;\n        address teamAddress;\n        uint16 lpFee;\n        address referrer;\n        uint16 referFee;\n        uint16 labFee;\n    }\n    function allowLoans() external view returns (bool);\n    function isPair(address) external view returns (bool);\n    function borrowFee() external view returns (uint16);\n    function factoryInfo(address) external view returns (Info memory);\n    function pairFees(address pair) external view returns (Info memory);\n    function LAB_FEE() external view returns (uint16);\n    function FEE_DENOMINATOR() external view returns (uint16);\n    function stables(address) external view returns (bool);\n    function pairs(address factory, address token0, address token1) external view returns (address);\n    function getPairs(address[] calldata path) external  view returns (address[] memory _pairs);\n    function maxSwap2Fee(uint16 f) external view returns (uint16);\n    function swapInternal(\n        address[] calldata _pairs,\n        address caller,\n        address to\n    ) external returns (uint256 amountOut);\n    function WRAPPED_ETH() external view returns (address);\n    function createPair(\n        address tokenA, \n        address tokenB\n    ) external returns (address pair);\n     function createSwap2Pair(\n        address tokenA, \n        address tokenB,\n        address feeTaker,\n        address takeFeeIn\n    ) external returns (address pair);\n    function createPairWithLiquidity(\n        address tokenA, \n        address tokenB,\n        uint amountA,\n        uint amountB,\n        address to,\n        address feeTaker,\n        address takeFeeIn\n    ) external returns (address pair);\n    function isFactory(address) external returns (bool);\n    function tokens(address) external returns (address[] memory);\n}"
    },
    "contracts/interfaces/IFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IFactory {\n    function router() external view returns (address);\n    function initialize(address) external;\n    function allPairs(uint) external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address);\n    function allPairsLength() external view returns (uint);\n    function createPair(\n        address tokenA, \n        address tokenB\n    ) external returns (address pair);\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\ninterface IERC20 {\n\n    event Approval(address indexed owner, address indexed spender, uint value);\n\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function approve(address spender, uint value) external returns (bool);\n\n    function transfer(address to, uint value) external returns (bool);\n\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function totalSupply() external view returns (uint);\n\n    function balanceOf(address owner) external view returns (uint);\n\n    function allowance(address owner, address spender) external view returns (uint);\n    \n}"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.16;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n  function safeApprove(\n    address token,\n    address to,\n    uint256 value\n) internal {\n    // bytes4(keccak256(bytes('approve(address,uint256)\")));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      \"TransferHelper::safeApprove: approve failed\"\n    );\n  }\n\n  function safeTransfer(\n    address token,\n    address to,\n    uint256 value\n) internal {\n    // bytes4(keccak256(bytes('transfer(address,uint256)\")));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      \"TransferHelper::safeTransfer: transfer failed\"\n    );\n  }\n\n  function safeTransferFrom(\n    address token,\n    address from,\n    address to,\n    uint256 value\n) internal {\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)\")));\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n    require(\n      success && (data.length == 0 || abi.decode(data, (bool))),\n      \"TransferHelper: transferFrom failed\"\n    );\n  }\n\n  function safeTransferETH(address to, uint256 value) internal {\n    (bool success, ) = to.call{value:value}(\"\");\n    require(success, \"Transfer failed.\");\n  }\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    }
  }
}}