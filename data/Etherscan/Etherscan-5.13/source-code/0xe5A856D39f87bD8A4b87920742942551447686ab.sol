{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "shanghai",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [],
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/Structs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { DCSProduct, DCSVault } from \"./cega-strategies/dcs/DCSStructs.sol\";\nimport { FCNProduct, FCNVault } from \"./cega-strategies/fcn/FCNStructs.sol\";\nimport { IOracleEntry } from \"./oracle-entry/interfaces/IOracleEntry.sol\";\n\nuint32 constant DCS_STRATEGY_ID = 1;\nuint32 constant FCN_STRATEGY_ID = 2;\n\nstruct DepositQueue {\n    uint128 queuedDepositsTotalAmount;\n    uint128 processedIndex;\n    mapping(address => uint128) amounts;\n    address[] depositors;\n    mapping(address => bool) depositorExists;\n}\n\nstruct Withdrawer {\n    address account;\n    uint32 nextProductId;\n}\n\nstruct ProductMetadata {\n    string name;\n    string tradeWinnerNftImage;\n}\n\nstruct WithdrawalQueue {\n    uint128 queuedWithdrawalSharesAmount;\n    uint128 processedIndex;\n    mapping(address => mapping(uint32 => uint256)) amounts;\n    Withdrawer[] withdrawers;\n    mapping(address => bool) withdrawingWithProxy;\n}\n\nstruct CegaGlobalStorage {\n    // Global information\n    uint32 strategyIdCounter;\n    uint32 productIdCounter;\n    uint32[] strategyIds;\n    mapping(uint32 => uint32) strategyOfProduct;\n    mapping(uint32 => ProductMetadata) productMetadata;\n    mapping(address => Vault) vaults;\n    // DCS information\n    mapping(uint32 => DCSProduct) dcsProducts;\n    // Shared\n    mapping(uint32 => DepositQueue) depositQueues;\n    // DCS information\n    mapping(address => DCSVault) dcsVaults;\n    // Shared\n    mapping(address => WithdrawalQueue) withdrawalQueues;\n    // vaultAddress => (asset/s hash => timestamp => price)\n    mapping(address => mapping(bytes32 => mapping(uint40 => uint128))) oraclePriceOverride;\n    // this will be a bitmap that has all the configs for pausing\n    uint256 protocolPauseConfig;\n    // FCN information\n    mapping(uint32 => FCNProduct) fcnProducts;\n    mapping(address => FCNVault) fcnVaults;\n    mapping(address => bool) fcnBondAllowList;\n}\n\nstruct Vault {\n    uint128 totalAssets;\n    uint64 auctionWinnerTokenId;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n    uint32 productId;\n    address auctionWinner;\n    uint40 tradeStartDate;\n    VaultStatus vaultStatus;\n    IOracleEntry.DataSource dataSource;\n    bool isInDispute;\n    bool isDefaulted;\n}\n\nenum OldVaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    NotTraded,\n    Traded,\n    TradeExpired,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n\nenum VaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    PreAuction,\n    Auctioned,\n    Traded,\n    AwaitingSettlement,\n    Settled,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n\nstruct MMNFTMetadata {\n    address vaultAddress;\n    uint40 tradeStartDate;\n    uint40 tradeEndDate;\n    uint16 aprBps;\n    uint128 notional;\n    uint128 initialSpotPrice;\n    uint128 strikePrice;\n}\n\nstruct VaultCreationParams {\n    string tokenName;\n    string tokenSymbol;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n}\n"
    },
    "contracts/cega-strategies/dcs/DCSStructs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nenum DCSOptionType {\n    BuyLow,\n    SellHigh\n}\n\nenum SettlementStatus {\n    NotAuctioned,\n    Auctioned,\n    InitialPremiumPaid,\n    AwaitingSettlement,\n    Settled,\n    Defaulted\n}\n\nstruct DCSProductCreationParams {\n    uint128 maxUnderlyingAmountLimit;\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    address quoteAssetAddress;\n    address baseAssetAddress;\n    DCSOptionType dcsOptionType;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint16 lateFeeBps;\n    uint16 strikeBarrierBps;\n    uint40 tenorInSeconds;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    string name;\n    string tradeWinnerNftImage;\n}\n\nstruct DCSProduct {\n    uint128 maxUnderlyingAmountLimit;\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 sumVaultUnderlyingAmounts; //revisit later\n    address quoteAssetAddress; // should be immutable\n    uint40 tenorInSeconds;\n    uint16 lateFeeBps;\n    uint8 daysToStartLateFees;\n    address baseAssetAddress; // should be immutable\n    uint16 strikeBarrierBps;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    DCSOptionType dcsOptionType;\n    bool isDepositQueueOpen;\n    address[] vaults;\n    uint8 disputeGraceDelayInHours;\n}\n\nstruct DCSVault {\n    uint128 initialSpotPrice;\n    uint128 strikePrice;\n    uint128 totalYield;\n    uint16 aprBps;\n    SettlementStatus settlementStatus; // DEPRECATED\n    bool isPayoffInDepositAsset;\n}\n"
    },
    "contracts/cega-strategies/dcs/interfaces/IDCSProductEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { Withdrawer, VaultStatus } from \"../../../Structs.sol\";\nimport { DCSProductCreationParams, DCSProduct } from \"../DCSStructs.sol\";\nimport {\n    IOracleEntry\n} from \"../../../oracle-entry/interfaces/IOracleEntry.sol\";\n\ninterface IDCSProductEntry {\n    // FUNCTIONS\n\n    /**\n     * @dev Creates a new DCS product with the given parameters.\n     * @param creationParams The parameters required for creating a new DCS product.\n     * @return uint32 The ID of the newly created product.\n     */\n    function dcsCreateProduct(\n        DCSProductCreationParams calldata creationParams\n    ) external returns (uint32);\n\n    /**\n     * @dev Adds an amount to the deposit queue for a specified product.\n     * @param productId The ID of the product for which the deposit is being made.\n     * @param amount The amount to be deposited.\n     * @param receiver The address that will receive the deposit.\n     */\n    function dcsAddToDepositQueue(\n        uint32 productId,\n        uint128 amount,\n        address receiver\n    ) external payable;\n\n    function dcsRemoveFromDepositQueue(\n        uint32 productId,\n        uint128 amount\n    ) external;\n\n    /**\n     * @dev Processes the deposit queue for a specific vault, up to a maximum count of deposits.\n     * @param vault The address of the vault for which to process deposits.\n     * @param maxProcessCount The maximum number of deposits to process.\n     */\n    function dcsProcessDepositQueue(\n        address vault,\n        uint256 maxProcessCount\n    ) external;\n\n    /**\n     * @dev Adds a request to the withdrawal queue for a specific vault.\n     * @param vault The address of the vault.\n     * @param sharesAmount The amount of shares to withdraw.\n     * @param nextProductId The product ID for the next investment cycle, if applicable.\n     */\n    function dcsAddToWithdrawalQueue(\n        address vault,\n        uint128 sharesAmount,\n        uint32 nextProductId\n    ) external;\n\n    /**\n     * @dev Adds a request to the withdrawal queue with proxy for a specific vault.\n     * @param vaultAddress The address of the vault.\n     * @param sharesAmount The amount of shares to withdraw.\n     */\n    function dcsAddToWithdrawalQueueWithProxy(\n        address vaultAddress,\n        uint128 sharesAmount\n    ) external;\n\n    /**\n     * @dev Processes the withdrawal queue for a specific vault, up to a maximum count of withdrawals.\n     * @param vault The address of the vault for which to process withdrawals.\n     * @param maxProcessCount The maximum number of withdrawals to process.\n     */\n    function dcsProcessWithdrawalQueue(\n        address vault,\n        uint256 maxProcessCount\n    ) external;\n\n    /**\n     * @dev Checks and handles trade expiry for a specific vault.\n     * @param vaultAddress The address of the vault to check for trade expiry.\n     */\n    function dcsCheckTradeExpiry(address vaultAddress) external;\n\n    /**\n     * @dev Checks and handles settlement default for a specific vault.\n     * @param vaultAddress The address of the vault to check for settlement default.\n     */\n    function dcsCheckSettlementDefault(address vaultAddress) external;\n\n    /**\n     * @dev Collects fees from a specific vault.\n     * @param vaultAddress The address of the vault from which to collect fees.\n     */\n    function dcsCollectVaultFees(address vaultAddress) external;\n\n    /**\n     * @dev Submits a dispute for a specific vault.\n     * @param vaultAddress The address of the vault for which to submit a dispute.\n     */\n    function dcsSubmitDispute(address vaultAddress) external;\n\n    /**\n     * @dev Processes a trade dispute for a specific vault, potentially adjusting the price.\n     * @param vaultAddress The address of the vault for which to process the dispute.\n     * @param newPrice The new price to be considered in resolving the dispute.\n     */\n    function dcsProcessTradeDispute(\n        address vaultAddress,\n        uint128 newPrice\n    ) external;\n}\n"
    },
    "contracts/cega-strategies/dcs/interfaces/IDCSViewEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { Withdrawer } from \"../../../Structs.sol\";\nimport { DCSProduct, DCSVault } from \"../DCSStructs.sol\";\n\ninterface IDCSViewEntry {\n    /**\n     * @dev Retrieves detailed information about a specific DCS product.\n     * @param productId The product ID.\n     * @return DCSProduct Struct containing detailed information about the product.\n     */\n    function dcsGetProduct(\n        uint32 productId\n    ) external view returns (DCSProduct memory);\n\n    /**\n     * @dev Retrieves the deposit asset address for a specific product.\n     * @param productId The product ID.\n     * @return address Address of the deposit asset.\n     */\n    function dcsGetProductDepositAsset(\n        uint32 productId\n    ) external view returns (address);\n\n    /**\n     * @dev Calculates the final payoff for a specific vault.\n     * @param vaultAddress The vault address.\n     * @return uint128 The calculated final payoff amount.\n     */\n    function dcsCalculateVaultFinalPayoff(\n        address vaultAddress\n    ) external view returns (uint128);\n\n    /**\n     * @notice Retrieves the details of a specific vault.\n     * @param vaultAddress The address of the vault to retrieve.\n     * @return A struct containing details of the vault.\n     */\n    function dcsGetVault(\n        address vaultAddress\n    ) external view returns (DCSVault memory);\n\n    /**\n     * @notice Calculates the late fee for a specific vault.\n     * @param vaultAddress The address of the vault.\n     * @return The calculated late fee.\n     */\n    function dcsCalculateLateFee(\n        address vaultAddress\n    ) external view returns (uint128);\n\n    /**\n     * @notice Retrieves the coupon payment for a specific vault.\n     * @param vaultAddress The address of the vault.\n     * @return The amount of the coupon payment.\n     */\n    function dcsGetCouponPayment(\n        address vaultAddress\n    ) external view returns (uint128);\n\n    /**\n     * @notice Retrieves the settlement asset for a specific vault.\n     * @param vaultAddress The address of the vault.\n     * @return The address of the settlement asset.\n     */\n    function dcsGetVaultSettlementAsset(\n        address vaultAddress\n    ) external view returns (address);\n}\n"
    },
    "contracts/cega-strategies/fcn/FCNStructs.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { IOracleEntry } from \"../../oracle-entry/interfaces/IOracleEntry.sol\";\n\nstruct FCNProductCreationParams {\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 maxUnderlyingAmountLimit;\n    address underlyingAsset;\n    uint64 leverage;\n    uint40 tenorInSeconds;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    uint16 lateFeeBps;\n    string name;\n    string tradeWinnerNftImage;\n    bool isBondOption;\n    uint24 observationIntervalInSeconds;\n    FCNOptionBarrier[] optionBarriers;\n}\n\nstruct FCNProduct {\n    uint128 minDepositAmount;\n    uint128 minWithdrawalAmount;\n    uint128 maxUnderlyingAmountLimit;\n    uint128 sumVaultUnderlyingAmounts;\n    address underlyingAsset;\n    uint64 leverage;\n    uint40 tenorInSeconds;\n    uint8 daysToStartLateFees;\n    uint8 daysToStartAuctionDefault;\n    uint8 daysToStartSettlementDefault;\n    uint8 disputePeriodInHours;\n    uint8 disputeGraceDelayInHours;\n    uint16 lateFeeBps;\n    bool isDepositQueueOpen;\n    bool isBondOption;\n    uint24 observationIntervalInSeconds;\n    FCNOptionBarrier[] optionBarriers;\n    address[] vaults;\n}\n\nstruct FCNVaultCreationParams {\n    string tokenName;\n    string tokenSymbol;\n    uint16 yieldFeeBps;\n    uint16 managementFeeBps;\n}\n\nstruct FCNVaultBarrierData {\n    uint128 initialSpotPrice;\n    IOracleEntry.DataSource dataSource;\n}\n\nstruct FCNVault {\n    uint128 notional;\n    uint128 totalYield;\n    uint16 aprBps;\n    bool isKnockedIn;\n    uint16 observationsDone;\n    uint96 buffer; // buffer if we need to add any more data\n    FCNVaultBarrierData[] barrierData;\n}\n\nstruct FCNOptionBarrier {\n    uint16 barrierBps;\n    FCNOptionBarrierType barrierType;\n    address asset;\n    uint8 exponent;\n}\n\nenum FCNOptionBarrierType {\n    None,\n    KnockIn\n}\n\nenum FCNVaultStatus {\n    DepositsClosed,\n    DepositsOpen,\n    PreAuction,\n    Auctioned,\n    Traded,\n    AwaitingSettlement,\n    Settled,\n    FeesCollected,\n    WithdrawalQueueProcessed,\n    Zombie\n}\n"
    },
    "contracts/cega-strategies/fcn/interfaces/IFCNProductEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport {\n    FCNProductCreationParams,\n    FCNVaultCreationParams\n} from \"../FCNStructs.sol\";\n\ninterface IFCNProductEntry {\n    function fcnCreateProduct(\n        FCNProductCreationParams calldata creationParams\n    ) external returns (uint32);\n\n    function fcnCreateVault(\n        uint32 productId,\n        FCNVaultCreationParams calldata creationParams\n    ) external returns (address vaultAddress);\n\n    function fcnAddToDepositQueue(\n        uint32 productId,\n        uint128 amount,\n        address receiver\n    ) external payable;\n\n    function fcnRemoveFromDepositQueue(\n        uint32 productId,\n        uint128 amount\n    ) external;\n\n    function fcnProcessDepositQueue(\n        address vaultAddress,\n        uint256 maxProcessCount\n    ) external;\n\n    function fcnAddToWithdrawalQueue(\n        address vaultAddress,\n        uint128 sharesAmount,\n        uint32 nextProductId\n    ) external;\n\n    function fcnAddToWithdrawalQueueWithProxy(\n        address vaultAddress,\n        uint128 sharesAmount\n    ) external;\n\n    function fcnProcessWithdrawalQueue(\n        address vaultAddress,\n        uint256 maxProcessCount\n    ) external;\n}\n"
    },
    "contracts/cega-strategies/fcn/interfaces/IFCNViewEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { FCNProduct, FCNVault } from \"../FCNStructs.sol\";\n\ninterface IFCNViewEntry {\n    function fcnGetProduct(\n        uint32 productId\n    ) external view returns (FCNProduct memory);\n\n    function fcnGetProductDepositAsset(\n        uint32 productId\n    ) external view returns (address);\n\n    function fcnGetVault(\n        address vaultAddress\n    ) external view returns (FCNVault memory);\n\n    function fcnGetCouponPayment(\n        address vaultAddress\n    ) external view returns (uint128);\n\n    function fcnCalculateVaultFinalPayoff(\n        address vaultAddress\n    ) external view returns (uint128);\n\n    function fcnCalculateRepaidBond(\n        address vaultAddress\n    ) external view returns (uint128);\n\n    function fcnCalculateVaultSettlementAmount(\n        address vaultAddress\n    ) external view returns (uint128);\n\n    function fcnGetBondAllowList(address receiver) external view returns (bool);\n\n    function fcnCalculateLateFee(\n        address vaultAddress\n    ) external view returns (uint128);\n}\n"
    },
    "contracts/common/interfaces/IProductViewEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\nimport { ProductMetadata } from \"../../Structs.sol\";\n\npragma solidity ^0.8.24;\n\ninterface IProductViewEntry {\n    function getStrategyOfProduct(\n        uint32 productId\n    ) external view returns (uint32);\n\n    function getLatestProductId() external view returns (uint32);\n\n    function getProductMetadata(\n        uint32 productId\n    ) external view returns (ProductMetadata memory);\n\n    function getIsProtocolPaused() external view returns (bool);\n\n    /**\n     * @dev Gets the deposit queue for a specific product, including depositors and their amounts.\n     * @param productId The product ID.\n     * @return depositors Array of depositor addresses.\n     * @return amounts Array of deposit amounts.\n     * @return totalAmount Total amount in the deposit queue.\n     */\n    function getDepositQueue(\n        uint32 productId\n    )\n        external\n        view\n        returns (\n            address[] memory depositors,\n            uint128[] memory amounts,\n            uint128 totalAmount\n        );\n}\n"
    },
    "contracts/oracle-entry/interfaces/IOracleEntry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.24;\n\ninterface IOracleEntry {\n    enum DataSource {\n        None,\n        Pyth\n    }\n\n    /**\n     * @dev Emitted when a data source adapter is set.\n     * @param dataSource The data source for which the adapter is set.\n     * @param adapter The address of the adapter.\n     */\n    event DataSourceAdapterSet(DataSource dataSource, address adapter);\n\n    /**\n     * @notice Gets the price of an asset at a specific timestamp using a data source.\n     * @param asset The address of the asset.\n     * @param timestamp The timestamp for which the price is required.\n     * @param dataSource The data source to use for fetching the price.\n     * @return The price of the asset at the specified timestamp.\n     */\n    function getSinglePrice(\n        address asset,\n        uint40 timestamp,\n        DataSource dataSource\n    ) external view returns (uint128);\n\n    /**\n     * @notice Gets the price of a base asset in terms of a quote asset at a specific timestamp using a data source.\n     * @param baseAsset The address of the base asset.\n     * @param quoteAsset The address of the quote asset.\n     * @param timestamp The timestamp for which the price is required.\n     * @param dataSource The data source to use for fetching the price.\n     * @return The price of the base asset in terms of the quote asset at the specified timestamp.\n     */\n    function getPrice(\n        address baseAsset,\n        address quoteAsset,\n        uint40 timestamp,\n        DataSource dataSource\n    ) external view returns (uint128);\n\n    /**\n     * @notice Sets the adapter for a specific data source.\n     * @param dataSource The data source for which to set the adapter.\n     * @param adapter The address of the adapter.\n     */\n    function setDataSourceAdapter(\n        DataSource dataSource,\n        address adapter\n    ) external;\n\n    /**\n     * @notice Returns the target number of decimals for price values.\n     * @return The number of decimals.\n     */\n    function getTargetDecimals() external pure returns (uint8);\n}\n"
    },
    "contracts/redeposits/RedepositManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { IProductViewEntry } from \"../common/interfaces/IProductViewEntry.sol\";\nimport {\n    IDCSViewEntry\n} from \"../cega-strategies/dcs/interfaces/IDCSViewEntry.sol\";\nimport {\n    IDCSProductEntry\n} from \"../cega-strategies/dcs/interfaces/IDCSProductEntry.sol\";\nimport {\n    IFCNViewEntry\n} from \"../cega-strategies/fcn/interfaces/IFCNViewEntry.sol\";\nimport {\n    IFCNProductEntry\n} from \"../cega-strategies/fcn/interfaces/IFCNProductEntry.sol\";\nimport { ITreasury } from \"../treasuries/interfaces/ITreasury.sol\";\nimport { Transfers } from \"../utils/Transfers.sol\";\nimport { IRedepositManager } from \"./interfaces/IRedepositManager.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\nimport { DCS_STRATEGY_ID, FCN_STRATEGY_ID } from \"../Structs.sol\";\n\ncontract RedepositManager is IRedepositManager {\n    using Transfers for address;\n\n    // CONSTANTS\n\n    address public immutable cegaEntry;\n\n    // MODIFIERS\n\n    modifier onlyCegaEntry() {\n        require(msg.sender == cegaEntry, Errors.NOT_CEGA_ENTRY);\n        _;\n    }\n\n    // CONSTRUCTOR\n\n    constructor(address _cegaEntry) {\n        cegaEntry = _cegaEntry;\n    }\n\n    // FUNCTIONS\n\n    receive() external payable {}\n\n    function redeposit(\n        ITreasury treasury,\n        uint32 productId,\n        address asset,\n        uint128 amount,\n        address receiver\n    ) external onlyCegaEntry {\n        uint32 strategyId = IProductViewEntry(cegaEntry).getStrategyOfProduct(\n            productId\n        );\n\n        if (strategyId == DCS_STRATEGY_ID) {\n            address productDepositAsset = IDCSViewEntry(cegaEntry)\n                .dcsGetProductDepositAsset(productId);\n            if (productDepositAsset == asset) {\n                // Redeposit\n                treasury.withdraw(asset, address(this), amount, true);\n                uint256 value = asset.ensureApproval(cegaEntry, amount);\n                try\n                    IDCSProductEntry(cegaEntry).dcsAddToDepositQueue{\n                        value: value\n                    }(productId, amount, receiver)\n                {\n                    emit Redeposited(productId, asset, amount, receiver, true);\n                    return;\n                } catch {\n                    // Return asset to treasury for withdrawal\n                    require(\n                        asset.transfer(address(treasury), amount),\n                        Errors.TRANSFER_FAILED\n                    );\n                }\n            }\n        } else if (strategyId == FCN_STRATEGY_ID) {\n            address productDepositAsset = IFCNViewEntry(cegaEntry)\n                .fcnGetProductDepositAsset(productId);\n            if (productDepositAsset == asset) {\n                // Redeposit\n                treasury.withdraw(asset, address(this), amount, true);\n                uint256 value = asset.ensureApproval(cegaEntry, amount);\n                try\n                    IFCNProductEntry(cegaEntry).fcnAddToDepositQueue{\n                        value: value\n                    }(productId, amount, receiver)\n                {\n                    emit Redeposited(productId, asset, amount, receiver, true);\n                    return;\n                } catch {\n                    // Return asset to treasury for withdrawal\n                    require(\n                        asset.transfer(address(treasury), amount),\n                        Errors.TRANSFER_FAILED\n                    );\n                }\n            }\n        }\n\n        // Impossible to redeposit, transfer to receiver\n        treasury.withdraw(asset, receiver, amount, false);\n        emit Redeposited(productId, asset, amount, receiver, false);\n    }\n}\n"
    },
    "contracts/redeposits/interfaces/IRedepositManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport { ITreasury } from \"../../treasuries/interfaces/ITreasury.sol\";\n\ninterface IRedepositManager {\n    // EVENTS\n\n    event Redeposited(\n        uint32 indexed productId,\n        address asset,\n        uint128 amount,\n        address receiver,\n        bool succeeded\n    );\n\n    // FUNCTIONS\n\n    function redeposit(\n        ITreasury treasury,\n        uint32 productId,\n        address asset,\n        uint128 amount,\n        address receiver\n    ) external;\n}\n"
    },
    "contracts/treasuries/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.24;\n\ninterface ITreasury {\n    event Withdrawn(\n        address indexed asset,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    event StuckAssetsAdded(\n        address indexed asset,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    receive() external payable;\n\n    /**\n     * @dev Withdraw funds from the treasury\n     * @param asset Address of the asset (0 for native token)\n     * @param receiver Address of the withdrawal receiver\n     * @param amount The amount of funds to withdraw.\n     * @param trustedReceiver Flag if we trust that receiver won't revert withdrawal\n     */\n    function withdraw(\n        address asset,\n        address receiver,\n        uint256 amount,\n        bool trustedReceiver\n    ) external;\n\n    function withdrawStuckAssets(address asset, address receiver) external;\n}\n"
    },
    "contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nlibrary Errors {\n    string public constant NOT_CEGA_ENTRY = \"1\";\n    string public constant NOT_CEGA_ADMIN = \"2\";\n    string public constant NOT_TRADER_ADMIN = \"3\";\n    string public constant NOT_TRADE_WINNER = \"4\";\n    string public constant INVALID_VAULT = \"5\";\n    string public constant INVALID_VAULT_STATUS = \"6\";\n    string public constant VAULT_IN_ZOMBIE_STATE = \"7\";\n    string public constant TRADE_DEFAULTED = \"8\";\n    string public constant INVALID_SETTLEMENT_STATUS = \"9\";\n    string public constant VAULT_IN_DISPUTE = \"10\";\n    string public constant VAULT_NOT_IN_DISPUTE = \"11\";\n    string public constant OUTSIDE_DISPUTE_PERIOD = \"12\";\n    string public constant TRADE_HAS_NO_WINNER = \"13\";\n    string public constant TRADE_NOT_CONVERTED = \"14\";\n    string public constant TRADE_CONVERTED = \"15\";\n    string public constant INVALID_TRADE_END_DATE = \"16\";\n    string public constant INVALID_PRICE = \"17\";\n    string public constant VALUE_TOO_SMALL = \"18\";\n    string public constant VALUE_TOO_LARGE = \"19\";\n    string public constant VALUE_IS_ZERO = \"20\";\n    string public constant MAX_DEPOSIT_LIMIT_REACHED = \"21\";\n    string public constant DEPOSIT_QUEUE_NOT_OPEN = \"22\";\n    string public constant INVALID_QUOTE_OR_BASE_ASSETS = \"23\";\n    string public constant INVALID_MIN_DEPOSIT_AMOUNT = \"24\";\n    string public constant INVALID_MIN_WITHDRAWAL_AMOUNT = \"25\";\n    string public constant INVALID_STRIKE_PRICE = \"26\";\n    string public constant TRANSFER_FAILED = \"27\";\n    string public constant NOT_AVAILABLE_DATA_SOURCE = \"28\";\n    string public constant NO_PRICE_AVAILABLE = \"29\";\n    string public constant NO_PRICE_FEED_SET = \"30\";\n    string public constant INCOMPATIBLE_PRICE = \"31\";\n    string public constant NOT_CEGA_ENTRY_OR_REDEPOSIT_MANAGER = \"32\";\n    string public constant NO_PROXY_FOR_REDEPOSIT = \"33\";\n    string public constant NOT_TRADE_WINNER_OR_TRADER_ADMIN = \"34\";\n    string public constant TRADE_NOT_STARTED = \"35\";\n    string public constant NOT_AVAILABLE_SWAP_TYPE = \"36\";\n    string public constant NOT_AVAILABLE_SWAP_PATH = \"37\";\n    string public constant PROTOCOL_PAUSED = \"38\";\n    string public constant WRONG_STRATEGY = \"39\";\n    string public constant INVALID_ARRAY_LENGTH = \"40\";\n    string public constant UNKNOWN_BARRIER_TYPE = \"41\";\n    string public constant NOT_BOND_OPTION = \"42\";\n    string public constant UNAUTHORIZED_BOND_RECEIVER = \"43\";\n    string public constant REMAINING_VALUE_TOO_SMALL = \"44\";\n    string public constant VALUE_IN_DISPUTE_GRACE_DELAY = \"45\";\n}\n"
    },
    "contracts/utils/Transfers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.24;\n\nimport {\n    IERC20,\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Errors } from \"../utils/Errors.sol\";\n\nlibrary Transfers {\n    using SafeERC20 for IERC20;\n\n    function receiveTo(\n        address asset,\n        address to,\n        uint256 amount\n    ) internal returns (uint256 nativeValueReceived) {\n        if (asset == address(0)) {\n            require(msg.value >= amount, Errors.VALUE_TOO_SMALL);\n            (bool success, ) = to.call{ value: amount }(\"\");\n            if (!success) {\n                revert(Errors.TRANSFER_FAILED);\n            }\n            return amount;\n        } else {\n            IERC20(asset).safeTransferFrom(msg.sender, to, amount);\n            return 0;\n        }\n    }\n\n    function transfer(\n        address asset,\n        address to,\n        uint256 amount\n    ) internal returns (bool) {\n        if (asset == address(0)) {\n            (bool success, ) = payable(to).call{ value: amount }(\"\");\n            return success;\n        } else {\n            (bool success, bytes memory returndata) = asset.call(\n                abi.encodeCall(IERC20.transfer, (to, amount))\n            );\n            if (!success || asset.code.length == 0) {\n                return false;\n            }\n            return returndata.length == 0 || abi.decode(returndata, (bool));\n        }\n    }\n\n    /// @notice Adds if needed, and returns required value to pass\n    /// @param asset Asset to ensure\n    /// @param to Spender\n    /// @param amount Amount to ensure\n    /// @return Native value to pass\n    function ensureApproval(\n        address asset,\n        address to,\n        uint256 amount\n    ) internal returns (uint256) {\n        if (asset != address(0)) {\n            uint256 allowance = IERC20(asset).allowance(address(this), to);\n            if (allowance < amount) {\n                IERC20(asset).safeIncreaseAllowance(to, amount - allowance);\n            }\n            return 0;\n        } else {\n            return amount;\n        }\n    }\n\n    function receiveNativeValue(uint256 value) internal {\n        require(value <= msg.value, Errors.VALUE_TOO_SMALL);\n        uint256 excessValue = msg.value - value;\n        if (excessValue > 0) {\n            (bool success, ) = payable(msg.sender).call{ value: excessValue }(\n                \"\"\n            );\n            require(success, Errors.TRANSFER_FAILED);\n        }\n    }\n}\n"
    }
  }
}}