{{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/PPSOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nfunction c_4f771700(bytes8 c__4f771700) pure {}\nfunction c_true4f771700(bytes8 c__4f771700) pure returns (bool){ return true; }\nfunction c_false4f771700(bytes8 c__4f771700) pure returns (bool){ return false; }\n\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../morpho-blue/src/interfaces/IOracle.sol\";\n\ncontract PPSOracle is Ownable, IOracle {\nfunction c_af2d22f4(bytes8 c__af2d22f4) internal pure {}\nfunction c_trueaf2d22f4(bytes8 c__af2d22f4) internal pure returns (bool){ return true; }\nfunction c_falseaf2d22f4(bytes8 c__af2d22f4) internal pure returns (bool){ return false; }\nmodifier c_mod7f3e83af{ c_af2d22f4(0x3e4e03756439fa43); /* modifier-post */ \n _; }\nmodifier c_modd7e2f0c1{ c_af2d22f4(0xc011aebfdd6ca25c); /* modifier-pre */ \n _; }\n\n    event SetPrice(uint256 oldPrice, uint256 newPrice);\n\n    uint256 public _price;\n\n    constructor(address owner) Ownable(owner) {c_af2d22f4(0xd2bc7eba249f2227); /* function */ \n}\n\n    /// @notice Sets the `price` per share with the correct scaling.\n    /// @param newPrice The new price, scaled by WAD.\n    /// @dev Set the price to 0 to make the oracle revert on `price`.\n    function setPrice(uint256 newPrice) public  c_modd7e2f0c1 onlyOwner c_mod7f3e83af  {c_af2d22f4(0x9af17f491397506c); /* function */ \n\nc_af2d22f4(0x252dd7e8f73a4c1d); /* line */ \n        c_af2d22f4(0x1567ee2d4bb29447); /* statement */ \nemit SetPrice(_price, newPrice);\nc_af2d22f4(0x3afdade97e7a8965); /* line */ \n        _price = newPrice;\n    }\n\n    /// @inheritdoc IOracle\n    function price() override external view returns (uint256) {c_af2d22f4(0x61e80559f947c336); /* function */ \n\nc_af2d22f4(0xbe1e7ecab982de27); /* line */ \n        c_af2d22f4(0xb7e32c403028aca3); /* requirePre */ \nc_af2d22f4(0x99fa4e52dba320a4); /* statement */ \nrequire(_price > 0);c_af2d22f4(0x11ff19ef1061cad5); /* requirePost */ \n\nc_af2d22f4(0xf363e4844f5c05d6); /* line */ \n        c_af2d22f4(0xc51cdfbdd1aab3d4); /* statement */ \nreturn _price;\n    }\n}\n"
    },
    "morpho-blue/src/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title IOracle\n/// @author Morpho Labs\n/// @custom:contact security@morpho.org\n/// @notice Interface that oracles used by Morpho must implement.\n/// @dev It is the user's responsibility to select markets with safe oracles.\ninterface IOracle {\n    /// @notice Returns the price of 1 asset of collateral token quoted in 1 asset of loan token, scaled by 1e36.\n    /// @dev It corresponds to the price of 10**(collateral token decimals) assets of collateral token quoted in\n    /// 10**(loan token decimals) assets of loan token with `36 + loan token decimals - collateral token decimals`\n    /// decimals of precision.\n    function price() external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": false
    }
  }
}}