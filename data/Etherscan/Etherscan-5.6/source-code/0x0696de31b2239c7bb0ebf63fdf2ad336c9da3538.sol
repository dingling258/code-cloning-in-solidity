{{
  "language": "Solidity",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": [
      "ds-test/=./lib/forge-std/lib/ds-test/src/",
      "forge-std/=./lib/forge-std/src/",
      "@solady=./lib/solady/",
      "@uniswap/v2-core=./lib/v2-core/",
      "@uniswap/v2-periphery=./lib/v2-periphery/",
      "@uniswap/v3-periphery=./lib/v3-periphery/",
      "@uniswap/v3-core=./lib/v3-core/",
      "@openzeppelin=./lib/openzeppelin/"
    ]
  },
  "sources": {
    "src/renderers/CertificateCompanionRenderer8.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\n// David Gokhshtein (@davidgokhshtein) heralds\r\n// An epic Half Baked Heroes (@hbh_nft) art saga\r\n// Immortalized by Daniel Sulzberg's (@Danvillageart) visionary illustrations\r\n// Infused into Ethereum's canvas by Scale Labs (@scale_labs):\r\n// The architects of alchemy masterfully weaving of art, code, and lore\r\n// Etched onto the blockchain at: 0x0696de31B2239c7bb0eBf63fdf2Ad336c9dA3538\r\n//\r\n// Website: https://halfbakedheroes.art/\r\n// Twitter/X: https://twitter.com/hbh_nft\r\n\r\nimport {ICertificateCompanionRenderer} from \"./ICertificateCompanionRenderer.sol\";\r\nimport {Companion15} from \"../companions/companion-15.sol\";\r\nimport {Companion16} from \"../companions/companion-16.sol\";\r\nimport {Renderer} from \"./Renderer.sol\";\r\nimport {CERTIFICATERENDERER} from \"./Addresses.sol\";\r\n\r\n/* slither-disable too-many-digits */\r\n/* solhint-disable quotes */\r\n/* solhint-disable max-line-length */\r\n/* solhint-disable max-states-count */\r\ncontract CertificateCompanionRenderer8 is Renderer, ICertificateCompanionRenderer {\r\n    constructor() {\r\n        _approveCaller(CERTIFICATERENDERER);\r\n    }\r\n\r\n    function getCompanionSvg(uint256 companionId) external view returns (bytes memory data, uint256 length) {\r\n        require(allowedCallers[msg.sender]);\r\n        require(companionId == 15 || companionId == 16);\r\n        if (companionId == 15) {\r\n            data = Companion15.data();\r\n            length = Companion15.length();\r\n        }\r\n        if (companionId == 16) {\r\n            data = Companion16.data();\r\n            length = Companion16.length();\r\n        }\r\n    }\r\n}\r\n"
    },
    "src/renderers/Addresses.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\naddress constant VALHALLA0 = 0x06990CBcE3aef7cf389951cf02017A52918d8385;\r\naddress constant VALHALLA1 = 0x069029377E91b118fb176963A21aDab329215d63;\r\naddress constant VALHALLA2 = 0x06927a77AbB09088A6971ab3536f1Ae3621f21E2;\r\naddress constant VALHALLA3 = 0x0695117B8706b1f8891577b6EF3aCb6CF3703Dde;\r\n\r\n// Salts used for deterministic contract creation, ensuring secure and predictable deployment of the associated contracts.\r\nbytes32 constant VALHALLA0_SALT = bytes32(uint256(201722));\r\nbytes32 constant VALHALLA1_SALT = bytes32(uint256(298611));\r\nbytes32 constant VALHALLA2_SALT = bytes32(uint256(421287));\r\nbytes32 constant VALHALLA3_SALT = bytes32(uint256(100432));\r\n\r\nstring constant VALHALLA0_CODE = \"Valhalla0.sol:Valhalla0\";\r\nstring constant VALHALLA1_CODE = \"Valhalla1.sol:Valhalla1\";\r\nstring constant VALHALLA2_CODE = \"Valhalla2.sol:Valhalla2\";\r\nstring constant VALHALLA3_CODE = \"Valhalla3.sol:Valhalla3\";\r\n\r\naddress constant HBHRENDERERHIDDEN = 0x069C3583dbD7f9eF0Ec009c3ae71ab873d7a5AAb;\r\naddress constant HBHRENDERERREVEALED = 0x069b690361Ae7Ca502b0D585CD7726F95e511B33;\r\n\r\nbytes32 constant HBHRENDERERHIDDEN_SALT = bytes32(uint256(432623));\r\nbytes32 constant HBHRENDERERREVEALED_SALT = bytes32(uint256(504815));\r\n\r\nstring constant HBHRENDERERHIDDEN_CODE = \"HBHRendererHidden.sol:HBHRendererHidden\";\r\nstring constant HBHRENDERERREVEALED_CODE = \"HBHRendererRevealed.sol:HBHRendererRevealed\";\r\n\r\naddress constant CERTIFICATERENDERER = 0x069f37B130a5dA522e6BF858026E6B0dF26af5Dc;\r\nbytes32 constant CERTIFICATERENDERER_SALT = bytes32(uint256(549450));\r\nstring constant CERTIFICATERENDERER_CODE = \"CertificateRenderer.sol:CertificateRenderer\";\r\n\r\naddress constant CERTIFICATECOMPANIONRENDERER1 = 0x069b1828e959Bc2a7a691e2768C3e16350BAA757;\r\naddress constant CERTIFICATECOMPANIONRENDERER2 = 0x069D1CDe655CaCF02119000DED2ad3c800e36E88;\r\naddress constant CERTIFICATECOMPANIONRENDERER3 = 0x069F3226D56A252bb809759BC7C2f8cd9ad9dE1E;\r\naddress constant CERTIFICATECOMPANIONRENDERER4 = 0x069EF1c2fF3E5d92D03B0Cf18eB127e0F9FE3E8D;\r\naddress constant CERTIFICATECOMPANIONRENDERER5 = 0x069b3d533ad17D8Ce7C33761bb960F13f676b01F;\r\naddress constant CERTIFICATECOMPANIONRENDERER6 = 0x069FA283E51Efb711CBBa1652e6961101B8Aa37E;\r\naddress constant CERTIFICATECOMPANIONRENDERER7 = 0x069df9CfaA7F6BBF551232c3728f6da332E7C808;\r\naddress constant CERTIFICATECOMPANIONRENDERER8 = 0x0696de31B2239c7bb0eBf63fdf2Ad336c9dA3538;\r\naddress constant CERTIFICATECOMPANIONRENDERER9 = 0x069681cC7C7a233aD00085ac807500DD18cf696e;\r\n\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER1_SALT = bytes32(uint256(917690));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER2_SALT = bytes32(uint256(750668));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER3_SALT = bytes32(uint256(766618));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER4_SALT = bytes32(uint256(798854));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER5_SALT = bytes32(uint256(817672));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER6_SALT = bytes32(uint256(835726));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER7_SALT = bytes32(uint256(588244));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER8_SALT = bytes32(uint256(600631));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER9_SALT = bytes32(uint256(864562));\r\n\r\nstring constant CERTIFICATECOMPANIONRENDERER1_CODE = \"CertificateCompanionRenderer1.sol:CertificateCompanionRenderer1\";\r\nstring constant CERTIFICATECOMPANIONRENDERER2_CODE = \"CertificateCompanionRenderer2.sol:CertificateCompanionRenderer2\";\r\nstring constant CERTIFICATECOMPANIONRENDERER3_CODE = \"CertificateCompanionRenderer3.sol:CertificateCompanionRenderer3\";\r\nstring constant CERTIFICATECOMPANIONRENDERER4_CODE = \"CertificateCompanionRenderer4.sol:CertificateCompanionRenderer4\";\r\nstring constant CERTIFICATECOMPANIONRENDERER5_CODE = \"CertificateCompanionRenderer5.sol:CertificateCompanionRenderer5\";\r\nstring constant CERTIFICATECOMPANIONRENDERER6_CODE = \"CertificateCompanionRenderer6.sol:CertificateCompanionRenderer6\";\r\nstring constant CERTIFICATECOMPANIONRENDERER7_CODE = \"CertificateCompanionRenderer7.sol:CertificateCompanionRenderer7\";\r\nstring constant CERTIFICATECOMPANIONRENDERER8_CODE = \"CertificateCompanionRenderer8.sol:CertificateCompanionRenderer8\";\r\nstring constant CERTIFICATECOMPANIONRENDERER9_CODE = \"CertificateCompanionRenderer9.sol:CertificateCompanionRenderer9\";\r\n"
    },
    "src/renderers/Renderer.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\nimport {Ownable} from \"../abstract/Ownable.sol\";\r\nimport {INITIAL_OWNER} from \"../utils/Addresses.sol\";\r\n\r\nabstract contract Renderer is Ownable {\r\n    event CallerApproval(address indexed caller);\r\n\r\n    mapping(address => bool) public allowedCallers;\r\n\r\n    constructor() {\r\n        _initializeOwner(INITIAL_OWNER);\r\n    }\r\n\r\n    function approveCaller(address caller) external onlyOwner {\r\n        _approveCaller(caller);\r\n    }\r\n\r\n    function _approveCaller(address caller) internal {\r\n        allowedCallers[caller] = true;\r\n        emit CallerApproval(caller);\r\n    }\r\n}\r\n"
    },
    "src/companions/companion-16.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nlibrary Companion16 {\r\n    function length() internal pure returns (uint256) {\r\n        return 12980;\r\n    }\r\n\r\n    function data() internal pure returns (bytes memory) {\r\n        return\r\n        hex\"\";\r\n    }\r\n}\r\n"
    },
    "src/companions/companion-15.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nlibrary Companion15 {\r\n    function length() internal pure returns (uint256) {\r\n        return 16999;\r\n    }\r\n\r\n    function data() internal pure returns (bytes memory) {\r\n        return\r\n        hex\"\";\r\n    }\r\n}\r\n"
    },
    "src/renderers/ICertificateCompanionRenderer.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface ICertificateCompanionRenderer {\r\n    function getCompanionSvg(uint256 companionId) external view returns (bytes memory data, uint256 length);\r\n}\r\n"
    },
    "src/utils/Addresses.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\nimport {IUniswapV3Factory} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\r\n\r\n// Administrative control address with full privileges for initial setup and configuration of the contract ecosystem.\r\naddress constant INITIAL_OWNER = 0x5cA1e1Ab50E1c9765F02B01FD2Ed340f394c5DDA;\r\n// Exclusive deployer address for the HalfBakedHeroes collection, to deploy smart contracts with pre-fixed addresses.\r\naddress constant HBH_DEPLOYER = 0x35a782Af7355BC5fA4452831B15442d3DEFB1d77;\r\naddress constant DEVS_HBH_MULTISIG = 0x5fe156F51443AE995300efC719DDeAE1D2C76730;\r\naddress constant MINE_HBH_MULTISIG = 0xCF598d75EA9194850EB8e429f43F109665196dFa;\r\naddress constant VIBES_HBH_MULTISIG = 0xeDDcb711569d5d93ad0b4CCb689658eF38c7cA4c;\r\n\r\naddress payable constant HBHART = payable(0x069220F5F85aE9B82371a29f5F9c70E0cBdcBf69);\r\naddress constant MEMENTOS = 0x069f85562F20e3c8120CbC8880cf67976992eA83;\r\naddress payable constant CERT_HBH = payable(0x069376a7d55C202Aa79565B25E167B97016D9168);\r\naddress payable constant LM_HBH = payable(0x069D89AE50Da299e3Caa5BD6e8a777C59fB9BEe8);\r\naddress constant G3PASS = 0xD5cfc0d7EE0d53ba192E2521e2a2C387bACE19Bb;\r\nuint256 constant G3PASSID = 1;\r\n\r\n// Salts used for deterministic contract creation, ensuring secure and predictable deployment of the associated contracts.\r\nbytes32 constant HBHART_SALT = bytes32(uint256(261411));\r\nbytes32 constant MEMENTOS_SALT = bytes32(uint256(678014));\r\nbytes32 constant CERT_HBH_SALT = bytes32(uint256(3077067));\r\nbytes32 constant LM_HBH_SALT = bytes32(uint256(2575142));\r\n\r\nstring constant HBHART_CODE = \"HalfBakedHeroes.sol:HalfBakedHeroes\";\r\nstring constant MEMENTOS_CODE = \"Mementos.sol:Mementos\";\r\nstring constant CERT_HBH_CODE = \"Certificate.sol:CertificateOfAuthenticity\";\r\nstring constant LM_HBH_CODE = \"LiquidityManager.sol:LiquidityManager\";\r\n\r\n// Address for Uniswap V3's Rocket Pool ETH-WETH 500 Pool, a liquidity pool for RETH-WETH swaps.\r\naddress constant UNISWAPV3_RETH_WETH_500_POOL = 0xa4e0faA58465A2D369aa21B3e42d43374c6F9613;\r\n// Address for the Uniswap V2 Factory, a central component of the Uniswap protocol used for creating new liquidity pools.\r\naddress constant UNISWAPV2FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n// The burn address, commonly used to remove tokens from circulation by sending them to an unrecoverable address.\r\naddress constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n// The Uniswap V3 Factory interface, a core contract for Uniswap V3 pools creation and management.\r\nIUniswapV3Factory constant POOL_FACTORY = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\r\naddress constant POSITION_MANAGER = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\r\n\r\naddress constant UNISWAPV2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\naddress constant UNISWAPV3ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n\r\naddress constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\naddress constant ROCKET_POOL_STAKED_ETH = 0xae78736Cd615f374D3085123A210448E74Fc6393;\r\n"
    },
    "src/abstract/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\r\n///\r\n/// @dev Note:\r\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\r\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\r\n///\r\n/// While the ownable portion follows\r\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\r\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\r\n//slither-disable-start assembly\r\nabstract contract Ownable {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The caller is not authorized to call the function.\r\n    error Unauthorized();\r\n\r\n    /// @dev The `newOwner` cannot be the zero address.\r\n    error NewOwnerIsZeroAddress();\r\n\r\n    /// @dev The `pendingOwner` does not have a valid handover request.\r\n    error NoHandoverRequest();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\r\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\r\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\r\n    /// despite it not being as lightweight as a single argument event.\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\r\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\r\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The owner slot is given by:\r\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\r\n    /// It is intentionally chosen to be a high value\r\n    /// to avoid collision with lower slots.\r\n    /// The choice of manual storage layout is to enable compatibility\r\n    /// with both regular and upgradeable contracts.\r\n    bytes32 internal constant _OWNER_SLOT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                     INTERNAL FUNCTIONS                     */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Initializes the owner directly without authorization guard.\r\n    /// This function must be called upon initialization,\r\n    /// regardless of whether the contract is upgradeable or not.\r\n    /// This is to enable generalization to both regular and upgradeable contracts,\r\n    /// and to save gas in case the initial owner is not the caller.\r\n    /// For performance reasons, this function will not check if there\r\n    /// is an existing owner.\r\n    function _initializeOwner(address newOwner) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Store the new value.\r\n            sstore(_OWNER_SLOT, newOwner)\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner directly without authorization guard.\r\n    function _setOwner(address newOwner) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ownerSlot := _OWNER_SLOT\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n            // Store the new value.\r\n            sstore(ownerSlot, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender is not the owner.\r\n    function _checkOwner() internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // If the caller is not the stored owner, revert.\r\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\r\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(shl(96, newOwner)) {\r\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /// @dev Allows the owner to renounce their ownership.\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                   PUBLIC READ FUNCTIONS                    */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Returns the owner of the contract.\r\n    function owner() public view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_OWNER_SLOT)\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         MODIFIERS                          */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Marks a function as only callable by the owner.\r\n    modifier onlyOwner() virtual {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n}\r\n\r\n//slither-disable-end assembly\r\n"
    },
    "./lib/v3-core//contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n    /// @notice Emitted when the owner of the factory is changed\r\n    /// @param oldOwner The owner before the owner was changed\r\n    /// @param newOwner The owner after the owner was changed\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @notice Emitted when a pool is created\r\n    /// @param token0 The first token of the pool by address sort order\r\n    /// @param token1 The second token of the pool by address sort order\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\r\n    /// @param pool The address of the created pool\r\n    event PoolCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint24 indexed fee,\r\n        int24 tickSpacing,\r\n        address pool\r\n    );\r\n\r\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\r\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n    /// @notice Returns the current owner of the factory\r\n    /// @dev Can be changed by the current owner via setOwner\r\n    /// @return The address of the factory owner\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\r\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\r\n    /// @return The tick spacing\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n\r\n    /// @notice Creates a pool for the given two tokens and fee\r\n    /// @param tokenA One of the two tokens in the desired pool\r\n    /// @param tokenB The other of the two tokens in the desired pool\r\n    /// @param fee The desired fee for the pool\r\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\r\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\r\n    /// are invalid.\r\n    /// @return pool The address of the newly created pool\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external returns (address pool);\r\n\r\n    /// @notice Updates the owner of the factory\r\n    /// @dev Must be called by the current owner\r\n    /// @param _owner The new owner of the factory\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Enables a fee amount with the given tickSpacing\r\n    /// @dev Fee amounts may never be removed once enabled\r\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\r\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}\r\n"
    }
  }
}}