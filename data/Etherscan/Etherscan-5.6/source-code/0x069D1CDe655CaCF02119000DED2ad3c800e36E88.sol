{{
  "language": "Solidity",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "remappings": [
      "ds-test/=./lib/forge-std/lib/ds-test/src/",
      "forge-std/=./lib/forge-std/src/",
      "@solady=./lib/solady/",
      "@uniswap/v2-core=./lib/v2-core/",
      "@uniswap/v2-periphery=./lib/v2-periphery/",
      "@uniswap/v3-periphery=./lib/v3-periphery/",
      "@uniswap/v3-core=./lib/v3-core/",
      "@openzeppelin=./lib/openzeppelin/"
    ]
  },
  "sources": {
    "src/renderers/CertificateCompanionRenderer2.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\n// David Gokhshtein (@davidgokhshtein) heralds\r\n// An epic Half Baked Heroes (@hbh_nft) art saga\r\n// Immortalized by Daniel Sulzberg's (@Danvillageart) visionary illustrations\r\n// Infused into Ethereum's canvas by Scale Labs (@scale_labs):\r\n// The architects of alchemy masterfully weaving of art, code, and lore\r\n// Etched onto the blockchain at: 0x069D1CDe655CaCF02119000DED2ad3c800e36E88\r\n//\r\n// Website: https://halfbakedheroes.art/\r\n// Twitter/X: https://twitter.com/hbh_nft\r\n\r\nimport {ICertificateCompanionRenderer} from \"./ICertificateCompanionRenderer.sol\";\r\nimport {Companion03} from \"../companions/companion-03.sol\";\r\nimport {Companion04} from \"../companions/companion-04.sol\";\r\nimport {Renderer} from \"./Renderer.sol\";\r\nimport {CERTIFICATERENDERER} from \"./Addresses.sol\";\r\n\r\n/* slither-disable too-many-digits */\r\n/* solhint-disable quotes */\r\n/* solhint-disable max-line-length */\r\n/* solhint-disable max-states-count */\r\ncontract CertificateCompanionRenderer2 is Renderer, ICertificateCompanionRenderer {\r\n    constructor() {\r\n        _approveCaller(CERTIFICATERENDERER);\r\n    }\r\n\r\n    function getCompanionSvg(uint256 companionId) external view returns (bytes memory data, uint256 length) {\r\n        require(allowedCallers[msg.sender]);\r\n        require(companionId == 3 || companionId == 4);\r\n        if (companionId == 3) {\r\n            data = Companion03.data();\r\n            length = Companion03.length();\r\n        }\r\n        if (companionId == 4) {\r\n            data = Companion04.data();\r\n            length = Companion04.length();\r\n        }\r\n    }\r\n}\r\n"
    },
    "src/renderers/Addresses.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\naddress constant VALHALLA0 = 0x06990CBcE3aef7cf389951cf02017A52918d8385;\r\naddress constant VALHALLA1 = 0x069029377E91b118fb176963A21aDab329215d63;\r\naddress constant VALHALLA2 = 0x06927a77AbB09088A6971ab3536f1Ae3621f21E2;\r\naddress constant VALHALLA3 = 0x0695117B8706b1f8891577b6EF3aCb6CF3703Dde;\r\n\r\n// Salts used for deterministic contract creation, ensuring secure and predictable deployment of the associated contracts.\r\nbytes32 constant VALHALLA0_SALT = bytes32(uint256(201722));\r\nbytes32 constant VALHALLA1_SALT = bytes32(uint256(298611));\r\nbytes32 constant VALHALLA2_SALT = bytes32(uint256(421287));\r\nbytes32 constant VALHALLA3_SALT = bytes32(uint256(100432));\r\n\r\nstring constant VALHALLA0_CODE = \"Valhalla0.sol:Valhalla0\";\r\nstring constant VALHALLA1_CODE = \"Valhalla1.sol:Valhalla1\";\r\nstring constant VALHALLA2_CODE = \"Valhalla2.sol:Valhalla2\";\r\nstring constant VALHALLA3_CODE = \"Valhalla3.sol:Valhalla3\";\r\n\r\naddress constant HBHRENDERERHIDDEN = 0x069C3583dbD7f9eF0Ec009c3ae71ab873d7a5AAb;\r\naddress constant HBHRENDERERREVEALED = 0x069b690361Ae7Ca502b0D585CD7726F95e511B33;\r\n\r\nbytes32 constant HBHRENDERERHIDDEN_SALT = bytes32(uint256(432623));\r\nbytes32 constant HBHRENDERERREVEALED_SALT = bytes32(uint256(504815));\r\n\r\nstring constant HBHRENDERERHIDDEN_CODE = \"HBHRendererHidden.sol:HBHRendererHidden\";\r\nstring constant HBHRENDERERREVEALED_CODE = \"HBHRendererRevealed.sol:HBHRendererRevealed\";\r\n\r\naddress constant CERTIFICATERENDERER = 0x069f37B130a5dA522e6BF858026E6B0dF26af5Dc;\r\nbytes32 constant CERTIFICATERENDERER_SALT = bytes32(uint256(549450));\r\nstring constant CERTIFICATERENDERER_CODE = \"CertificateRenderer.sol:CertificateRenderer\";\r\n\r\naddress constant CERTIFICATECOMPANIONRENDERER1 = 0x069b1828e959Bc2a7a691e2768C3e16350BAA757;\r\naddress constant CERTIFICATECOMPANIONRENDERER2 = 0x069D1CDe655CaCF02119000DED2ad3c800e36E88;\r\naddress constant CERTIFICATECOMPANIONRENDERER3 = 0x069F3226D56A252bb809759BC7C2f8cd9ad9dE1E;\r\naddress constant CERTIFICATECOMPANIONRENDERER4 = 0x069EF1c2fF3E5d92D03B0Cf18eB127e0F9FE3E8D;\r\naddress constant CERTIFICATECOMPANIONRENDERER5 = 0x069b3d533ad17D8Ce7C33761bb960F13f676b01F;\r\naddress constant CERTIFICATECOMPANIONRENDERER6 = 0x069FA283E51Efb711CBBa1652e6961101B8Aa37E;\r\naddress constant CERTIFICATECOMPANIONRENDERER7 = 0x069df9CfaA7F6BBF551232c3728f6da332E7C808;\r\naddress constant CERTIFICATECOMPANIONRENDERER8 = 0x0696de31B2239c7bb0eBf63fdf2Ad336c9dA3538;\r\naddress constant CERTIFICATECOMPANIONRENDERER9 = 0x069681cC7C7a233aD00085ac807500DD18cf696e;\r\n\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER1_SALT = bytes32(uint256(917690));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER2_SALT = bytes32(uint256(750668));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER3_SALT = bytes32(uint256(766618));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER4_SALT = bytes32(uint256(798854));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER5_SALT = bytes32(uint256(817672));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER6_SALT = bytes32(uint256(835726));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER7_SALT = bytes32(uint256(588244));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER8_SALT = bytes32(uint256(600631));\r\nbytes32 constant CERTIFICATECOMPANIONRENDERER9_SALT = bytes32(uint256(864562));\r\n\r\nstring constant CERTIFICATECOMPANIONRENDERER1_CODE = \"CertificateCompanionRenderer1.sol:CertificateCompanionRenderer1\";\r\nstring constant CERTIFICATECOMPANIONRENDERER2_CODE = \"CertificateCompanionRenderer2.sol:CertificateCompanionRenderer2\";\r\nstring constant CERTIFICATECOMPANIONRENDERER3_CODE = \"CertificateCompanionRenderer3.sol:CertificateCompanionRenderer3\";\r\nstring constant CERTIFICATECOMPANIONRENDERER4_CODE = \"CertificateCompanionRenderer4.sol:CertificateCompanionRenderer4\";\r\nstring constant CERTIFICATECOMPANIONRENDERER5_CODE = \"CertificateCompanionRenderer5.sol:CertificateCompanionRenderer5\";\r\nstring constant CERTIFICATECOMPANIONRENDERER6_CODE = \"CertificateCompanionRenderer6.sol:CertificateCompanionRenderer6\";\r\nstring constant CERTIFICATECOMPANIONRENDERER7_CODE = \"CertificateCompanionRenderer7.sol:CertificateCompanionRenderer7\";\r\nstring constant CERTIFICATECOMPANIONRENDERER8_CODE = \"CertificateCompanionRenderer8.sol:CertificateCompanionRenderer8\";\r\nstring constant CERTIFICATECOMPANIONRENDERER9_CODE = \"CertificateCompanionRenderer9.sol:CertificateCompanionRenderer9\";\r\n"
    },
    "src/renderers/Renderer.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\nimport {Ownable} from \"../abstract/Ownable.sol\";\r\nimport {INITIAL_OWNER} from \"../utils/Addresses.sol\";\r\n\r\nabstract contract Renderer is Ownable {\r\n    event CallerApproval(address indexed caller);\r\n\r\n    mapping(address => bool) public allowedCallers;\r\n\r\n    constructor() {\r\n        _initializeOwner(INITIAL_OWNER);\r\n    }\r\n\r\n    function approveCaller(address caller) external onlyOwner {\r\n        _approveCaller(caller);\r\n    }\r\n\r\n    function _approveCaller(address caller) internal {\r\n        allowedCallers[caller] = true;\r\n        emit CallerApproval(caller);\r\n    }\r\n}\r\n"
    },
    "src/companions/companion-04.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nlibrary Companion04 {\r\n    function length() internal pure returns (uint256) {\r\n        return 13943;\r\n    }\r\n\r\n    function data() internal pure returns (bytes memory) {\r\n        return\r\n        hex\"\";\r\n    }\r\n}\r\n"
    },
    "src/companions/companion-03.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\nlibrary Companion03 {\r\n    function length() internal pure returns (uint256) {\r\n        return 10078;\r\n    }\r\n\r\n    function data() internal pure returns (bytes memory) {\r\n        return\r\n        hex\"8d5acb8e24c70dfc15617dcd6ae5fb01480256bdd24d1f619461c9800e0664f8a0af774490555da3916a7cd899deeeae4c26190c0699f3cdcfdf7df3efbfffe797affef9af5f7ffdf6d3df628b25964f5ffde3db4f3fb51e1f2b14fcacfb96d2b61e63cbedd1b7541f692b6babfae031427a4cbe9943e7a7e591f04edf537a94ade0697ed6f0a3e3654f586af2c182f5426edb188f191abe84b553e8f9b1f059c5ce0bbb64ad5af08d8485426ffb7c64ec59b0d50ca56089f168a1c647daf12ff0b9844716bed1f8547ee43df12b787ec062bc688fb5457c9661eddefca390f1cd50434958a13ec68e37f9b51ad2dc3a3f8585f8f29ef00236860ceb3a6c8938da7ccc9ddee0fa70134de031f159deb7062fc0717c0c5e0973c35a09fb561d63c163b083564d7c15c6ca2d34bde023b92f62855cb0b7cce686585f06645a6f1fa410f97363cce296763a3fca140401c7c03ffc4ebfc1664627d8efb1e7c170c1b358aa74bc9ed829443cdf709c12a6bc5ae0069e0907854bc7c698c1ad1d4ec6d211bff29378414cc6c2caad4f7ed0072cb8e0e8f7af7e2a2b71a751089d8cd3649d8fdbe1719ca8ec76e64ef337868391a3a93822cf1db40dc3fc2c4b471bf4475919f69441df9d9b6843bd3309baa4556975de8026ec59b4cad43706ec290bebcda535cee77efff4f5db34f9e1871ff38f4f4b93d2938e8a53e048b09430cf3c53ab5c800186b377c00dc7a15d8d21ccdc731006b510f289a002fa324cea6135ba1cb0001cd6b3b642d3e0d926b3f0c5ca085cb67e67e28f5fca97dadcc4ba14a6c68d3a1356580b8519c7c0b744a426a18930c1de5ba39f6517ceb4659e0a598f8022f8e917269ce3adf8bfe6ff3af75822844d8c41a4afad20b4cf9208f612858e42f8d22a9ce465e1fb93ac678bd14e52d780f90c3276a90821127e63a0403b83ac54c4407863679c6358ca188095d0c61e7be6c6383bfcdfc320bd64a31739270a92845c4582117efc2dac1293f40d8f383626554316c333b49c706d839e22902709042edb1a215c277e6037d84bde98f41c33308b5d16933fd2bac6cd0700fdac4bd1197c0327d6ab122e677fefa3ef471c1eed3a3b7dd9b0e63e646e210fe28ca483217e432aac4004e2f0309ae16896864833f238e973d0bab29169533b30bae901053513ac51fc321cc064443ca472006761070344e6518de1827041bee207f4653c733c8bae583c72a6557002699989098892bfd75ee1c9acf2d099bd013be9d19de9cfa017d1a3d1240b1421dbf91dd1989689813160d0c8ca9b332d4d4b471a6481368a64692253810cb8d9c2dc8a85a03ceb5072b645a29c11af08e84b10de05eb4bfdd2bf7c7ecf1e25d1b183f5aeb22835d00001bc1799c69a571134bd87f2b033a51a8f810ad5acbe00b191940a6ccd674176801751528b7e56fd4cb7b4f1f9fb59ce649b823f9e41d9235564e222a35844ab58239029ff9835551eccc6288c3fcc51edc06f466ecf9bb8b0902295644c23c880045f221d99d3f01f039f0df82f3bde03fff93d348bfb72a832c0a664c162f6d9d69350d9c41a6933ac75e530c3dc4eea0b520284095d46f4d8d1446fc16a922a30cb7ab585e87ea1b6d99908763b317f4fa1c57861379b267d236951b470a2d6c059b935b7212795646577af02610b568af101ab352c7d961955ae545b87aaf7b2fa7b3ae1de599dc594df93a60a4ecc6249a305beb578d025433385095dc0aac194311fb7c30bc3ea7823f0aa2ad514b3b749d642192de1b2e7bd6d15a674aaa14eb707514b241b2142bb8889f152d5971091ab1837029355e5f8cea0994b70ac149345448e02c050d1d02ea2b5924a01c4f43ab7bf2daad50e8945a701bd4bbeb012096e894948bab27c58025d235df11022bbaef80f9eaf5a6487d4afd45d95c8ca2619541558a5b121255755b1e0eb1e2e86fc495d88337e71af26d214990c16b2084c162323fbcafa80177b72796816116f742e3d555e5c928d4504ba63d1fb8036ad93e42b8b81e4a492938dc52ec505fc2bfbf232cced67b6501315c16e06214c95bbaa9a39f50205976dfe44458ce72c7fa287d8cda8ec649557226329262c2850415d029f524cec4a896e94a674ad9b1044129894922c53f86f12f295e3b17ca06fae62b21276a03ab6261bf53559b3ca5dd5545536b875be1b4ca40f95d446884876e7cab4e1eba5a5e09cd7b2ef1d333f7fae0744bac055d9e868610688bd54b6c68e5ca4a85417ef28c56a766855f556665915a34e008de4dd65a1b3a478c2a8386b3d9476e7b86924bcab4dab0222458a5295fdc778b2b6e23475a85921826b255a2f76df4ba36169236a1f8627366cd6d2365a1ca9b74756142bb36bd00f05484396bc1ebf75638d7a7e526f4a2e04af440a18924ced0e833875d22aff65617d32dd3632e7507bb25835423215674a840cb71b710807648ba25e104bfd564da3856e1de66e5cd2144462a9b349deede9a5c05ae39ca889b2bddcc8d9514cc6a79e358a0bd411f1704d1d56099783dec37a486b527dec72211b20a5f4d89a587ced9be9374904f9c7752525984eb23982b224174c6f59f16172e666af7c930fa223f9b3444643d48ca296d4164e7638855edaa3b48bfaebcd848d15eba5f18246021c3e549b42c094e7b130fd2254ae227f9ddbbd332bc28d331da4a4fe734828241120ce5855ca4a574d239a961a5843423fc2a7d9871a1ea1244b8925f31ee2ecf2c6e605522fc95e69c0324c1f7176c3922b712d69ac94adfa5dd9bbd5aa54231fa8444a9c5dccbe8740a3ab3367390776a9a4b2f1044007abd4da6f96f9e0129649118f0aa00888eed0006aa21c2aecac64ad2bf05185f1dce6dedb53e041234a6f58d5ab1ccdd844a7007cdcdcc62da61bc4431a7a25030bf7e7c84a29c0f04094d1c41a87644ed12b8ab173afdb027d5514723e70d6367538cc054659f31c4fdca17ff2a70852554a1d81cd7bc6d3554289a75ee8a2cc1bbd30478fc7d4a051fa55a9c06113386eafaed0ca0fe443610a656bc4861169b52ce650cc24750a8636e53d212a1e6f5abaab5f1a97d7bee5bd9e98acd5b51423d820d9704cc5089b28c9d737f350f38aa2299dc40491be71c0a89e1deefb35fa639ba558b1c6612bfff5494775ce3ef889cd2803ae796152df39285b6854091703ef7d5ca55d623efa4b95547525b4b36ae2a6dd2d4f558d6d30c6932711b609df66de95f8b6e915fc5da5671795c465abf72695e79c9f0f7a8cc65dcc8b00fca1307320ab0ab35b0f640db2fd9e1c164675a69018e94808ab76688f7d39559668633aa6886ff20153abec748e4c920064cc269dbf737df841fd3e528d94cd9ae5b359b58f8f62712de26f8e2dc9349271acafe7f83a79a79aac5713aab2f77a4bb8b2e0b767595d0d9756b2430ccbf9d3d40f025ebce3e088b679c362436b5374accd45ba3baa81296a4a53426093a884ad8a987874352be7821f6cac348b4563d0e29d6e57d76b653eed9640f49f4419253887446a939ae96aed4de5ad5ee4b5e63da42eb2cbc2302c766c800ed5b5fbe8c76b5a7717e4dd804db7a7a6b78bfa64a880e4abc2b691c468f71aed4d011853e7e88682e4d24300d30454e3a962c3769b8111367c5f2d9a3af8adfba87ad9f70e06418972b5cbb7d73e6d44c88e5a9e56e1d064cce60bc30b770d465c08f698ce840c3499fdf5dacdbe75f91b25af715dd1c500f98e049625e38571e31c4de0a8caab0d03789181a491e6e138a06b9c84ad6b91f8ee5a5e23f21bf1fdb6e4aa851cba15e93e364ed9276d899671a23a4de024d7ff69689494c8f1668bbc355cf20822c1000d5c809025d77d085294ab02d36bf3db34b952ce6613044e2b4b50d3a7414452f79035d39c52047ebb948a24a079c784f2710772470f6f7cc46f6892a311d390206a2c6054bfc4dd12fb0f69b3b9699cc9a845792d5a5ba6aaa1eb2f9b16691a17d4c21456df2ee2e08848e6e5e3c6e3b5f96dfb5ceda2274ab59313e2b66c739b6dc45725539dc8bb999dc2f0dfc9e8960dab946e14837736d2aa13af0d3ec8e1d7c0af4afd5232658384f0aedba4e57a73a85064db9ac542fe4de1a55290779a3b9a72e758cd4a57b91fab5df36eaa379dd36e1356b0a222535c4fda5451d5dd2864da4c997961e9985ddf17c939721d9625f71f975453a397d756f7cc3fa4457215fbb2fda378354f89895d92772f76b63babe794be416e9726175037561bcebcd6bc176a4b13aa92f7e8aa9ed990b22873089b5e6a877b4a658fb266d7d0d1bb32562376ea476156fdf29e389987962465d1e4c57715b60e0b3ea88eafe6cbef22bb0b3d9bbf9c3accee55a76e05f8baeef6753c2d7bea11b1da3dfbd52d29bd3403bae997de8c620c88dd34ab9c337d8aae4954d6bd00c7a2e380b1dd4a18869348288bf7b25eaf702e798fe04b6194a37dee6d430caa618a031c3448f572bcc4d1b706d294bf14299a28e4f851bd7ac3bbd5552b47a6599dea3cb46651c26e709ee6e9d146874357c07c702861d962556bc025c8ce053f48d8575592e0d3dc389eedbe65a14d96ab041b6fb9e67e5cb43b70f3e97b95c751bdfe9834abb7f5e74a69573f98cf4b308dd0fcf53c2eceabb7f343e39e537df8b587c079b0df74f6ebde14554d74aab8dedc9634d199f76ebbc273e88a92f7ec3b4f163546e67d2b598d7e10392929295425f6c3e5a97b345caf794d9e374fc7a27434a6cce781249e37f51b6b79d1e78de9f45cabb7b7a76f2fbd4c66953d9d7ca412cc3b06a6a20fa5b76cd514a8ac14a353293e8aeeabd401e95ef05cee03101a6c8f2ba2eaf7a14673503fa67cbc24e8ef52e4e1a9a798d9ddfe764119ef6b7db0e3492ffe5723fe67182a8e64b7ddef3f397a09f6fba809f5d03227bdccff935c08af656edabda716ad149fc1578dd196ff49478dcde367c0f4276fe3c712cdce5ba24839ace471a74a5c3e09fbaaef14a5403abbf6f3d90f8bfc317ef0c2d92e97ceba727f1621825f4a5eb6abfef0e06e34f047201eaeb25378dd4b7e19a9a99f9f2ff9676aca9f2f00a6f002a681f1af7cf876bc72f5615609b04260fb7a35380a7175e7f6034bf9f25721d5f58bb443c92ea2fae5f55f79fcfab768a40cf4a54e375253c17aa9c132c14b9addd326d85862f80c28ffe611f136c37a371bfb5056d8b42cfb8d2a55a78dec346d58c9ff98c8f7beb5b1fa65228a23bff6f5cfdffd0f\";\r\n    }\r\n}\r\n"
    },
    "src/renderers/ICertificateCompanionRenderer.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\ninterface ICertificateCompanionRenderer {\r\n    function getCompanionSvg(uint256 companionId) external view returns (bytes memory data, uint256 length);\r\n}\r\n"
    },
    "src/utils/Addresses.sol": {
      "content": "// Copyright (c) 2023 David Gokhshtein. All rights reserved.\r\n// David Gokhshtein licenses this file to you under the Apache 2.0 license.\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\npragma solidity 0.8.21;\r\n\r\nimport {IUniswapV3Factory} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\r\n\r\n// Administrative control address with full privileges for initial setup and configuration of the contract ecosystem.\r\naddress constant INITIAL_OWNER = 0x5cA1e1Ab50E1c9765F02B01FD2Ed340f394c5DDA;\r\n// Exclusive deployer address for the HalfBakedHeroes collection, to deploy smart contracts with pre-fixed addresses.\r\naddress constant HBH_DEPLOYER = 0x35a782Af7355BC5fA4452831B15442d3DEFB1d77;\r\naddress constant DEVS_HBH_MULTISIG = 0x5fe156F51443AE995300efC719DDeAE1D2C76730;\r\naddress constant MINE_HBH_MULTISIG = 0xCF598d75EA9194850EB8e429f43F109665196dFa;\r\naddress constant VIBES_HBH_MULTISIG = 0xeDDcb711569d5d93ad0b4CCb689658eF38c7cA4c;\r\n\r\naddress payable constant HBHART = payable(0x069220F5F85aE9B82371a29f5F9c70E0cBdcBf69);\r\naddress constant MEMENTOS = 0x069f85562F20e3c8120CbC8880cf67976992eA83;\r\naddress payable constant CERT_HBH = payable(0x069376a7d55C202Aa79565B25E167B97016D9168);\r\naddress payable constant LM_HBH = payable(0x069D89AE50Da299e3Caa5BD6e8a777C59fB9BEe8);\r\naddress constant G3PASS = 0xD5cfc0d7EE0d53ba192E2521e2a2C387bACE19Bb;\r\nuint256 constant G3PASSID = 1;\r\n\r\n// Salts used for deterministic contract creation, ensuring secure and predictable deployment of the associated contracts.\r\nbytes32 constant HBHART_SALT = bytes32(uint256(261411));\r\nbytes32 constant MEMENTOS_SALT = bytes32(uint256(678014));\r\nbytes32 constant CERT_HBH_SALT = bytes32(uint256(3077067));\r\nbytes32 constant LM_HBH_SALT = bytes32(uint256(2575142));\r\n\r\nstring constant HBHART_CODE = \"HalfBakedHeroes.sol:HalfBakedHeroes\";\r\nstring constant MEMENTOS_CODE = \"Mementos.sol:Mementos\";\r\nstring constant CERT_HBH_CODE = \"Certificate.sol:CertificateOfAuthenticity\";\r\nstring constant LM_HBH_CODE = \"LiquidityManager.sol:LiquidityManager\";\r\n\r\n// Address for Uniswap V3's Rocket Pool ETH-WETH 500 Pool, a liquidity pool for RETH-WETH swaps.\r\naddress constant UNISWAPV3_RETH_WETH_500_POOL = 0xa4e0faA58465A2D369aa21B3e42d43374c6F9613;\r\n// Address for the Uniswap V2 Factory, a central component of the Uniswap protocol used for creating new liquidity pools.\r\naddress constant UNISWAPV2FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n// The burn address, commonly used to remove tokens from circulation by sending them to an unrecoverable address.\r\naddress constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n// The Uniswap V3 Factory interface, a core contract for Uniswap V3 pools creation and management.\r\nIUniswapV3Factory constant POOL_FACTORY = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\r\naddress constant POSITION_MANAGER = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\r\n\r\naddress constant UNISWAPV2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\naddress constant UNISWAPV3ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n\r\naddress constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\naddress constant ROCKET_POOL_STAKED_ETH = 0xae78736Cd615f374D3085123A210448E74Fc6393;\r\n"
    },
    "src/abstract/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\n/// @notice Simple single owner authorization mixin.\r\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\r\n///\r\n/// @dev Note:\r\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\r\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\r\n///\r\n/// While the ownable portion follows\r\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\r\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\r\n//slither-disable-start assembly\r\nabstract contract Ownable {\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                       CUSTOM ERRORS                        */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The caller is not authorized to call the function.\r\n    error Unauthorized();\r\n\r\n    /// @dev The `newOwner` cannot be the zero address.\r\n    error NewOwnerIsZeroAddress();\r\n\r\n    /// @dev The `pendingOwner` does not have a valid handover request.\r\n    error NoHandoverRequest();\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                           EVENTS                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\r\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\r\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\r\n    /// despite it not being as lightweight as a single argument event.\r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @dev `keccak256(bytes(\"OwnershipTransferred(address,address)\"))`.\r\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\r\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                          STORAGE                           */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev The owner slot is given by:\r\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\"_OWNER_SLOT_NOT\")))))`.\r\n    /// It is intentionally chosen to be a high value\r\n    /// to avoid collision with lower slots.\r\n    /// The choice of manual storage layout is to enable compatibility\r\n    /// with both regular and upgradeable contracts.\r\n    bytes32 internal constant _OWNER_SLOT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                     INTERNAL FUNCTIONS                     */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Initializes the owner directly without authorization guard.\r\n    /// This function must be called upon initialization,\r\n    /// regardless of whether the contract is upgradeable or not.\r\n    /// This is to enable generalization to both regular and upgradeable contracts,\r\n    /// and to save gas in case the initial owner is not the caller.\r\n    /// For performance reasons, this function will not check if there\r\n    /// is an existing owner.\r\n    function _initializeOwner(address newOwner) internal {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Store the new value.\r\n            sstore(_OWNER_SLOT, newOwner)\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the owner directly without authorization guard.\r\n    function _setOwner(address newOwner) internal virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ownerSlot := _OWNER_SLOT\r\n            // Clean the upper 96 bits.\r\n            newOwner := shr(96, shl(96, newOwner))\r\n            // Emit the {OwnershipTransferred} event.\r\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\r\n            // Store the new value.\r\n            sstore(ownerSlot, newOwner)\r\n        }\r\n    }\r\n\r\n    /// @dev Throws if the sender is not the owner.\r\n    function _checkOwner() internal view virtual {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // If the caller is not the stored owner, revert.\r\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\r\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            if iszero(shl(96, newOwner)) {\r\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\r\n                revert(0x1c, 0x04)\r\n            }\r\n        }\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    /// @dev Allows the owner to renounce their ownership.\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                   PUBLIC READ FUNCTIONS                    */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Returns the owner of the contract.\r\n    function owner() public view virtual returns (address result) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := sload(_OWNER_SLOT)\r\n        }\r\n    }\r\n\r\n    /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/\r\n    /*                         MODIFIERS                          */\r\n    /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/\r\n\r\n    /// @dev Marks a function as only callable by the owner.\r\n    modifier onlyOwner() virtual {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n}\r\n\r\n//slither-disable-end assembly\r\n"
    },
    "./lib/v3-core//contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/// @title The interface for the Uniswap V3 Factory\r\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\r\ninterface IUniswapV3Factory {\r\n    /// @notice Emitted when the owner of the factory is changed\r\n    /// @param oldOwner The owner before the owner was changed\r\n    /// @param newOwner The owner after the owner was changed\r\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\r\n\r\n    /// @notice Emitted when a pool is created\r\n    /// @param token0 The first token of the pool by address sort order\r\n    /// @param token1 The second token of the pool by address sort order\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\r\n    /// @param pool The address of the created pool\r\n    event PoolCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        uint24 indexed fee,\r\n        int24 tickSpacing,\r\n        address pool\r\n    );\r\n\r\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip\r\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\r\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\r\n\r\n    /// @notice Returns the current owner of the factory\r\n    /// @dev Can be changed by the current owner via setOwner\r\n    /// @return The address of the factory owner\r\n    function owner() external view returns (address);\r\n\r\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\r\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\r\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\r\n    /// @return The tick spacing\r\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\r\n\r\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\r\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\r\n    /// @param tokenA The contract address of either token0 or token1\r\n    /// @param tokenB The contract address of the other token\r\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\r\n    /// @return pool The pool address\r\n    function getPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external view returns (address pool);\r\n\r\n    /// @notice Creates a pool for the given two tokens and fee\r\n    /// @param tokenA One of the two tokens in the desired pool\r\n    /// @param tokenB The other of the two tokens in the desired pool\r\n    /// @param fee The desired fee for the pool\r\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\r\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\r\n    /// are invalid.\r\n    /// @return pool The address of the newly created pool\r\n    function createPool(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint24 fee\r\n    ) external returns (address pool);\r\n\r\n    /// @notice Updates the owner of the factory\r\n    /// @dev Must be called by the current owner\r\n    /// @param _owner The new owner of the factory\r\n    function setOwner(address _owner) external;\r\n\r\n    /// @notice Enables a fee amount with the given tickSpacing\r\n    /// @dev Fee amounts may never be removed once enabled\r\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\r\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\r\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\r\n}\r\n"
    }
  }
}}