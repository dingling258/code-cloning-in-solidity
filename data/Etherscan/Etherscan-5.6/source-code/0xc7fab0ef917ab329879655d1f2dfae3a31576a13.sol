// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

//
// This contract is simply a place for the two lovebirds by @smokestacks to hang out once in a while.
// Lovebirds
//
// ................................................................................[]..[]....[]..[][]..
// ........................................................................[]..[]......[]......[]....[]
// .............It's.for.the.birds.................................[]....[]..........[]....[]......[]..
// ..........................................................[]..............[][][]....[]....[][]..[]..
// ................................................................[]......[]........[][]....[]..[]..[]
// ......................................................[]............[]......[][]..[]..[]..[][][][]..
// ......................................................[]............[]..[]..[]....[]....[][][][][][]
// ..............................................[]..............[][][]......[]..[][]..[][][]....[]..[]
// ..............................................................[][][][][][]..[][]..[]..[][]....[][][]
// ..................................................[]..................[]..[][]..[][][][][][][][][][]
// ..........................................[]..........................[]......[][][][][][][]..[][][]
// ............................................[]....[]....................[][][][]......[][][][][][][]
// ............................[]................[]........................[][][][][][][][][][][][][][]
// ....................................[]..[]........[]........................[][][][][][][][][][][][]
// ..............................[]......[][]......[]........................[][][][][][][][][][][][][]
// ..................................[]........[][]............................[][][][][][][][][][][][]
// ..........................................[]..[]..[]........................[][][][][][][][][][][][]
// ................................[]....[]..[]....[]..[]....................[][][][][][][][][][][][][]
// ......................................[]..[]..[][][][]......................[][][][][][][][][][]....
// ..........................[]....[]..[]..[]....[]..[]..[]..................[][][][][][][][][][]..[][]
// ............................[]......................[]....................[][][][][][][][][][]..[][]
// ..........................................................................[][][][][][][][][]..[][][]
// ............................................................................................[][][][]
// ......................................[]..[][]....[]..[]......................................[][][]
// ..................[]....[][]..[]..[][]..[][][][][][][][][][][]....[][]........[][][][][][]..........
// ................................[]....[]......[]..[][][][][][][]..[][][]..[][][][][][][][][][][]....
// ..........................[][]..[][]..[]..[]..[][][][][][][][][][][][][][][][][][][][][][][][][][][]
// ......................[]......[][]..[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
// ......................[]..[][]....[][]..[]..[][][][][][][][][][][][][][][][][][][][][][][][][][][][]
// ..............[]..[]......[]..[][]..[]..[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
//

// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)
/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

interface loveBirdsInterface{
  function safeTransferFrom(address, address, uint256) external;
}

contract LoveNest is IERC721Receiver {

  address constant lovebirdsAddress = 0x067e7064b3E3783DADAFF47aF3c9C4b2eA7A4403;

  mapping(uint256 => address) lovebird;

  function onERC721Received(address, address _from, uint256 _tokenId, bytes memory)
          external returns (bytes4) {
    if (msg.sender != lovebirdsAddress) return 0x000000;
    lovebird[_tokenId] = _from;
    return this.onERC721Received.selector;
  }

  /**
   * @notice call your lovebird home
   * @param _tokenId 0: Noah, 1: Allie
   */
  function birdCall(uint256 _tokenId) external {
    uint256 tokenId = _tokenId;
    address sender = msg.sender;
    require(sender == lovebird[tokenId], "not the owner");
    lovebird[tokenId] = address(0);
    loveBirdsInterface(lovebirdsAddress).safeTransferFrom(address(this), sender, tokenId);
  }
}